var COMPODOC_SEARCH_INDEX = {
  index: {
    version: "2.3.9",
    fields: ["title", "body"],
    fieldVectors: [
      ["title/modules/AwsXrayPropagatorModule.html", [0, 1.19, 1, 2.395]],
      [
        "body/modules/AwsXrayPropagatorModule.html",
        [
          1, 4.131, 2, 1.528, 3, 0.345, 4, 0.345, 5, 0.265, 6, 0.265, 7, 3.84,
          8, 4.414, 9, 3.465, 10, 2.917, 11, 0.338, 12, 0.023, 13, 2.179, 14,
          0.345, 15, 2.316, 16, 1.942, 17, 3.775, 18, 3.166, 19, 2.704, 20,
          1.828, 21, 1.942, 22, 1.721, 23, 1.001, 24, 1.942, 25, 0.345, 26,
          0.822, 27, 0.019, 28, 0.019,
        ],
      ],
      [
        "title/injectables/AwsXrayPropagatorService.html",
        [17, 2.189, 29, 0.649],
      ],
      [
        "body/injectables/AwsXrayPropagatorService.html",
        [
          3, 0.318, 4, 0.318, 5, 0.244, 6, 0.301, 7, 4.355, 8, 4.564, 9, 3.93,
          11, 0.34, 12, 0.023, 14, 0.318, 16, 1.788, 17, 4.061, 18, 2.915, 25,
          0.318, 26, 0.757, 27, 0.018, 28, 0.018, 29, 1.065, 30, 1.788, 31,
          2.49, 32, 0.865, 33, 0.81, 34, 1.634, 35, 3.468, 36, 1.25, 37, 4.699,
          38, 0.984, 39, 6.844, 40, 1.327, 41, 3.561, 42, 2.203, 43, 1.25, 44,
          3.191, 45, 1.788, 46, 1.788, 47, 1.683, 48, 0.757,
        ],
      ],
      ["title/interfaces/B3PropagatorConfig.html", [49, 0.608, 50, 1.343]],
      [
        "body/interfaces/B3PropagatorConfig.html",
        [
          3, 0.172, 4, 0.172, 5, 0.132, 6, 0.132, 11, 0.263, 12, 0.024, 14,
          0.172, 23, 0.499, 25, 0.453, 27, 0.012, 28, 0.012, 32, 0.468, 33,
          0.438, 38, 0.382, 43, 0.676, 48, 0.914, 49, 1.042, 50, 2.239, 51,
          0.91, 52, 1.097, 53, 1.097, 54, 1.745, 55, 1.138, 56, 1.141, 57,
          2.328, 58, 2.402, 59, 0.6, 60, 2.046, 61, 2.032, 62, 1.63, 63, 1.539,
          64, 1.718, 65, 1.914, 66, 1.751, 67, 1.282, 68, 1.843, 69, 1.843, 70,
          1.843, 71, 1.843, 72, 1.097, 73, 1.843, 74, 1.254, 75, 1.097, 76,
          1.751, 77, 1.029, 78, 1.097, 79, 0.91, 80, 1.254, 81, 1.171, 82,
          1.097, 83, 1.361, 84, 1.751, 85, 0.565, 86, 0.967, 87, 0.746, 88,
          1.539, 89, 1.171, 90, 0.967, 91, 1.254, 92, 1.171, 93, 1.751, 94,
          1.732, 95, 2.334, 96, 1.539, 97, 1.029, 98, 1.254, 99, 1.254, 100,
          1.751, 101, 1.539, 102, 1.029, 103, 1.029, 104, 1.141, 105, 1.097,
          106, 1.171, 107, 1.539, 108, 1.171, 109, 1.254, 110, 1.923, 111,
          2.097, 112, 1.171, 113, 2.097, 114, 1.171, 115, 1.171, 116, 1.171,
          117, 1.64, 118, 1.751, 119, 1.171, 120, 1.171, 121, 1.097, 122, 1.171,
          123, 1.171, 124, 1.171, 125, 1.171, 126, 1.029, 127, 1.097, 128,
          1.171, 129, 1.171, 130, 1.097, 131, 1.171, 132, 1.097, 133, 1.029,
          134, 1.539, 135, 1.923, 136, 1.254, 137, 1.809, 138, 2.046, 139,
          1.171, 140, 1.171, 141, 1.171, 142, 1.097, 143, 1.171, 144, 1.029,
          145, 0.676, 146, 1.171, 147, 0.967, 148, 1.171, 149, 1.097, 150,
          0.967, 151, 1.539, 152, 1.171, 153, 1.254, 154, 2.19, 155, 0.857, 156,
          1.097, 157, 1.843, 158, 1.964, 159, 1.171, 160, 1.171, 161, 1.171,
          162, 2.18, 163, 1.751, 164, 1.171, 165, 1.254, 166, 1.254, 167, 1.171,
          168, 1.171, 169, 1.075, 170, 1.539, 171, 1.64, 172, 1.64, 173, 1.527,
          174, 1.439, 175, 1.361, 176, 1.824, 177, 1.171, 178, 1.446, 179,
          1.171, 180, 0.967, 181, 1.171, 182, 0.967, 183, 1.171, 184, 0.967,
          185, 1.171, 186, 0.967, 187, 0.91, 188, 0.857, 189, 2.19, 190, 1.097,
          191, 1.751, 192, 1.539, 193, 1.751, 194, 1.282, 195, 1.539, 196,
          1.171,
        ],
      ],
      ["title/modules/B3PropagatorModule.html", [0, 1.19, 197, 2.395]],
      [
        "body/modules/B3PropagatorModule.html",
        [
          2, 1.539, 3, 0.347, 4, 0.347, 5, 0.267, 6, 0.267, 10, 2.937, 11,
          0.339, 12, 0.023, 13, 2.187, 14, 0.347, 15, 2.325, 16, 1.955, 19,
          2.722, 20, 1.84, 21, 1.955, 22, 1.732, 23, 1.008, 24, 1.955, 25,
          0.347, 26, 0.828, 27, 0.02, 28, 0.02, 197, 4.148, 198, 3.866, 199,
          3.488, 200, 3.79, 201, 3.488,
        ],
      ],
      ["title/injectables/B3PropagatorService.html", [29, 0.649, 200, 2.189]],
      [
        "body/injectables/B3PropagatorService.html",
        [
          3, 0.238, 4, 0.238, 5, 0.183, 6, 0.319, 11, 0.319, 12, 0.024, 14,
          0.238, 16, 1.342, 25, 0.238, 26, 0.568, 27, 0.015, 28, 0.015, 29,
          0.884, 30, 1.342, 31, 1.868, 32, 1.005, 33, 0.607, 34, 1.356, 35,
          3.107, 36, 1.56, 38, 0.974, 40, 1.356, 41, 3.251, 42, 1.828, 43,
          0.938, 44, 2.394, 45, 1.342, 46, 1.342, 47, 1.262, 48, 0.568, 50,
          2.51, 54, 1.356, 55, 1.438, 56, 1.204, 58, 2.198, 59, 1.29, 60, 2.564,
          61, 2.268, 62, 2.362, 63, 2.485, 65, 1.978, 67, 1.619, 85, 1.067, 169,
          1.495, 173, 0.995, 174, 1.56, 198, 4.617, 199, 4.167, 200, 3.639, 201,
          2.394, 202, 2.979, 203, 3.261, 204, 4.085, 205, 3.355, 206, 4.11, 207,
          4.802, 208, 2.517, 209, 2.015, 210, 4.802, 211, 2.072, 212, 4.802,
          213, 3.525, 214, 2.745, 215, 2.979, 216, 4.11, 217, 6.136, 218, 3.525,
          219, 1.739, 220, 1.739, 221, 2.544, 222, 2.394, 223, 3.525, 224,
          3.525, 225, 3.525, 226, 3.525, 227, 3.525, 228, 3.525,
        ],
      ],
      [
        "title/interfaces/BatchSpanProcessorConfig.html",
        [49, 0.608, 110, 1.343],
      ],
      [
        "body/interfaces/BatchSpanProcessorConfig.html",
        [
          3, 0.165, 4, 0.165, 5, 0.127, 6, 0.127, 11, 0.257, 12, 0.024, 14,
          0.165, 23, 0.478, 25, 0.456, 27, 0.012, 28, 0.012, 32, 0.448, 33,
          0.42, 38, 0.366, 43, 0.648, 48, 0.9, 49, 1.029, 50, 2.021, 51, 0.873,
          52, 1.052, 53, 1.052, 54, 1.725, 55, 1.103, 56, 1.532, 57, 1.123, 58,
          2.463, 59, 1.168, 60, 1.491, 61, 1.59, 62, 1.319, 63, 0.987, 64,
          1.572, 65, 1.791, 66, 1.123, 67, 0.822, 68, 1.797, 69, 1.797, 70,
          1.797, 71, 1.797, 72, 1.052, 73, 1.797, 74, 1.202, 75, 1.052, 76,
          1.697, 77, 0.987, 78, 1.052, 79, 0.873, 80, 1.202, 81, 1.123, 82,
          1.052, 83, 1.319, 84, 1.697, 85, 0.541, 86, 0.928, 87, 0.722, 88,
          1.491, 89, 1.123, 90, 0.928, 91, 1.202, 92, 1.123, 93, 1.697, 94,
          1.689, 95, 2.292, 96, 1.491, 97, 0.987, 98, 1.202, 99, 1.202, 100,
          1.697, 101, 1.491, 102, 0.987, 103, 0.987, 104, 1.113, 105, 1.052,
          106, 1.123, 107, 1.491, 108, 1.123, 109, 1.816, 110, 2.021, 111,
          2.447, 112, 1.697, 113, 2.574, 114, 1.697, 115, 1.697, 116, 1.697,
          117, 2.41, 118, 2.045, 119, 1.697, 120, 1.697, 121, 2.134, 122, 1.697,
          123, 1.697, 124, 1.697, 125, 1.697, 126, 1.491, 127, 2.134, 128,
          1.697, 129, 1.697, 130, 1.589, 131, 1.697, 132, 2.134, 133, 0.987,
          134, 1.491, 135, 1.883, 136, 1.202, 137, 1.771, 138, 2.003, 139,
          1.123, 140, 1.123, 141, 1.123, 142, 1.052, 143, 1.123, 144, 0.987,
          145, 0.648, 146, 1.123, 147, 0.928, 148, 1.123, 149, 1.052, 150,
          0.928, 151, 1.491, 152, 1.123, 153, 1.202, 154, 2.151, 155, 0.822,
          156, 1.052, 157, 1.797, 158, 1.915, 159, 1.123, 160, 1.123, 161,
          1.123, 162, 2.134, 163, 1.697, 164, 1.123, 165, 1.202, 166, 1.202,
          167, 1.123, 168, 1.123, 169, 1.048, 170, 1.491, 171, 1.589, 172,
          1.589, 173, 1.499, 174, 1.413, 175, 1.319, 176, 1.791, 177, 1.123,
          178, 1.402, 179, 1.123, 180, 0.928, 181, 1.123, 182, 0.928, 183,
          1.123, 184, 0.928, 185, 1.123, 186, 0.928, 187, 0.873, 188, 0.822,
          189, 2.151, 190, 1.052, 191, 1.697, 192, 1.491, 193, 1.697, 194,
          1.242, 195, 1.491, 196, 1.123,
        ],
      ],
      ["title/interfaces/CommonCollectorConfig.html", [49, 0.608, 83, 1.263]],
      [
        "body/interfaces/CommonCollectorConfig.html",
        [
          3, 0.159, 4, 0.159, 5, 0.123, 6, 0.123, 11, 0.253, 12, 0.024, 14,
          0.159, 23, 0.463, 25, 0.448, 27, 0.011, 28, 0.011, 32, 0.434, 33,
          0.407, 38, 0.355, 43, 0.628, 48, 0.889, 49, 1.019, 50, 1.993, 51,
          0.845, 52, 1.018, 53, 1.018, 54, 1.71, 55, 1.076, 56, 1.616, 57,
          1.087, 58, 2.404, 59, 1.354, 60, 1.455, 61, 1.559, 62, 1.287, 63,
          0.956, 64, 1.546, 65, 1.766, 66, 1.087, 67, 0.796, 68, 1.762, 69,
          1.762, 70, 1.762, 71, 1.762, 72, 1.018, 73, 1.762, 74, 1.164, 75,
          1.018, 76, 2.242, 77, 0.956, 78, 1.018, 79, 0.845, 80, 1.164, 81,
          1.087, 82, 1.551, 83, 1.559, 84, 2.542, 85, 0.798, 86, 1.368, 87,
          0.955, 88, 2.234, 89, 1.656, 90, 1.368, 91, 1.773, 92, 1.656, 93,
          2.242, 94, 2.25, 95, 2.781, 96, 2.234, 97, 1.455, 98, 1.773, 99,
          1.773, 100, 2.542, 101, 1.97, 102, 1.455, 103, 1.455, 104, 1.22, 105,
          2.1, 106, 1.656, 107, 1.762, 108, 2.242, 109, 1.164, 110, 1.852, 111,
          2.005, 112, 1.087, 113, 2.005, 114, 1.087, 115, 1.087, 116, 1.087,
          117, 1.551, 118, 1.656, 119, 1.087, 120, 1.087, 121, 1.018, 122,
          1.087, 123, 1.087, 124, 1.087, 125, 1.087, 126, 0.956, 127, 1.018,
          128, 1.087, 129, 1.087, 130, 1.018, 131, 1.087, 132, 1.018, 133,
          0.956, 134, 1.455, 135, 1.852, 136, 1.164, 137, 1.742, 138, 1.97, 139,
          1.087, 140, 1.087, 141, 1.087, 142, 1.018, 143, 1.087, 144, 0.956,
          145, 0.628, 146, 1.087, 147, 0.898, 148, 1.087, 149, 1.018, 150,
          0.898, 151, 1.455, 152, 1.087, 153, 1.164, 154, 2.12, 155, 0.796, 156,
          1.018, 157, 1.762, 158, 1.878, 159, 1.087, 160, 1.087, 161, 1.087,
          162, 2.1, 163, 1.656, 164, 1.087, 165, 1.164, 166, 1.164, 167, 1.087,
          168, 1.087, 169, 1.028, 170, 1.455, 171, 1.551, 172, 1.551, 173,
          1.478, 174, 1.393, 175, 1.287, 176, 1.766, 177, 1.087, 178, 1.368,
          179, 1.087, 180, 0.898, 181, 1.087, 182, 0.898, 183, 1.087, 184,
          0.898, 185, 1.087, 186, 0.898, 187, 0.845, 188, 0.796, 189, 2.12, 190,
          1.018, 191, 1.656, 192, 1.455, 193, 1.656, 194, 1.212, 195, 1.455,
          196, 1.087,
        ],
      ],
      ["title/modules/CompositePropagatorModule.html", [0, 1.19, 229, 2.395]],
      [
        "body/modules/CompositePropagatorModule.html",
        [
          2, 1.539, 3, 0.347, 4, 0.347, 5, 0.267, 6, 0.267, 10, 2.937, 11,
          0.339, 12, 0.023, 13, 2.187, 14, 0.347, 15, 2.325, 16, 1.955, 19,
          2.722, 20, 1.84, 21, 1.955, 22, 1.732, 23, 1.008, 24, 1.955, 25,
          0.347, 26, 0.828, 27, 0.02, 28, 0.02, 229, 4.148, 230, 3.866, 231,
          3.866, 232, 4.148, 233, 3.866,
        ],
      ],
      [
        "title/injectables/CompositePropagatorService.html",
        [29, 0.649, 232, 2.395],
      ],
      [
        "body/injectables/CompositePropagatorService.html",
        [
          3, 0.268, 4, 0.268, 5, 0.206, 6, 0.301, 8, 3.524, 9, 2.688, 11, 0.352,
          12, 0.024, 14, 0.268, 16, 1.507, 17, 4.139, 18, 2.456, 19, 3.256, 25,
          0.268, 26, 0.638, 27, 0.017, 28, 0.017, 29, 0.955, 30, 1.507, 31,
          2.098, 32, 0.729, 33, 0.682, 34, 1.465, 35, 3.256, 36, 1.381, 38,
          0.923, 40, 1.118, 41, 3.38, 42, 1.975, 43, 1.053, 45, 1.507, 46,
          1.507, 47, 1.418, 48, 0.638, 56, 0.993, 59, 0.935, 85, 0.88, 87,
          1.206, 199, 2.688, 200, 4.062, 201, 2.688, 205, 3.256, 208, 2.831,
          211, 1.709, 219, 1.953, 230, 4.357, 231, 4.357, 232, 4.173, 234,
          3.959, 235, 4.139, 236, 4.139, 237, 3.959, 238, 3.959, 239, 6.547,
          240, 2.688, 241, 3.368, 242, 2.75, 243, 2.688, 244, 2.263, 245, 2.24,
          246, 2.688, 247, 3.959, 248, 3.959, 249, 3.959, 250, 3.959, 251,
          3.368, 252, 3.959, 253, 3.959, 254, 3.959, 255, 3.959,
        ],
      ],
      ["title/modules/ConsoleSpanExporterModule.html", [0, 1.19, 256, 2.395]],
      [
        "body/modules/ConsoleSpanExporterModule.html",
        [
          2, 1.535, 3, 0.346, 4, 0.346, 5, 0.267, 6, 0.267, 11, 0.339, 12,
          0.023, 13, 2.185, 14, 0.346, 20, 1.836, 21, 1.951, 22, 1.729, 23,
          1.006, 24, 1.951, 25, 0.346, 26, 0.826, 27, 0.019, 28, 0.019, 94,
          1.951, 104, 1.529, 256, 4.142, 257, 3.857, 258, 3.481, 259, 4.142,
          260, 3.481, 261, 2.632, 262, 2.528,
        ],
      ],
      [
        "title/injectables/ConsoleSpanExporterService.html",
        [29, 0.649, 259, 2.395],
      ],
      [
        "body/injectables/ConsoleSpanExporterService.html",
        [
          3, 0.319, 4, 0.319, 5, 0.246, 6, 0.302, 11, 0.327, 12, 0.023, 14,
          0.319, 25, 0.319, 26, 0.762, 27, 0.019, 28, 0.019, 29, 1.069, 30,
          1.799, 32, 0.87, 33, 0.815, 34, 1.64, 36, 1.258, 38, 0.986, 40, 1.335,
          45, 1.799, 46, 1.799, 47, 1.693, 48, 0.762, 64, 1.846, 87, 0.928, 104,
          1.644, 145, 1.546, 257, 4.371, 259, 4.454, 262, 2.332, 263, 2.933,
          264, 4.069, 265, 4.022, 266, 4.935, 267, 4.177, 268, 2.507, 269,
          2.505, 270, 2.505,
        ],
      ],
      ["title/interfaces/CustomSpan.html", [49, 0.608, 79, 1.263]],
      [
        "body/interfaces/CustomSpan.html",
        [
          3, 0.299, 4, 0.299, 5, 0.23, 6, 0.29, 11, 0.29, 12, 0.023, 25, 0.299,
          27, 0.018, 28, 0.018, 32, 1.025, 33, 0.762, 34, 1.573, 36, 1.176, 40,
          1.248, 43, 1.176, 47, 1.995, 49, 1.138, 51, 1.583, 56, 1.108, 59,
          1.044, 79, 1.995, 85, 0.982, 103, 2.594, 104, 1.798, 211, 1.908, 221,
          3.232, 271, 4.74, 272, 3.761, 273, 4.74, 274, 4.192, 275, 3.571, 276,
          3.974, 277, 4.74, 278, 4.819, 279, 5.072, 280, 5.072, 281, 4.819, 282,
          4.42, 283, 4.74, 284, 4.74, 285, 3.002,
        ],
      ],
      ["title/interfaces/IExporter.html", [49, 0.608, 268, 1.522]],
      [
        "body/interfaces/IExporter.html",
        [
          3, 0.325, 4, 0.325, 5, 0.25, 6, 0.305, 11, 0.305, 12, 0.023, 14,
          0.325, 25, 0.397, 27, 0.019, 28, 0.019, 32, 0.884, 33, 0.828, 34,
          1.657, 36, 1.279, 38, 0.722, 40, 1.357, 48, 0.774, 49, 1.092, 51,
          1.721, 64, 1.865, 72, 2.074, 87, 0.943, 145, 1.8, 175, 1.721, 176,
          1.621, 214, 3.354, 261, 2.074, 264, 4.093, 267, 4.322, 268, 2.532,
          269, 2.547, 270, 2.547, 286, 3.617, 287, 4.806, 288, 4.415, 289,
          5.868, 290, 4.089,
        ],
      ],
      ["title/interfaces/IPropagator.html", [42, 1.343, 49, 0.608]],
      [
        "body/interfaces/IPropagator.html",
        [
          3, 0.329, 4, 0.329, 5, 0.253, 6, 0.307, 11, 0.307, 12, 0.023, 14,
          0.329, 15, 1.852, 25, 0.4, 27, 0.019, 28, 0.019, 32, 0.896, 33, 0.839,
          34, 1.669, 35, 3.51, 36, 1.295, 38, 0.731, 40, 1.374, 41, 3.374, 42,
          2.25, 43, 1.295, 48, 0.784, 49, 1.098, 51, 1.743, 72, 2.1, 155, 2.289,
          175, 1.743, 176, 1.641, 214, 3.38, 288, 4.449, 291, 3.662, 292, 4.867,
          293, 5.03, 294, 5.913, 295, 4.141,
        ],
      ],
      ["title/interfaces/IgnoreUrlsConfig.html", [49, 0.608, 157, 1.428]],
      [
        "body/interfaces/IgnoreUrlsConfig.html",
        [
          3, 0.172, 4, 0.172, 5, 0.132, 6, 0.132, 11, 0.262, 12, 0.024, 14,
          0.172, 23, 0.498, 25, 0.453, 27, 0.012, 28, 0.012, 32, 0.467, 33,
          0.437, 38, 0.381, 43, 0.675, 48, 0.914, 49, 1.042, 50, 2.057, 51,
          0.909, 52, 1.095, 53, 1.095, 54, 1.745, 55, 1.137, 56, 1.14, 57, 1.17,
          58, 2.365, 59, 0.599, 60, 1.538, 61, 1.629, 62, 1.36, 63, 1.028, 64,
          1.604, 65, 1.823, 66, 1.17, 67, 0.856, 68, 1.842, 69, 1.842, 70,
          1.842, 71, 1.842, 72, 1.095, 73, 1.842, 74, 1.252, 75, 1.095, 76,
          1.75, 77, 1.028, 78, 1.095, 79, 0.909, 80, 1.252, 81, 1.17, 82, 1.095,
          83, 1.36, 84, 1.75, 85, 0.564, 86, 0.966, 87, 0.745, 88, 1.538, 89,
          1.17, 90, 0.966, 91, 1.252, 92, 1.17, 93, 1.75, 94, 1.731, 95, 2.332,
          96, 1.538, 97, 1.028, 98, 1.252, 99, 1.252, 100, 1.75, 101, 1.538,
          102, 1.028, 103, 1.028, 104, 1.14, 105, 1.095, 106, 1.17, 107, 1.538,
          108, 1.17, 109, 1.252, 110, 1.922, 111, 2.096, 112, 1.17, 113, 2.096,
          114, 1.17, 115, 1.17, 116, 1.17, 117, 1.639, 118, 1.75, 119, 1.17,
          120, 1.17, 121, 1.095, 122, 1.17, 123, 1.17, 124, 1.17, 125, 1.17,
          126, 1.028, 127, 1.095, 128, 1.17, 129, 1.17, 130, 1.095, 131, 1.17,
          132, 1.095, 133, 1.028, 134, 1.538, 135, 1.922, 136, 1.252, 137,
          1.808, 138, 2.045, 139, 1.17, 140, 1.17, 141, 1.17, 142, 1.095, 143,
          1.17, 144, 1.028, 145, 0.675, 146, 1.17, 147, 0.966, 148, 1.17, 149,
          1.095, 150, 0.966, 151, 1.538, 152, 1.17, 153, 1.252, 154, 2.189, 155,
          0.856, 156, 1.095, 157, 2.189, 158, 2.609, 159, 1.75, 160, 1.75, 161,
          1.75, 162, 2.448, 163, 2.326, 164, 1.75, 165, 1.252, 166, 1.252, 167,
          1.75, 168, 2.096, 169, 1.074, 170, 1.538, 171, 1.639, 172, 1.639, 173,
          1.526, 174, 1.438, 175, 1.36, 176, 1.823, 177, 1.17, 178, 1.445, 179,
          1.17, 180, 0.966, 181, 1.17, 182, 0.966, 183, 1.17, 184, 0.966, 185,
          1.17, 186, 0.966, 187, 0.909, 188, 0.856, 189, 2.189, 190, 1.095, 191,
          1.75, 192, 1.538, 193, 1.75, 194, 1.281, 195, 1.538, 196, 1.17, 296,
          2.16, 297, 2.16,
        ],
      ],
      [
        "title/injectables/InstrumentationService.html",
        [29, 0.649, 298, 2.189],
      ],
      [
        "body/injectables/InstrumentationService.html",
        [
          3, 0.153, 4, 0.153, 5, 0.117, 6, 0.323, 11, 0.317, 12, 0.024, 14,
          0.153, 15, 0.86, 25, 0.153, 26, 0.364, 27, 0.011, 28, 0.011, 29,
          0.639, 30, 0.86, 32, 0.779, 33, 0.389, 34, 0.981, 36, 1.625, 38,
          0.636, 40, 1.646, 42, 1.81, 45, 0.86, 46, 1.323, 48, 0.963, 54, 0.981,
          55, 1.041, 56, 1.416, 58, 1.839, 59, 1.376, 64, 1.346, 65, 1.604, 67,
          1.428, 77, 2.516, 78, 0.975, 83, 1.703, 85, 1.255, 86, 1.323, 87,
          0.682, 88, 1.715, 90, 2.15, 94, 2.324, 95, 2.755, 96, 2.287, 104,
          1.359, 145, 1.625, 155, 0.762, 169, 1.123, 170, 0.915, 173, 0.638,
          174, 1.551, 184, 0.86, 188, 1.966, 205, 3.683, 208, 1.952, 209, 1.291,
          211, 2.437, 214, 1.986, 215, 2.156, 219, 1.114, 220, 1.114, 221,
          3.089, 222, 1.534, 261, 0.975, 266, 2.615, 268, 2.681, 269, 1.841,
          270, 1.197, 275, 1.841, 276, 2.156, 298, 2.951, 299, 1.921, 300,
          2.615, 301, 4.612, 302, 5.421, 303, 2.956, 304, 2.956, 305, 2.876,
          306, 4.755, 307, 2.956, 308, 2.956, 309, 3.603, 310, 2.956, 311,
          4.046, 312, 4.046, 313, 3.475, 314, 2.956, 315, 2.258, 316, 2.956,
          317, 4.5, 318, 2.956, 319, 2.258, 320, 2.615, 321, 4.612, 322, 2.956,
          323, 4.046, 324, 2.956, 325, 2.258, 326, 4.755, 327, 4.046, 328,
          3.475, 329, 2.258, 330, 4.387, 331, 2.615, 332, 2.156, 333, 3.475,
          334, 2.258, 335, 2.956, 336, 2.258, 337, 2.258, 338, 3.187, 339,
          2.956, 340, 3.187, 341, 2.36, 342, 2.956, 343, 2.258, 344, 2.956, 345,
          4.235, 346, 3.578, 347, 2.258, 348, 1.921, 349, 1.921, 350, 1.699,
          351, 1.921, 352, 3.475, 353, 1.921, 354, 1.921, 355, 1.921, 356,
          3.475, 357, 1.921, 358, 2.956, 359, 2.956, 360, 1.921, 361, 1.699,
          362, 2.956, 363, 1.921, 364, 2.258, 365, 1.921, 366, 2.258, 367,
          2.258, 368, 2.258, 369, 2.258, 370, 2.258, 371, 1.921, 372, 1.921,
          373, 2.258, 374, 3.475, 375, 2.258, 376, 1.921, 377, 2.258, 378,
          2.258, 379, 1.921, 380, 2.258, 381, 1.921, 382, 1.921, 383, 2.258,
          384, 2.258, 385, 1.921, 386, 1.921, 387, 1.921, 388, 1.921, 389,
          1.921, 390, 1.921, 391, 2.258, 392, 2.258, 393, 2.258, 394, 3.475,
          395, 1.921, 396, 2.258, 397, 2.258, 398, 2.258,
        ],
      ],
      [
        "title/modules/JaegerHttpTracePropagatorModule.html",
        [0, 1.19, 399, 2.395],
      ],
      [
        "body/modules/JaegerHttpTracePropagatorModule.html",
        [
          2, 1.518, 3, 0.343, 4, 0.343, 5, 0.264, 6, 0.264, 10, 2.898, 11,
          0.337, 12, 0.023, 13, 2.17, 14, 0.343, 15, 2.306, 16, 1.93, 19, 2.686,
          20, 1.816, 21, 1.93, 22, 1.71, 23, 0.995, 24, 1.93, 25, 0.343, 26,
          0.817, 27, 0.019, 28, 0.019, 87, 1.272, 236, 3.76, 244, 2.898, 245,
          2.797, 246, 3.443, 399, 4.115, 400, 3.815,
        ],
      ],
      [
        "title/injectables/JaegerHttpTracePropagatorService.html",
        [29, 0.649, 236, 2.189],
      ],
      [
        "body/injectables/JaegerHttpTracePropagatorService.html",
        [
          3, 0.272, 4, 0.272, 5, 0.209, 6, 0.321, 11, 0.342, 12, 0.024, 14,
          0.272, 16, 1.53, 25, 0.272, 26, 0.648, 27, 0.017, 28, 0.017, 29,
          0.965, 30, 1.53, 31, 2.13, 32, 0.965, 33, 0.693, 34, 1.48, 35, 3.275,
          36, 1.552, 38, 0.929, 40, 1.135, 41, 3.397, 42, 1.995, 43, 1.07, 44,
          2.73, 45, 1.53, 46, 1.53, 47, 1.44, 48, 0.648, 55, 1.57, 56, 1.008,
          58, 1.878, 59, 1.238, 62, 1.878, 85, 0.893, 87, 1.332, 137, 1.878,
          156, 2.517, 169, 1.552, 173, 1.135, 174, 1.645, 205, 3.091, 208,
          2.688, 209, 2.299, 211, 1.735, 219, 1.983, 220, 1.983, 221, 2.13, 222,
          2.73, 236, 3.836, 244, 2.299, 245, 2.93, 246, 4.198, 305, 2.73, 400,
          4.652, 401, 4.46, 402, 4.021, 403, 5.455, 404, 2.73, 405, 4.021, 406,
          4.021, 407, 4.021,
        ],
      ],
      ["title/interfaces/JaegerPropagatorConfig.html", [49, 0.608, 154, 1.428]],
      [
        "body/interfaces/JaegerPropagatorConfig.html",
        [
          3, 0.173, 4, 0.173, 5, 0.133, 6, 0.133, 11, 0.264, 12, 0.024, 14,
          0.173, 23, 0.504, 25, 0.454, 27, 0.012, 28, 0.012, 32, 0.472, 33,
          0.442, 38, 0.386, 43, 0.683, 48, 0.918, 49, 1.045, 50, 2.067, 51,
          0.919, 52, 1.108, 53, 1.108, 54, 1.75, 55, 1.147, 56, 1.148, 57,
          1.183, 58, 2.406, 59, 0.606, 60, 1.55, 61, 1.64, 62, 1.64, 63, 1.039,
          64, 1.613, 65, 1.831, 66, 1.183, 67, 0.866, 68, 1.854, 69, 1.854, 70,
          1.854, 71, 1.854, 72, 1.108, 73, 1.854, 74, 1.266, 75, 1.108, 76,
          1.764, 77, 1.039, 78, 1.108, 79, 0.919, 80, 1.266, 81, 1.183, 82,
          1.108, 83, 1.371, 84, 1.764, 85, 0.57, 86, 0.977, 87, 0.751, 88, 1.55,
          89, 1.183, 90, 0.977, 91, 1.266, 92, 1.183, 93, 1.764, 94, 1.743, 95,
          2.343, 96, 1.55, 97, 1.039, 98, 1.266, 99, 1.266, 100, 1.764, 101,
          1.55, 102, 1.039, 103, 1.039, 104, 1.148, 105, 1.108, 106, 1.183, 107,
          1.55, 108, 1.183, 109, 1.266, 110, 1.932, 111, 2.11, 112, 1.183, 113,
          2.11, 114, 1.183, 115, 1.183, 116, 1.183, 117, 1.652, 118, 1.764, 119,
          1.183, 120, 1.183, 121, 1.108, 122, 1.183, 123, 1.183, 124, 1.183,
          125, 1.183, 126, 1.039, 127, 1.108, 128, 1.183, 129, 1.183, 130,
          1.108, 131, 1.183, 132, 1.108, 133, 1.039, 134, 1.55, 135, 1.932, 136,
          1.266, 137, 1.945, 138, 2.056, 139, 1.183, 140, 1.183, 141, 1.183,
          142, 1.108, 143, 1.183, 144, 1.039, 145, 0.683, 146, 1.183, 147,
          0.977, 148, 1.183, 149, 1.108, 150, 0.977, 151, 1.55, 152, 1.183, 153,
          1.266, 154, 2.39, 155, 1.291, 156, 2.191, 157, 1.854, 158, 1.976, 159,
          1.183, 160, 1.183, 161, 1.183, 162, 2.191, 163, 1.764, 164, 1.183,
          165, 1.266, 166, 1.266, 167, 1.183, 168, 1.183, 169, 1.081, 170, 1.55,
          171, 1.652, 172, 1.652, 173, 1.533, 174, 1.445, 175, 1.371, 176,
          1.831, 177, 1.183, 178, 1.457, 179, 1.183, 180, 0.977, 181, 1.183,
          182, 0.977, 183, 1.183, 184, 0.977, 185, 1.183, 186, 0.977, 187,
          0.919, 188, 0.866, 189, 2.199, 190, 1.108, 191, 1.764, 192, 1.55, 193,
          1.764, 194, 1.291, 195, 1.55, 196, 1.183,
        ],
      ],
      ["title/modules/NoopSpanExporterModule.html", [0, 1.19, 408, 2.395]],
      [
        "body/modules/NoopSpanExporterModule.html",
        [
          2, 1.508, 3, 0.34, 4, 0.34, 5, 0.262, 6, 0.262, 11, 0.348, 12, 0.023,
          13, 2.162, 14, 0.34, 20, 1.804, 21, 1.917, 22, 1.699, 23, 0.988, 24,
          1.917, 25, 0.34, 26, 0.811, 27, 0.019, 28, 0.019, 104, 1.513, 258,
          3.42, 260, 3.42, 261, 2.605, 262, 2.484, 408, 4.099, 409, 3.79, 410,
          3.79, 411, 6.036, 412, 3.79, 413, 4.099, 414, 4.285,
        ],
      ],
      [
        "title/injectables/NoopSpanExporterService.html",
        [29, 0.649, 413, 2.395],
      ],
      [
        "body/injectables/NoopSpanExporterService.html",
        [
          3, 0.319, 4, 0.319, 5, 0.246, 6, 0.302, 11, 0.327, 12, 0.023, 14,
          0.319, 25, 0.319, 26, 0.762, 27, 0.019, 28, 0.019, 29, 1.069, 30,
          1.799, 32, 0.87, 33, 0.815, 34, 1.64, 36, 1.258, 38, 0.986, 40, 1.335,
          45, 1.799, 46, 1.799, 47, 1.693, 87, 0.928, 104, 1.644, 145, 1.546,
          188, 2.121, 262, 2.332, 263, 2.933, 264, 4.069, 265, 4.022, 267,
          4.177, 268, 2.507, 269, 2.505, 270, 2.505, 409, 4.371, 410, 4.371,
          413, 4.454, 415, 5.809,
        ],
      ],
      ["title/modules/NoopTextMapPropagatorModule.html", [0, 1.19, 416, 2.654]],
      [
        "body/modules/NoopTextMapPropagatorModule.html",
        [
          2, 1.518, 3, 0.343, 4, 0.343, 5, 0.264, 6, 0.264, 10, 2.898, 11,
          0.337, 12, 0.023, 13, 2.17, 14, 0.343, 15, 2.306, 16, 1.93, 19, 2.686,
          20, 1.816, 21, 1.93, 22, 1.71, 23, 0.995, 24, 1.93, 25, 0.343, 26,
          0.817, 27, 0.019, 28, 0.019, 245, 2.188, 414, 4.313, 416, 4.56, 417,
          3.815, 418, 4.402, 419, 3.815, 420, 4.56, 421, 4.115,
        ],
      ],
      [
        "title/injectables/NoopTextMapPropagatorService.html",
        [29, 0.649, 421, 2.395],
      ],
      [
        "body/injectables/NoopTextMapPropagatorService.html",
        [
          3, 0.32, 4, 0.32, 5, 0.246, 6, 0.302, 11, 0.327, 12, 0.023, 14, 0.32,
          16, 1.803, 25, 0.32, 26, 0.763, 27, 0.019, 28, 0.019, 29, 1.07, 30,
          1.803, 31, 2.51, 32, 0.872, 33, 0.816, 34, 1.642, 35, 3.478, 36,
          1.261, 38, 0.986, 40, 1.337, 41, 3.569, 42, 2.214, 43, 1.261, 45,
          1.803, 46, 1.803, 47, 1.697, 187, 2.413, 245, 2.51, 417, 4.376, 418,
          4.457, 419, 4.376, 420, 4.376, 421, 3.949, 422, 5.816, 423, 4.737,
        ],
      ],
      ["title/interfaces/OpenTelemetryConfig.html", [49, 0.608, 169, 0.833]],
      [
        "body/interfaces/OpenTelemetryConfig.html",
        [
          3, 0.163, 4, 0.163, 5, 0.126, 6, 0.126, 11, 0.256, 12, 0.024, 14,
          0.163, 23, 0.475, 25, 0.45, 27, 0.012, 28, 0.012, 32, 0.445, 33,
          0.417, 38, 0.364, 43, 0.644, 48, 0.897, 49, 1.027, 50, 2.404, 51,
          0.866, 52, 1.044, 53, 1.044, 54, 1.682, 55, 1.097, 56, 1.624, 57,
          1.115, 58, 2.343, 59, 1.366, 60, 1.483, 61, 1.582, 62, 1.311, 63,
          0.98, 64, 1.566, 65, 1.785, 66, 1.115, 67, 0.816, 68, 1.789, 69,
          1.789, 70, 1.789, 71, 1.789, 72, 1.044, 73, 1.789, 74, 1.193, 75,
          1.044, 76, 1.687, 77, 0.98, 78, 1.044, 79, 0.866, 80, 1.193, 81,
          1.115, 82, 1.044, 83, 1.765, 84, 1.687, 85, 0.537, 86, 0.921, 87,
          0.718, 88, 1.483, 89, 1.115, 90, 0.921, 91, 1.193, 92, 1.115, 93,
          1.687, 94, 1.682, 95, 2.284, 96, 1.483, 97, 0.98, 98, 1.193, 99,
          1.193, 100, 1.687, 101, 1.483, 102, 0.98, 103, 0.98, 104, 1.108, 105,
          1.044, 106, 1.115, 107, 1.483, 108, 1.115, 109, 1.193, 110, 2.366,
          111, 2.036, 112, 1.115, 113, 2.036, 114, 1.115, 115, 1.115, 116,
          1.115, 117, 1.58, 118, 1.687, 119, 1.115, 120, 1.115, 121, 1.044, 122,
          1.115, 123, 1.115, 124, 1.115, 125, 1.115, 126, 0.98, 127, 1.044, 128,
          1.115, 129, 1.115, 130, 1.044, 131, 1.115, 132, 1.044, 133, 0.98, 134,
          1.996, 135, 1.876, 136, 1.193, 137, 1.765, 138, 1.996, 139, 1.115,
          140, 1.115, 141, 1.115, 142, 1.044, 143, 1.115, 144, 0.98, 145, 0.644,
          146, 1.115, 147, 0.921, 148, 1.115, 149, 1.044, 150, 0.921, 151,
          1.996, 152, 1.115, 153, 1.193, 154, 2.558, 155, 0.816, 156, 1.044,
          157, 2.144, 158, 1.907, 159, 1.115, 160, 1.115, 161, 1.115, 162,
          2.571, 163, 1.687, 164, 1.115, 165, 1.193, 166, 1.193, 167, 1.115,
          168, 1.115, 169, 1.25, 170, 2.255, 171, 2.403, 172, 2.403, 173, 1.495,
          174, 1.409, 175, 1.311, 176, 1.785, 177, 1.115, 178, 1.394, 179,
          1.115, 180, 0.921, 181, 1.115, 182, 0.921, 183, 1.115, 184, 0.921,
          185, 1.115, 186, 0.921, 187, 0.866, 188, 0.816, 189, 2.144, 190,
          1.044, 191, 1.687, 192, 1.483, 193, 1.687, 194, 1.235, 195, 1.483,
          196, 1.115,
        ],
      ],
      [
        "title/interceptors/OpenTelemetryHttpInterceptor.html",
        [424, 1.74, 425, 2.395],
      ],
      [
        "body/interceptors/OpenTelemetryHttpInterceptor.html",
        [
          3, 0.108, 4, 0.108, 5, 0.083, 6, 0.318, 11, 0.324, 12, 0.024, 14,
          0.108, 15, 0.606, 25, 0.108, 26, 0.541, 27, 0.008, 28, 0.008, 29,
          0.484, 32, 0.855, 33, 0.274, 34, 0.742, 36, 1.605, 38, 0.772, 40,
          1.588, 42, 1.483, 43, 0.699, 45, 0.606, 46, 1, 47, 0.57, 48, 0.884,
          49, 0.453, 54, 1.1, 55, 0.787, 56, 1.41, 58, 1.202, 59, 1.295, 62,
          1.395, 64, 1.067, 65, 0.886, 67, 1.132, 75, 1.682, 79, 2.014, 81,
          0.733, 83, 1.395, 85, 1.183, 86, 1, 87, 0.516, 88, 1.359, 90, 1.87,
          94, 1, 96, 1.064, 101, 1.064, 102, 1.359, 103, 1.578, 104, 1.614, 105,
          1.448, 117, 0.687, 121, 0.687, 127, 0.687, 132, 0.687, 137, 0.941,
          145, 1.037, 147, 0.606, 155, 1.454, 169, 0.92, 170, 0.645, 173, 0.449,
          174, 1.307, 176, 1.566, 178, 1.767, 180, 0.606, 182, 0.606, 187,
          0.941, 188, 1.314, 194, 0.537, 205, 3.596, 208, 1.795, 209, 0.91, 211,
          2.216, 214, 2.227, 215, 1.631, 219, 0.785, 220, 1.296, 221, 2.98, 240,
          1.081, 242, 1.392, 245, 0.687, 261, 0.687, 266, 1.978, 268, 1.682,
          269, 1.392, 270, 0.843, 273, 3.315, 274, 2.932, 275, 2.064, 276,
          2.881, 278, 4.876, 279, 4.323, 280, 3.245, 281, 3.245, 285, 1.081,
          301, 3.669, 303, 2.236, 304, 2.236, 307, 3.315, 308, 3.315, 309,
          3.315, 310, 2.236, 311, 3.315, 312, 3.315, 314, 1.354, 316, 1.354,
          317, 3.494, 318, 2.236, 320, 1.978, 321, 3.951, 322, 2.236, 323,
          3.315, 324, 2.236, 327, 2.856, 330, 3.494, 331, 3.697, 332, 1.631,
          335, 2.236, 338, 2.526, 339, 2.236, 340, 2.526, 341, 1.785, 342,
          2.236, 344, 2.236, 346, 2.932, 353, 1.354, 354, 1.354, 355, 1.354,
          357, 1.354, 358, 2.236, 359, 2.236, 360, 1.354, 361, 1.198, 362,
          2.236, 363, 1.354, 365, 3.951, 371, 1.354, 372, 1.354, 376, 1.354,
          379, 1.354, 381, 2.236, 382, 1.354, 385, 1.354, 386, 1.354, 387,
          1.354, 388, 1.354, 389, 1.354, 390, 1.354, 395, 1.354, 404, 1.081,
          412, 1.198, 424, 1.296, 425, 1.785, 426, 1.592, 427, 5.196, 428,
          1.354, 429, 2.236, 430, 3.896, 431, 2.628, 432, 3.356, 433, 2.856,
          434, 2.628, 435, 5.136, 436, 2.628, 437, 2.628, 438, 2.628, 439,
          2.628, 440, 2.628, 441, 1.592, 442, 1.592, 443, 1.592, 444, 3.315,
          445, 2.628, 446, 2.628, 447, 2.236, 448, 2.628, 449, 1.592, 450,
          2.236, 451, 2.628, 452, 1.592, 453, 1.592, 454, 2.628, 455, 2.236,
          456, 1.592, 457, 1.592, 458, 1.592, 459, 1.592, 460, 3.896, 461,
          1.592, 462, 2.628, 463, 1.978, 464, 1.502, 465, 3.356, 466, 1.592,
          467, 1.592, 468, 1.592, 469, 1.354, 470, 3.896, 471, 1.592, 472,
          2.628, 473, 2.236, 474, 1.592, 475, 1.592, 476, 1.354, 477, 1.592,
          478, 1.592, 479, 3.896, 480, 1.354, 481, 2.628, 482, 2.628, 483,
          2.628, 484, 2.628, 485, 2.628, 486, 2.628, 487, 2.628, 488, 3.356,
          489, 2.628, 490, 2.628, 491, 2.628, 492, 1.592, 493, 1.592, 494,
          1.592, 495, 1.592, 496, 1.592, 497, 1.354, 498, 1.592, 499, 1.592,
          500, 2.628, 501, 1.592, 502, 1.592, 503, 1.592, 504, 2.628, 505,
          1.592, 506, 1.592, 507, 1.592, 508, 1.592, 509, 1.592, 510, 1.592,
          511, 2.628, 512, 1.354, 513, 1.592, 514, 1.198, 515, 1.592, 516,
          1.592, 517, 1.592, 518, 1.592, 519, 1.592, 520, 2.932, 521, 2.628,
          522, 2.628, 523, 1.592, 524, 1.592, 525, 1.592, 526, 2.628, 527,
          1.978, 528, 1.592, 529, 2.628, 530, 2.628, 531, 1.592, 532, 1.592,
          533, 1.592, 534, 1.592, 535, 1.592, 536, 1.592, 537, 1.592, 538,
          1.592, 539, 1.592, 540, 1.592, 541, 1.592, 542, 1.592, 543, 1.592,
          544, 1.592, 545, 1.592, 546, 1.592, 547, 1.592, 548, 1.592, 549,
          1.592, 550, 1.592, 551, 1.592, 552, 1.592, 553, 1.592, 554, 1.354,
          555, 1.592, 556, 3.356, 557, 1.592, 558, 1.592, 559, 1.592, 560,
          1.592, 561, 1.592, 562, 1.592, 563, 3.356, 564, 1.592, 565, 1.592,
          566, 1.592, 567, 1.592, 568, 1.592, 569, 1.592, 570, 1.592, 571,
          1.592, 572, 1.592, 573, 1.592, 574, 2.628, 575, 1.592, 576, 1.592,
          577, 1.592, 578, 1.592, 579, 1.592, 580, 1.592, 581, 1.592, 582,
          1.592, 583, 1.592,
        ],
      ],
      [
        "title/modules/OpenTelemetryInterceptorModule.html",
        [0, 1.19, 584, 2.395],
      ],
      [
        "body/modules/OpenTelemetryInterceptorModule.html",
        [
          2, 1.206, 3, 0.272, 4, 0.272, 5, 0.209, 6, 0.273, 11, 0.334, 12,
          0.024, 13, 2.091, 14, 0.272, 20, 1.443, 21, 1.533, 22, 1.358, 23,
          0.79, 24, 1.533, 25, 0.272, 26, 0.649, 27, 0.017, 28, 0.017, 34,
          1.137, 36, 1.072, 38, 0.605, 40, 1.137, 48, 0.649, 56, 1.464, 59,
          0.951, 61, 1.443, 68, 2.505, 69, 2.505, 70, 2.505, 71, 2.505, 73,
          2.505, 85, 0.895, 126, 1.631, 169, 1.461, 174, 1.554, 176, 1.358, 186,
          1.533, 187, 2.091, 188, 1.969, 189, 2.598, 192, 1.631, 194, 1.358,
          206, 3.95, 208, 1.856, 211, 1.738, 220, 1.987, 285, 2.735, 305, 2.735,
          332, 2.499, 424, 1.987, 425, 3.564, 584, 4.356, 585, 5.249, 586,
          4.028, 587, 4.465, 588, 3.427, 589, 4.028, 590, 3.427, 591, 4.967,
          592, 4.465, 593, 4.465, 594, 4.465, 595, 4.028, 596, 4.028, 597,
          4.465, 598, 3.427, 599, 3.427, 600, 3.031, 601, 5.249, 602, 4.028,
        ],
      ],
      ["title/modules/OtelColExporterModule.html", [0, 1.19, 603, 2.395]],
      [
        "body/modules/OtelColExporterModule.html",
        [
          2, 1.542, 3, 0.348, 4, 0.348, 5, 0.268, 6, 0.268, 11, 0.339, 12,
          0.023, 13, 2.19, 14, 0.348, 20, 1.844, 21, 1.96, 22, 1.736, 23, 1.01,
          24, 1.96, 25, 0.348, 26, 0.829, 27, 0.02, 28, 0.02, 258, 3.496, 260,
          3.496, 261, 2.639, 262, 2.54, 603, 4.153, 604, 3.874, 605, 4.153, 606,
          3.874,
        ],
      ],
      ["title/interfaces/OtelCollectorConfig.html", [49, 0.608, 134, 1.428]],
      [
        "body/interfaces/OtelCollectorConfig.html",
        [
          3, 0.165, 4, 0.165, 5, 0.127, 6, 0.127, 11, 0.257, 12, 0.024, 14,
          0.165, 23, 0.479, 25, 0.453, 27, 0.012, 28, 0.012, 32, 0.449, 33,
          0.421, 38, 0.367, 43, 0.65, 48, 0.901, 49, 1.03, 50, 2.023, 51, 0.875,
          52, 1.054, 53, 1.054, 54, 1.726, 55, 1.105, 56, 1.562, 57, 1.125, 58,
          2.443, 59, 1.169, 60, 1.494, 61, 1.592, 62, 1.321, 63, 0.989, 64,
          1.776, 65, 1.957, 66, 1.125, 67, 0.824, 68, 1.8, 69, 1.8, 70, 1.8, 71,
          1.8, 72, 1.054, 73, 1.8, 74, 1.205, 75, 1.054, 76, 1.699, 77, 0.989,
          78, 1.054, 79, 0.875, 80, 1.205, 81, 1.125, 82, 1.054, 83, 1.321, 84,
          1.699, 85, 0.543, 86, 0.929, 87, 0.724, 88, 1.494, 89, 1.125, 90,
          0.929, 91, 1.205, 92, 1.125, 93, 2.282, 94, 1.691, 95, 2.294, 96,
          1.494, 97, 0.989, 98, 1.205, 99, 1.205, 100, 1.699, 101, 1.494, 102,
          0.989, 103, 0.989, 104, 1.114, 105, 1.054, 106, 1.125, 107, 1.8, 108,
          1.125, 109, 1.205, 110, 1.885, 111, 2.282, 112, 1.125, 113, 2.048,
          114, 1.125, 115, 1.125, 116, 1.125, 117, 1.592, 118, 2.048, 119,
          1.125, 120, 1.125, 121, 1.054, 122, 1.125, 123, 1.125, 124, 1.125,
          125, 1.125, 126, 0.989, 127, 1.054, 128, 1.125, 129, 1.125, 130,
          1.054, 131, 1.125, 132, 1.054, 133, 1.494, 134, 1.8, 135, 2.274, 136,
          1.819, 137, 1.904, 138, 2.42, 139, 1.699, 140, 1.699, 141, 1.699, 142,
          2.137, 143, 1.699, 144, 1.494, 145, 0.981, 146, 1.699, 147, 1.404,
          148, 1.699, 149, 2.137, 150, 0.929, 151, 1.494, 152, 1.125, 153,
          1.205, 154, 2.153, 155, 0.824, 156, 1.054, 157, 1.8, 158, 1.918, 159,
          1.125, 160, 1.125, 161, 1.125, 162, 2.137, 163, 1.699, 164, 1.125,
          165, 1.205, 166, 1.205, 167, 1.125, 168, 1.125, 169, 1.049, 170,
          1.494, 171, 1.592, 172, 1.592, 173, 1.501, 174, 1.414, 175, 1.321,
          176, 1.793, 177, 1.125, 178, 1.404, 179, 1.125, 180, 0.929, 181,
          1.125, 182, 0.929, 183, 1.125, 184, 0.929, 185, 1.125, 186, 0.929,
          187, 0.875, 188, 0.824, 189, 2.153, 190, 1.054, 191, 1.699, 192,
          1.494, 193, 1.699, 194, 1.244, 195, 1.494, 196, 1.125,
        ],
      ],
      ["title/modules/OtelWebTracerModule.html", [0, 1.19, 607, 2.395]],
      [
        "body/modules/OtelWebTracerModule.html",
        [
          2, 1.2, 3, 0.271, 4, 0.271, 5, 0.208, 6, 0.272, 11, 0.321, 12, 0.024,
          13, 2.086, 14, 0.271, 22, 1.351, 23, 0.786, 25, 0.353, 26, 0.646, 27,
          0.017, 28, 0.017, 34, 1.131, 36, 1.066, 38, 0.786, 40, 1.131, 48,
          0.646, 56, 1.46, 59, 0.946, 61, 1.435, 68, 2.5, 69, 2.5, 70, 2.5, 71,
          2.5, 73, 2.5, 85, 0.89, 169, 1.458, 174, 1.55, 176, 1.764, 186, 1.525,
          187, 2.086, 188, 1.964, 189, 2.66, 192, 1.623, 194, 1.351, 206, 3.936,
          208, 1.846, 211, 1.729, 220, 1.977, 298, 3.974, 305, 2.721, 332,
          2.486, 587, 4.45, 588, 3.409, 590, 3.409, 591, 4.955, 592, 4.45, 597,
          4.45, 598, 3.409, 599, 3.409, 600, 3.015, 607, 4.349, 608, 3.936, 609,
          3.015, 610, 4.007, 611, 4.45, 612, 4.007, 613, 3.936, 614, 4.45, 615,
          3.409, 616, 4.007, 617, 4.007, 618, 4.007,
        ],
      ],
      [
        "title/injectables/OtelcolExporterService.html",
        [29, 0.649, 605, 2.395],
      ],
      [
        "body/injectables/OtelcolExporterService.html",
        [
          3, 0.273, 4, 0.273, 5, 0.21, 6, 0.322, 11, 0.342, 12, 0.024, 14,
          0.273, 25, 0.273, 26, 0.941, 27, 0.017, 28, 0.017, 29, 0.967, 30,
          1.536, 32, 0.967, 33, 0.695, 34, 1.483, 36, 1.555, 38, 0.93, 40,
          1.139, 45, 1.536, 46, 1.536, 47, 1.445, 48, 0.65, 54, 1.483, 55,
          1.574, 56, 1.317, 59, 1.241, 85, 0.897, 87, 1.031, 135, 1.536, 138,
          1.634, 142, 1.741, 144, 1.634, 145, 1.074, 149, 1.741, 169, 1.554,
          171, 2.522, 173, 1.139, 174, 1.647, 205, 3.096, 208, 2.852, 209,
          2.307, 211, 1.741, 219, 1.99, 220, 1.99, 221, 2.138, 245, 1.741, 262,
          1.99, 263, 2.503, 264, 3.841, 267, 3.625, 268, 2.268, 269, 2.138, 270,
          2.784, 497, 3.433, 604, 4.658, 605, 4.204, 619, 5.255, 620, 4.035,
          621, 6.19, 622, 5.843, 623, 5.255, 624, 4.035, 625, 3.036, 626, 4.035,
          627, 4.035, 628, 4.035, 629, 4.035, 630, 4.035, 631, 4.035, 632,
          4.035,
        ],
      ],
      [
        "title/modules/W3CTraceContextPropagatorModule.html",
        [0, 1.19, 633, 2.395],
      ],
      [
        "body/modules/W3CTraceContextPropagatorModule.html",
        [
          2, 1.518, 3, 0.343, 4, 0.343, 5, 0.264, 6, 0.264, 10, 2.898, 11,
          0.337, 12, 0.023, 13, 2.17, 14, 0.343, 15, 2.306, 16, 1.93, 19, 2.686,
          20, 1.816, 21, 1.93, 22, 1.71, 23, 0.995, 24, 1.93, 25, 0.343, 26,
          0.817, 27, 0.019, 28, 0.019, 87, 1.272, 235, 3.76, 241, 4.313, 242,
          3.434, 243, 3.443, 633, 4.115, 634, 3.815,
        ],
      ],
      [
        "title/injectables/W3CTraceContextPropagatorService.html",
        [29, 0.649, 235, 2.189],
      ],
      [
        "body/injectables/W3CTraceContextPropagatorService.html",
        [
          3, 0.316, 4, 0.316, 5, 0.243, 6, 0.3, 11, 0.34, 12, 0.023, 14, 0.316,
          16, 1.781, 25, 0.316, 26, 0.754, 27, 0.018, 28, 0.018, 29, 1.062, 30,
          1.781, 31, 2.48, 32, 0.861, 33, 0.807, 34, 1.63, 35, 3.463, 36, 1.245,
          38, 0.982, 40, 1.321, 41, 3.557, 42, 2.197, 43, 1.245, 45, 1.781, 46,
          1.781, 47, 1.676, 48, 0.754, 87, 1.282, 235, 4.342, 240, 3.178, 242,
          3.463, 243, 3.92, 401, 3.981, 634, 4.344, 635, 5.773,
        ],
      ],
      ["title/interfaces/ZipkinCollectorConfig.html", [49, 0.608, 151, 1.428]],
      [
        "body/interfaces/ZipkinCollectorConfig.html",
        [
          3, 0.171, 4, 0.171, 5, 0.131, 6, 0.131, 11, 0.262, 12, 0.024, 14,
          0.171, 23, 0.496, 25, 0.453, 27, 0.012, 28, 0.012, 32, 0.465, 33,
          0.436, 38, 0.38, 43, 0.673, 48, 0.912, 49, 1.04, 50, 2.053, 51, 0.905,
          52, 1.091, 53, 1.091, 54, 1.743, 55, 1.134, 56, 1.353, 57, 1.165, 58,
          2.4, 59, 1.189, 60, 1.533, 61, 1.625, 62, 1.355, 63, 1.024, 64, 1.714,
          65, 1.91, 66, 1.165, 67, 0.852, 68, 1.837, 69, 1.837, 70, 1.837, 71,
          1.837, 72, 1.091, 73, 1.837, 74, 1.247, 75, 1.091, 76, 1.744, 77,
          1.024, 78, 1.091, 79, 0.905, 80, 1.247, 81, 1.165, 82, 1.091, 83,
          1.355, 84, 1.744, 85, 0.562, 86, 0.962, 87, 0.743, 88, 1.533, 89,
          1.165, 90, 0.962, 91, 1.247, 92, 1.165, 93, 1.744, 94, 1.727, 95,
          2.328, 96, 1.533, 97, 1.024, 98, 1.247, 99, 1.247, 100, 1.744, 101,
          1.533, 102, 1.024, 103, 1.024, 104, 1.137, 105, 1.091, 106, 1.165,
          107, 1.533, 108, 1.165, 109, 1.247, 110, 1.917, 111, 2.091, 112,
          1.165, 113, 2.091, 114, 1.165, 115, 1.165, 116, 1.165, 117, 1.633,
          118, 1.744, 119, 1.165, 120, 1.165, 121, 1.091, 122, 1.165, 123,
          1.165, 124, 1.165, 125, 1.165, 126, 1.024, 127, 1.091, 128, 1.165,
          129, 1.165, 130, 1.091, 131, 1.165, 132, 1.091, 133, 1.024, 134,
          1.533, 135, 2.298, 136, 1.247, 137, 1.932, 138, 2.445, 139, 1.165,
          140, 1.165, 141, 1.165, 142, 1.091, 143, 1.165, 144, 1.024, 145,
          0.673, 146, 1.165, 147, 0.962, 148, 1.165, 149, 1.091, 150, 1.44, 151,
          1.837, 152, 1.744, 153, 1.247, 154, 2.185, 155, 0.852, 156, 1.091,
          157, 1.837, 158, 1.958, 159, 1.165, 160, 1.165, 161, 1.165, 162,
          2.174, 163, 1.744, 164, 1.165, 165, 1.247, 166, 1.247, 167, 1.165,
          168, 1.165, 169, 1.071, 170, 1.533, 171, 1.633, 172, 1.633, 173,
          1.523, 174, 1.436, 175, 1.355, 176, 1.819, 177, 1.165, 178, 1.44, 179,
          1.165, 180, 0.962, 181, 1.165, 182, 0.962, 183, 1.165, 184, 0.962,
          185, 1.165, 186, 0.962, 187, 0.905, 188, 0.852, 189, 2.185, 190,
          1.091, 191, 1.744, 192, 1.533, 193, 1.744, 194, 1.276, 195, 1.533,
          196, 1.165, 636, 3.785,
        ],
      ],
      ["title/modules/ZipkinExporterModule.html", [0, 1.19, 637, 2.395]],
      [
        "body/modules/ZipkinExporterModule.html",
        [
          2, 1.542, 3, 0.348, 4, 0.348, 5, 0.268, 6, 0.268, 11, 0.339, 12,
          0.023, 13, 2.19, 14, 0.348, 20, 1.844, 21, 1.96, 22, 1.736, 23, 1.01,
          24, 1.96, 25, 0.348, 26, 0.829, 27, 0.02, 28, 0.02, 150, 1.96, 258,
          3.496, 260, 3.496, 261, 2.639, 262, 2.54, 637, 4.153, 638, 3.874, 639,
          4.153,
        ],
      ],
      ["title/injectables/ZipkinExporterService.html", [29, 0.649, 639, 2.395]],
      [
        "body/injectables/ZipkinExporterService.html",
        [
          3, 0.278, 4, 0.278, 5, 0.214, 6, 0.324, 11, 0.336, 12, 0.024, 14,
          0.278, 25, 0.278, 26, 0.95, 27, 0.017, 28, 0.017, 29, 0.979, 30,
          1.566, 32, 0.979, 33, 0.709, 34, 1.502, 36, 1.569, 38, 0.937, 40,
          1.161, 45, 1.566, 46, 1.566, 47, 1.473, 48, 0.663, 55, 1.594, 56,
          1.031, 59, 1.256, 85, 0.914, 87, 0.807, 135, 1.566, 138, 1.666, 150,
          1.566, 169, 1.562, 172, 2.905, 173, 1.161, 174, 1.659, 205, 3.125,
          208, 2.718, 209, 2.352, 211, 1.775, 219, 2.029, 220, 2.029, 221, 2.18,
          222, 2.794, 262, 2.029, 263, 2.552, 264, 3.869, 267, 4.007, 268,
          2.296, 269, 2.18, 270, 2.18, 625, 3.096, 638, 4.693, 639, 4.235, 640,
          5.321, 641, 4.114, 642, 5.898, 643, 5.321, 644, 5.321, 645, 5.898,
          646, 4.114, 647, 4.114, 648, 4.114, 649, 4.114,
        ],
      ],
      ["title/changelog.html", [650, 1.831, 651, 1.831, 652, 2.51]],
      [
        "body/changelog.html",
        [
          5, 0.189, 11, 0.093, 12, 0.009, 18, 1.107, 27, 0.009, 28, 0.009, 38,
          0.268, 48, 0.672, 54, 1.293, 60, 1.169, 61, 1.033, 62, 0.639, 63,
          1.169, 64, 0.567, 65, 0.602, 67, 2.091, 77, 1.69, 85, 0.807, 87, 0.35,
          90, 0.679, 93, 0.822, 97, 1.69, 101, 0.723, 102, 0.723, 104, 1.046,
          107, 1.169, 110, 1.098, 130, 0.77, 133, 1.471, 135, 0.679, 137, 0.639,
          144, 0.723, 145, 0.768, 147, 0.679, 150, 0.679, 155, 1.407, 158, 0.77,
          162, 0.77, 174, 0.967, 175, 0.639, 194, 1.653, 195, 0.723, 202, 1.107,
          233, 2.733, 242, 1.925, 244, 1.649, 245, 1.568, 275, 3.591, 276, 1.79,
          300, 1.343, 317, 1.343, 320, 1.343, 350, 1.343, 403, 1.518, 404,
          1.959, 424, 1.792, 447, 1.518, 463, 1.343, 464, 2.802, 480, 1.518,
          514, 1.343, 527, 2.733, 606, 3.14, 652, 3.09, 653, 1.785, 654, 1.785,
          655, 1.343, 656, 1.785, 657, 1.785, 658, 4.174, 659, 1.785, 660,
          1.785, 661, 1.518, 662, 4.901, 663, 6.036, 664, 4.172, 665, 4.172,
          666, 3.897, 667, 5.547, 668, 5.37, 669, 4.568, 670, 3.632, 671, 6.879,
          672, 6.879, 673, 1.79, 674, 1.785, 675, 1.785, 676, 5.37, 677, 4.568,
          678, 2.885, 679, 4.172, 680, 3.632, 681, 6.123, 682, 3.55, 683, 5.826,
          684, 3.632, 685, 4.568, 686, 4.581, 687, 1.785, 688, 1.785, 689,
          1.785, 690, 5.37, 691, 3.632, 692, 4.581, 693, 4.901, 694, 5.697, 695,
          5.158, 696, 3.632, 697, 3.632, 698, 2.455, 699, 5.547, 700, 1.785,
          701, 1.785, 702, 1.785, 703, 1.785, 704, 4.581, 705, 2.885, 706, 6.64,
          707, 2.885, 708, 1.785, 709, 1.785, 710, 5.37, 711, 2.885, 712, 1.785,
          713, 4.901, 714, 2.885, 715, 5.158, 716, 1.785, 717, 2.885, 718,
          4.581, 719, 1.785, 720, 1.785, 721, 2.833, 722, 1.785, 723, 1.785,
          724, 3.632, 725, 1.785, 726, 1.785, 727, 2.885, 728, 1.785, 729,
          3.632, 730, 1.785, 731, 5.938, 732, 1.785, 733, 3.632, 734, 2.885,
          735, 1.518, 736, 1.785, 737, 1.785, 738, 1.785, 739, 2.885, 740,
          1.785, 741, 2.455, 742, 1.785, 743, 1.785, 744, 1.785, 745, 2.885,
          746, 1.785, 747, 1.785, 748, 1.785, 749, 1.785, 750, 1.785, 751,
          6.388, 752, 1.785, 753, 1.518, 754, 1.785, 755, 2.171, 756, 1.785,
          757, 1.785, 758, 3.632, 759, 1.785, 760, 4.581, 761, 1.785, 762,
          1.785, 763, 4.169, 764, 1.785, 765, 2.885, 766, 1.785, 767, 1.785,
          768, 1.785, 769, 1.785, 770, 1.785, 771, 1.785, 772, 1.785, 773,
          3.632, 774, 1.343, 775, 1.518, 776, 4.581, 777, 1.785, 778, 1.785,
          779, 1.785, 780, 1.785, 781, 1.785, 782, 1.785, 783, 1.785, 784,
          1.785, 785, 1.785, 786, 1.785, 787, 1.785, 788, 1.785, 789, 1.785,
          790, 1.785, 791, 1.785, 792, 2.885, 793, 1.518, 794, 1.785, 795,
          1.785, 796, 1.785, 797, 1.785, 798, 4.172, 799, 1.785, 800, 1.785,
          801, 2.885, 802, 1.518, 803, 1.343, 804, 1.785, 805, 2.885, 806,
          1.785, 807, 1.785, 808, 1.785, 809, 1.785, 810, 1.343, 811, 1.518,
          812, 1.785, 813, 3.632, 814, 1.785, 815, 1.785, 816, 1.785, 817,
          1.785, 818, 1.785, 819, 1.785, 820, 1.785, 821, 2.885, 822, 3.632,
          823, 1.785, 824, 3.632, 825, 1.785, 826, 1.785, 827, 1.785, 828,
          1.785, 829, 1.785, 830, 2.885, 831, 1.785, 832, 1.785, 833, 2.885,
          834, 2.171, 835, 1.785, 836, 1.785, 837, 2.885, 838, 6.388, 839,
          1.518, 840, 1.785, 841, 1.785, 842, 1.785, 843, 1.785, 844, 3.632,
          845, 1.785, 846, 4.172, 847, 1.785, 848, 1.785, 849, 1.785, 850,
          1.785, 851, 1.785, 852, 1.785, 853, 4.581, 854, 3.632, 855, 1.785,
          856, 1.785, 857, 1.785, 858, 1.785, 859, 1.518, 860, 1.785, 861,
          1.785, 862, 1.518, 863, 1.785, 864, 1.518, 865, 1.785, 866, 1.785,
          867, 1.785, 868, 1.785, 869, 1.785, 870, 1.785, 871, 1.785, 872,
          1.785, 873, 1.785, 874, 1.785, 875, 1.785, 876, 1.785, 877, 1.785,
          878, 1.785, 879, 1.785, 880, 4.581, 881, 1.785, 882, 1.785, 883,
          1.785, 884, 1.785, 885, 1.785, 886, 1.785, 887, 1.785, 888, 1.785,
          889, 1.785, 890, 1.785, 891, 2.885, 892, 1.785, 893, 1.785, 894,
          1.785, 895, 1.785, 896, 1.518, 897, 1.785, 898, 1.785, 899, 3.632,
          900, 2.885, 901, 2.885, 902, 2.455, 903, 2.885, 904, 4.172, 905,
          1.785, 906, 2.885, 907, 1.785, 908, 1.785, 909, 1.785, 910, 1.785,
          911, 1.785, 912, 1.785, 913, 1.785, 914, 1.785, 915, 1.785, 916,
          1.785, 917, 1.785, 918, 1.785, 919, 1.785, 920, 5.158, 921, 1.785,
          922, 1.518, 923, 1.785, 924, 1.785, 925, 1.518, 926, 1.785, 927,
          1.785, 928, 1.785, 929, 1.785, 930, 1.785, 931, 1.785, 932, 1.785,
          933, 1.785, 934, 1.343, 935, 1.785, 936, 1.785, 937, 1.785, 938,
          1.785, 939, 1.518, 940, 1.785, 941, 1.785, 942, 1.785, 943, 1.785,
          944, 2.885, 945, 2.885, 946, 1.785, 947, 1.785, 948, 1.785, 949,
          2.455, 950, 2.885, 951, 2.885, 952, 1.785, 953, 1.785, 954, 1.785,
          955, 1.785, 956, 1.785, 957, 1.785, 958, 1.785, 959, 2.885, 960,
          1.785, 961, 1.785,
        ],
      ],
      ["title/coverage.html", [962, 4.087]],
      [
        "body/coverage.html",
        [
          5, 0.177, 6, 0.377, 7, 2.559, 8, 3.182, 9, 2.309, 12, 0.023, 15,
          1.294, 17, 2.11, 27, 0.015, 28, 0.015, 29, 1.248, 31, 3.318, 42,
          1.294, 48, 0.548, 49, 1.169, 50, 1.294, 52, 2.972, 53, 2.972, 59,
          0.803, 79, 1.218, 83, 1.218, 87, 1.133, 104, 1.175, 110, 1.294, 134,
          1.377, 151, 1.377, 154, 1.377, 157, 1.377, 169, 0.803, 173, 0.96, 180,
          1.294, 182, 1.294, 184, 1.294, 186, 1.294, 198, 2.559, 199, 2.309,
          200, 2.11, 216, 4.034, 230, 2.559, 231, 2.559, 232, 2.309, 235, 2.11,
          236, 2.11, 242, 2.482, 243, 2.309, 245, 2.313, 246, 2.309, 257, 2.559,
          259, 2.309, 261, 1.467, 263, 3.584, 268, 1.467, 271, 2.893, 272,
          2.893, 286, 3.526, 291, 3.526, 298, 2.11, 299, 2.893, 400, 2.559, 409,
          2.559, 410, 2.559, 413, 2.309, 417, 2.559, 418, 3.182, 419, 2.559,
          420, 2.559, 421, 2.309, 424, 1.677, 425, 2.309, 427, 2.893, 428,
          2.893, 604, 2.559, 605, 2.309, 608, 2.559, 609, 2.559, 613, 2.559,
          634, 2.559, 638, 2.559, 639, 2.309, 803, 2.559, 962, 2.893, 963, 3.4,
          964, 3.4, 965, 7.218, 966, 6.782, 967, 5.36, 968, 4.685, 969, 4.685,
          970, 6.538, 971, 5.36, 972, 6.059, 973, 3.4, 974, 5.36, 975, 3.4, 976,
          3.4, 977, 2.893,
        ],
      ],
      ["title/dependencies.html", [673, 2.631, 721, 2.003]],
      [
        "body/dependencies.html",
        [
          12, 0.023, 14, 0.339, 27, 0.019, 28, 0.019, 178, 1.909, 412, 3.773,
          464, 2.867, 476, 4.266, 673, 3.111, 793, 4.266, 834, 3.773, 978,
          5.015, 979, 5.015, 980, 5.015, 981, 7.086, 982, 5.015, 983, 6.02, 984,
          5.015, 985, 5.015, 986, 5.015, 987, 6.02, 988, 5.122, 989, 5.015, 990,
          5.122, 991, 5.015, 992, 4.266, 993, 5.015, 994, 5.015, 995, 5.015,
          996, 5.015, 997, 5.015, 998, 5.015,
        ],
      ],
      ["title/index.html", [33, 0.508, 650, 1.831, 651, 1.831]],
      [
        "body/index.html",
        [
          0, 2.159, 1, 0.862, 2, 0.853, 3, 0.404, 6, 0.066, 11, 0.215, 12,
          0.023, 13, 1.582, 14, 0.086, 15, 0.483, 18, 0.787, 20, 0.778, 21,
          1.084, 22, 1.278, 23, 0.661, 24, 0.483, 25, 0.329, 26, 0.543, 27,
          0.007, 28, 0.007, 38, 0.326, 42, 0.483, 43, 1.008, 44, 1.475, 47,
          1.02, 48, 0.204, 49, 0.374, 50, 0.827, 54, 1.764, 56, 1.219, 57,
          0.585, 58, 1.955, 59, 0.3, 60, 0.879, 61, 1.02, 62, 1.582, 63, 0.514,
          64, 1.071, 65, 1.137, 66, 0.585, 67, 0.96, 75, 0.548, 76, 1.312, 77,
          2.446, 78, 1.906, 79, 1.02, 82, 1.455, 83, 0.454, 84, 1.312, 85,
          0.633, 86, 1.084, 87, 1.112, 88, 1.153, 89, 1.312, 90, 1.084, 92,
          1.312, 94, 1.681, 95, 1.636, 96, 1.673, 97, 2.331, 100, 1.312, 101,
          1.365, 102, 1.153, 103, 1.535, 104, 1.338, 105, 0.937, 106, 1.001,
          107, 2.421, 108, 1.312, 110, 1.084, 111, 1.746, 112, 1.001, 113,
          1.904, 114, 1.001, 115, 1.001, 116, 1.001, 117, 1.455, 118, 1.312,
          119, 1.001, 120, 1.001, 121, 0.937, 122, 1.001, 123, 1.746, 124,
          1.746, 125, 1.001, 126, 0.879, 127, 0.937, 128, 1.001, 129, 2.146,
          130, 0.937, 131, 1.001, 132, 0.937, 133, 2.211, 134, 0.514, 135,
          1.919, 137, 1.357, 138, 0.879, 139, 0.585, 140, 0.585, 141, 0.585,
          142, 0.548, 143, 1.001, 144, 1.535, 145, 1.508, 146, 0.585, 147,
          0.483, 148, 0.585, 149, 0.548, 150, 1.681, 151, 0.514, 152, 0.585,
          154, 1.153, 155, 1.993, 156, 0.937, 157, 0.514, 158, 1.229, 159,
          0.585, 160, 0.585, 161, 0.585, 162, 1.229, 163, 1.001, 164, 0.585,
          167, 0.585, 168, 1.001, 169, 0.796, 170, 1.535, 171, 1.229, 172,
          0.548, 173, 0.358, 175, 1.02, 178, 1.442, 180, 1.283, 182, 1.084, 184,
          1.084, 190, 0.548, 194, 1.278, 195, 2.105, 197, 0.862, 201, 2.574,
          202, 3.311, 203, 4.06, 214, 1.241, 215, 0.787, 216, 1.634, 219, 2.038,
          229, 2.574, 233, 0.955, 240, 1.475, 242, 0.672, 244, 2.362, 245, 2.01,
          251, 1.079, 256, 0.862, 261, 0.548, 268, 0.548, 274, 0.955, 275,
          2.672, 276, 2.74, 277, 1.848, 278, 3.109, 279, 1.634, 280, 1.634, 281,
          1.634, 283, 2.422, 284, 2.422, 285, 0.862, 293, 2.422, 296, 1.079,
          297, 1.079, 300, 2.537, 330, 3.109, 331, 0.955, 332, 3.225, 338,
          3.109, 340, 2.142, 341, 1.475, 346, 0.955, 348, 1.079, 349, 1.079,
          350, 0.955, 351, 1.079, 361, 1.634, 399, 0.862, 404, 0.862, 408,
          0.862, 424, 3.102, 429, 1.079, 433, 1.079, 444, 2.868, 450, 1.079,
          463, 1.634, 464, 3.516, 469, 1.848, 473, 2.422, 512, 1.079, 514,
          2.142, 520, 0.955, 584, 2.289, 593, 1.079, 594, 2.868, 600, 2.142,
          603, 3.303, 606, 1.634, 607, 2.289, 611, 1.079, 625, 2.142, 633,
          0.862, 637, 0.862, 650, 1.347, 651, 1.347, 655, 2.537, 666, 1.079,
          669, 1.079, 673, 3.018, 685, 1.848, 698, 1.079, 721, 0.862, 735,
          1.848, 741, 1.848, 753, 2.868, 755, 4.967, 763, 1.079, 774, 1.634,
          775, 2.422, 810, 1.634, 811, 1.079, 834, 1.634, 839, 1.848, 859,
          2.422, 862, 1.079, 902, 1.079, 922, 1.079, 934, 1.634, 939, 1.079,
          977, 1.848, 988, 1.079, 990, 1.848, 992, 1.079, 999, 2.847, 1000,
          3.79, 1001, 1.269, 1002, 4.864, 1003, 2.172, 1004, 1.269, 1005, 1.848,
          1006, 1.848, 1007, 2.172, 1008, 2.172, 1009, 2.172, 1010, 3.79, 1011,
          2.868, 1012, 2.172, 1013, 4.417, 1014, 1.269, 1015, 1.269, 1016,
          2.172, 1017, 1.269, 1018, 1.269, 1019, 1.269, 1020, 4.132, 1021,
          1.269, 1022, 4.132, 1023, 2.172, 1024, 2.172, 1025, 3.371, 1026,
          1.269, 1027, 2.422, 1028, 3.371, 1029, 1.848, 1030, 1.269, 1031,
          2.847, 1032, 1.269, 1033, 2.172, 1034, 2.172, 1035, 2.847, 1036,
          1.269, 1037, 2.847, 1038, 1.269, 1039, 1.269, 1040, 1.269, 1041,
          1.269, 1042, 2.847, 1043, 1.269, 1044, 1.269, 1045, 1.269, 1046,
          1.269, 1047, 1.269, 1048, 1.269, 1049, 1.269, 1050, 1.269, 1051,
          1.269, 1052, 1.269, 1053, 1.079, 1054, 2.847, 1055, 1.079, 1056,
          5.198, 1057, 5.198, 1058, 2.847, 1059, 4.132, 1060, 1.269, 1061,
          2.172, 1062, 1.269, 1063, 1.269, 1064, 2.847, 1065, 1.269, 1066,
          1.269, 1067, 1.269, 1068, 1.269, 1069, 2.172, 1070, 1.269, 1071,
          1.269, 1072, 1.269, 1073, 1.269, 1074, 1.269, 1075, 1.079, 1076,
          1.269, 1077, 1.269, 1078, 3.79, 1079, 1.269, 1080, 1.269, 1081, 1.269,
          1082, 1.269, 1083, 1.269, 1084, 1.848, 1085, 1.269, 1086, 1.079, 1087,
          1.269, 1088, 1.269, 1089, 1.269, 1090, 1.269, 1091, 1.269, 1092,
          1.269, 1093, 2.868, 1094, 1.269, 1095, 1.269, 1096, 1.269, 1097,
          1.269, 1098, 1.269, 1099, 1.269, 1100, 1.269, 1101, 1.269, 1102,
          1.269, 1103, 1.269, 1104, 1.269, 1105, 1.269, 1106, 1.269, 1107,
          1.269, 1108, 1.269, 1109, 1.269, 1110, 1.475, 1111, 2.847, 1112,
          2.172, 1113, 1.269, 1114, 1.269, 1115, 1.269, 1116, 1.079, 1117,
          1.269, 1118, 1.269, 1119, 1.269, 1120, 1.269, 1121, 1.269, 1122,
          1.269, 1123, 2.847, 1124, 2.847, 1125, 2.172, 1126, 2.172, 1127,
          2.172, 1128, 2.172, 1129, 1.269, 1130, 1.269, 1131, 2.172, 1132,
          2.172, 1133, 1.269, 1134, 1.269, 1135, 1.269, 1136, 1.269, 1137,
          1.269, 1138, 1.269, 1139, 1.079, 1140, 1.079, 1141, 1.269, 1142, 3.79,
          1143, 3.79, 1144, 3.79, 1145, 2.172, 1146, 5.042, 1147, 3.79, 1148,
          3.224, 1149, 3.79, 1150, 3.79, 1151, 3.79, 1152, 2.172, 1153, 1.269,
          1154, 1.269, 1155, 1.269, 1156, 1.269, 1157, 1.269, 1158, 1.269, 1159,
          1.269, 1160, 1.269, 1161, 1.269, 1162, 1.269, 1163, 1.269, 1164,
          1.269, 1165, 1.269, 1166, 1.269, 1167, 1.269, 1168, 1.269, 1169,
          1.269,
        ],
      ],
      ["title/license.html", [650, 1.831, 651, 1.831, 1170, 2.51]],
      [
        "body/license.html",
        [
          4, 0.4, 5, 0.278, 11, 0.092, 12, 0.016, 23, 0.347, 26, 0.285, 27,
          0.009, 28, 0.009, 32, 0.325, 36, 0.47, 51, 0.633, 54, 0.499, 67,
          0.596, 82, 0.763, 85, 0.802, 86, 0.673, 97, 2.3, 147, 1.579, 202,
          1.097, 203, 1.201, 204, 1.504, 275, 1.517, 288, 1.331, 341, 3.314,
          418, 2.818, 455, 2.437, 520, 1.331, 527, 2.716, 554, 2.437, 658,
          2.716, 755, 3.123, 774, 1.331, 802, 1.504, 803, 2.716, 810, 1.331,
          896, 1.504, 934, 4.837, 949, 2.437, 1005, 1.504, 1006, 1.504, 1011,
          1.504, 1027, 2.437, 1029, 1.504, 1053, 1.504, 1055, 1.504, 1075,
          1.504, 1086, 1.504, 1093, 1.504, 1110, 1.201, 1116, 1.504, 1140,
          3.879, 1148, 2.437, 1170, 5.847, 1171, 4.15, 1172, 3.61, 1173, 1.768,
          1174, 1.768, 1175, 1.768, 1176, 5.529, 1177, 6.021, 1178, 4.15, 1179,
          4.559, 1180, 1.768, 1181, 6.187, 1182, 5.68, 1183, 1.768, 1184, 1.768,
          1185, 5.68, 1186, 6.021, 1187, 4.88, 1188, 5.68, 1189, 2.864, 1190,
          1.768, 1191, 4.559, 1192, 1.768, 1193, 1.768, 1194, 1.768, 1195, 4.15,
          1196, 1.768, 1197, 5.529, 1198, 4.15, 1199, 2.864, 1200, 2.864, 1201,
          1.768, 1202, 3.61, 1203, 2.864, 1204, 1.768, 1205, 1.768, 1206, 6.376,
          1207, 4.15, 1208, 2.864, 1209, 1.768, 1210, 2.864, 1211, 1.768, 1212,
          1.768, 1213, 1.768, 1214, 1.768, 1215, 1.768, 1216, 1.768, 1217,
          1.768, 1218, 3.61, 1219, 1.768, 1220, 3.61, 1221, 2.864, 1222, 6.021,
          1223, 1.768, 1224, 1.768, 1225, 4.88, 1226, 5.529, 1227, 4.15, 1228,
          2.864, 1229, 3.61, 1230, 4.88, 1231, 1.768, 1232, 1.768, 1233, 1.768,
          1234, 1.768, 1235, 1.768, 1236, 2.864, 1237, 1.768, 1238, 1.768, 1239,
          1.768, 1240, 6.872, 1241, 3.61, 1242, 2.864, 1243, 1.768, 1244, 5.529,
          1245, 2.864, 1246, 1.768, 1247, 4.559, 1248, 2.864, 1249, 1.768, 1250,
          6.376, 1251, 1.768, 1252, 1.768, 1253, 1.768, 1254, 1.768, 1255,
          1.768, 1256, 1.768, 1257, 2.864, 1258, 3.61, 1259, 1.768, 1260, 1.768,
          1261, 1.768, 1262, 1.768, 1263, 4.15, 1264, 4.559, 1265, 1.768, 1266,
          2.864, 1267, 4.15, 1268, 2.864, 1269, 1.768, 1270, 4.559, 1271, 2.864,
          1272, 1.768, 1273, 1.768, 1274, 3.61, 1275, 1.768, 1276, 1.768, 1277,
          1.768, 1278, 1.768, 1279, 2.864, 1280, 1.768, 1281, 1.768, 1282,
          1.768, 1283, 3.61, 1284, 1.768, 1285, 1.768, 1286, 3.61, 1287, 1.768,
          1288, 1.768, 1289, 1.768, 1290, 4.15, 1291, 5.68, 1292, 1.768, 1293,
          1.768, 1294, 2.864, 1295, 5.351, 1296, 3.61, 1297, 2.864, 1298, 2.864,
          1299, 2.864, 1300, 2.864, 1301, 3.61, 1302, 2.864, 1303, 3.61, 1304,
          2.864, 1305, 2.864, 1306, 2.864, 1307, 2.864, 1308, 1.504, 1309,
          2.864, 1310, 1.768, 1311, 1.768, 1312, 4.559, 1313, 5.139, 1314, 3.61,
          1315, 2.864, 1316, 1.768, 1317, 2.864, 1318, 2.864, 1319, 1.768, 1320,
          3.61, 1321, 2.864, 1322, 1.768, 1323, 1.768, 1324, 1.768, 1325, 3.61,
          1326, 1.768, 1327, 1.768, 1328, 1.768, 1329, 2.864, 1330, 2.864, 1331,
          1.768, 1332, 1.768, 1333, 1.768, 1334, 1.768, 1335, 1.768, 1336,
          1.768, 1337, 1.768, 1338, 2.864, 1339, 1.768, 1340, 1.768, 1341,
          1.768, 1342, 1.768, 1343, 1.768, 1344, 1.768, 1345, 1.768, 1346,
          1.768, 1347, 3.61, 1348, 1.768, 1349, 3.61, 1350, 1.768, 1351, 1.768,
          1352, 1.768, 1353, 1.768, 1354, 5.351, 1355, 1.768, 1356, 1.768, 1357,
          1.768, 1358, 1.768, 1359, 1.768, 1360, 4.15, 1361, 2.864, 1362, 4.15,
          1363, 1.768, 1364, 1.768, 1365, 1.768, 1366, 1.768, 1367, 1.768, 1368,
          3.61, 1369, 1.768, 1370, 1.768, 1371, 2.864, 1372, 2.864, 1373, 1.768,
          1374, 1.768, 1375, 1.768, 1376, 2.864, 1377, 1.768, 1378, 1.768, 1379,
          4.559, 1380, 1.768, 1381, 1.768, 1382, 1.768, 1383, 1.768, 1384,
          1.768, 1385, 1.768, 1386, 3.61, 1387, 4.15, 1388, 1.768, 1389, 1.768,
          1390, 1.768, 1391, 1.768, 1392, 1.768, 1393, 1.768, 1394, 1.768, 1395,
          1.768, 1396, 1.768, 1397, 1.768, 1398, 2.864, 1399, 1.768, 1400,
          1.768, 1401, 2.864, 1402, 1.768, 1403, 1.768, 1404, 4.15, 1405, 1.768,
          1406, 1.768, 1407, 1.768, 1408, 1.768, 1409, 1.768, 1410, 1.768, 1411,
          4.15, 1412, 3.61, 1413, 3.61, 1414, 3.61, 1415, 2.864, 1416, 2.864,
          1417, 3.61, 1418, 2.864, 1419, 2.864, 1420, 2.864, 1421, 1.768, 1422,
          1.768, 1423, 1.768, 1424, 1.768, 1425, 1.768, 1426, 1.768, 1427,
          1.768, 1428, 1.768, 1429, 1.768, 1430, 2.864, 1431, 1.768, 1432,
          1.768, 1433, 1.768, 1434, 1.768, 1435, 4.559, 1436, 1.768, 1437,
          1.768, 1438, 1.768, 1439, 1.768, 1440, 1.768, 1441, 1.768, 1442,
          1.768, 1443, 1.768, 1444, 4.559, 1445, 1.768, 1446, 1.768, 1447,
          1.768, 1448, 1.768, 1449, 1.768, 1450, 1.504, 1451, 1.768, 1452,
          1.768, 1453, 1.768, 1454, 1.768, 1455, 1.768, 1456, 1.768, 1457,
          1.768, 1458, 1.768, 1459, 1.768, 1460, 1.768, 1461, 1.768, 1462,
          1.768, 1463, 3.61, 1464, 1.768, 1465, 1.768, 1466, 1.768, 1467, 1.768,
          1468, 1.768, 1469, 2.864, 1470, 1.768, 1471, 1.768, 1472, 1.768, 1473,
          1.768, 1474, 1.768, 1475, 1.768, 1476, 1.768, 1477, 1.768, 1478,
          1.768, 1479, 1.768, 1480, 1.768, 1481, 1.768, 1482, 1.768, 1483,
          1.768, 1484, 1.768, 1485, 2.864, 1486, 1.768, 1487, 1.768, 1488,
          1.768, 1489, 2.864, 1490, 2.864, 1491, 1.768, 1492, 1.768, 1493,
          1.768, 1494, 1.768, 1495, 1.768, 1496, 1.768, 1497, 1.768, 1498,
          1.768, 1499, 1.768, 1500, 1.768, 1501, 1.768, 1502, 1.768, 1503,
          1.768, 1504, 1.768, 1505, 1.768, 1506, 1.768, 1507, 1.768, 1508,
          1.768, 1509, 1.768, 1510, 1.768,
        ],
      ],
      ["title/modules.html", [2, 1.439]],
      [
        "body/modules.html",
        [
          1, 3.458, 2, 1.525, 12, 0.019, 27, 0.019, 28, 0.019, 197, 3.458, 229,
          3.458, 256, 3.458, 399, 3.458, 408, 3.458, 416, 3.831, 584, 3.458,
          603, 3.458, 607, 3.458, 633, 3.458, 637, 3.458, 1110, 4.918, 1511,
          7.242, 1512, 7.242,
        ],
      ],
      ["title/overview.html", [1513, 4.087]],
      [
        "body/overview.html",
        [
          0, 1.843, 2, 1.637, 12, 0.02, 20, 1.957, 22, 1.843, 27, 0.02, 28,
          0.02, 30, 2.08, 51, 1.957, 126, 2.213, 673, 3.391, 677, 4.649, 682,
          5.388, 864, 4.649, 1084, 4.649, 1450, 4.649, 1513, 4.649, 1514, 5.465,
          1515, 6.334,
        ],
      ],
      ["title/properties.html", [55, 1.27, 721, 2.003]],
      [
        "body/properties.html",
        [
          12, 0.022, 27, 0.02, 28, 0.02, 55, 1.656, 424, 2.728, 464, 3.161, 658,
          4.161, 661, 4.705, 1516, 5.53, 1517, 5.53, 1518, 5.53, 1519, 5.53,
          1520, 5.53,
        ],
      ],
      ["title/todo.html", [650, 1.831, 651, 1.831, 1521, 2.51]],
      [
        "body/todo.html",
        [
          12, 0.022, 27, 0.02, 28, 0.02, 54, 1.752, 107, 2.513, 133, 2.137, 145,
          1.404, 202, 3.274, 203, 4.214, 215, 3.274, 244, 3.769, 275, 3.493,
          424, 2.603, 464, 3.017, 655, 3.971, 925, 4.49, 1110, 3.584, 1139,
          5.609, 1308, 4.49, 1521, 5.28, 1522, 5.278, 1523, 5.278, 1524, 5.278,
        ],
      ],
      ["title/miscellaneous/variables.html", [1525, 2.51, 1526, 3.607]],
      [
        "body/miscellaneous/variables.html",
        [
          6, 0.319, 12, 0.024, 15, 1.966, 23, 0.771, 27, 0.016, 28, 0.016, 33,
          0.678, 38, 0.776, 48, 1.089, 52, 1.697, 53, 2.82, 54, 1.11, 64, 2.147,
          65, 2.305, 68, 2.092, 69, 2.092, 70, 2.092, 71, 2.092, 73, 2.092, 104,
          1.295, 137, 1.408, 145, 1.046, 155, 1.326, 169, 0.928, 173, 1.845,
          174, 1.694, 175, 2.195, 176, 1.326, 177, 1.812, 178, 1.966, 179,
          1.812, 180, 1.966, 181, 1.812, 182, 1.966, 183, 1.812, 184, 1.966,
          185, 1.812, 186, 1.966, 187, 1.408, 188, 1.326, 189, 2.578, 190,
          1.697, 191, 2.381, 192, 2.092, 193, 2.381, 194, 1.742, 195, 2.092,
          196, 1.812, 261, 2.23, 286, 2.959, 290, 3.345, 291, 2.959, 295, 3.345,
          298, 3.206, 608, 2.959, 609, 3.888, 613, 3.888, 614, 4.396, 615,
          3.345, 1525, 3.345, 1526, 3.345, 1527, 6.366, 1528, 3.932, 1529,
          3.932, 1530, 3.932,
        ],
      ],
    ],
    invertedIndex: [
      [
        "",
        {
          _index: 12,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "todo.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "0",
        {
          _index: 216,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      ["0.10.0", { _index: 873, title: {}, body: { "changelog.html": {} } }],
      ["0.10.1", { _index: 891, title: {}, body: { "changelog.html": {} } }],
      ["0.10.2", { _index: 880, title: {}, body: { "changelog.html": {} } }],
      ["0.11.0", { _index: 853, title: {}, body: { "changelog.html": {} } }],
      ["0.11.4", { _index: 998, title: {}, body: { "dependencies.html": {} } }],
      ["0.13.0", { _index: 844, title: {}, body: { "changelog.html": {} } }],
      ["0.14.0", { _index: 837, title: {}, body: { "changelog.html": {} } }],
      ["0.15.0", { _index: 836, title: {}, body: { "changelog.html": {} } }],
      ["0.16.0", { _index: 833, title: {}, body: { "changelog.html": {} } }],
      ["0.17.0", { _index: 829, title: {}, body: { "changelog.html": {} } }],
      ["0.18.0", { _index: 824, title: {}, body: { "changelog.html": {} } }],
      ["0.18.2", { _index: 821, title: {}, body: { "changelog.html": {} } }],
      ["0.19.0", { _index: 795, title: {}, body: { "changelog.html": {} } }],
      ["0.20.0", { _index: 783, title: {}, body: { "changelog.html": {} } }],
      ["0.21.0", { _index: 782, title: {}, body: { "changelog.html": {} } }],
      ["0.22.0", { _index: 780, title: {}, body: { "changelog.html": {} } }],
      ["0.23.0", { _index: 779, title: {}, body: { "changelog.html": {} } }],
      ["0.24.0", { _index: 773, title: {}, body: { "changelog.html": {} } }],
      ["0.25.0", { _index: 758, title: {}, body: { "changelog.html": {} } }],
      ["0.4.0", { _index: 895, title: {}, body: { "changelog.html": {} } }],
      ["0.7", { _index: 1032, title: {}, body: { "index.html": {} } }],
      ["0.75", { _index: 1046, title: {}, body: { "index.html": {} } }],
      ["0.8.2", { _index: 917, title: {}, body: { "changelog.html": {} } }],
      ["0.8.3", { _index: 904, title: {}, body: { "changelog.html": {} } }],
      ["0.9.0", { _index: 899, title: {}, body: { "changelog.html": {} } }],
      ["0/1", { _index: 971, title: {}, body: { "coverage.html": {} } }],
      ["01", { _index: 679, title: {}, body: { "changelog.html": {} } }],
      ["02", { _index: 713, title: {}, body: { "changelog.html": {} } }],
      ["03", { _index: 676, title: {}, body: { "changelog.html": {} } }],
      ["0319eee", { _index: 903, title: {}, body: { "changelog.html": {} } }],
      ["04", { _index: 670, title: {}, body: { "changelog.html": {} } }],
      ["042898e", { _index: 860, title: {}, body: { "changelog.html": {} } }],
      ["05", { _index: 667, title: {}, body: { "changelog.html": {} } }],
      ["06", { _index: 699, title: {}, body: { "changelog.html": {} } }],
      ["0615f02", { _index: 832, title: {}, body: { "changelog.html": {} } }],
      ["06cb6de", { _index: 863, title: {}, body: { "changelog.html": {} } }],
      ["07", { _index: 668, title: {}, body: { "changelog.html": {} } }],
      ["08", { _index: 683, title: {}, body: { "changelog.html": {} } }],
      ["0885b40", { _index: 929, title: {}, body: { "changelog.html": {} } }],
      ["09", { _index: 663, title: {}, body: { "changelog.html": {} } }],
      ["09dd1bb", { _index: 876, title: {}, body: { "changelog.html": {} } }],
      ["0a2ccc5", { _index: 866, title: {}, body: { "changelog.html": {} } }],
      ["0f35b5c", { _index: 936, title: {}, body: { "changelog.html": {} } }],
      [
        "1",
        {
          _index: 67,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      ["1.0.0", { _index: 757, title: {}, body: { "changelog.html": {} } }],
      ["1.0.1", { _index: 750, title: {}, body: { "changelog.html": {} } }],
      ["1.1.0", { _index: 733, title: {}, body: { "changelog.html": {} } }],
      ["1.2.0", { _index: 727, title: {}, body: { "changelog.html": {} } }],
      ["1.3.0", { _index: 714, title: {}, body: { "changelog.html": {} } }],
      ["1.4.0", { _index: 705, title: {}, body: { "changelog.html": {} } }],
      ["1.4.1", { _index: 690, title: {}, body: { "changelog.html": {} } }],
      ["1.6.0", { _index: 684, title: {}, body: { "changelog.html": {} } }],
      ["1.7.0", { _index: 678, title: {}, body: { "changelog.html": {} } }],
      ["1.8.0", { _index: 665, title: {}, body: { "changelog.html": {} } }],
      [
        "1.9.0",
        {
          _index: 661,
          title: {},
          body: { "changelog.html": {}, "properties.html": {} },
        },
      ],
      ["1/1", { _index: 972, title: {}, body: { "coverage.html": {} } }],
      [
        "10",
        {
          _index: 685,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["10.2", { _index: 841, title: {}, body: { "changelog.html": {} } }],
      ["100", { _index: 965, title: {}, body: { "coverage.html": {} } }],
      [
        "10000ms",
        {
          _index: 148,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["106", { _index: 746, title: {}, body: { "changelog.html": {} } }],
      [
        "11",
        {
          _index: 682,
          title: {},
          body: { "changelog.html": {}, "overview.html": {} },
        },
      ],
      ["11/11", { _index: 975, title: {}, body: { "coverage.html": {} } }],
      [
        "12",
        {
          _index: 677,
          title: {},
          body: { "changelog.html": {}, "overview.html": {} },
        },
      ],
      ["12.0.2", { _index: 1164, title: {}, body: { "index.html": {} } }],
      [
        "12/typescript",
        { _index: 938, title: {}, body: { "changelog.html": {} } },
      ],
      ["1229a9d", { _index: 916, title: {}, body: { "changelog.html": {} } }],
      [
        "13.0.0",
        {
          _index: 992,
          title: {},
          body: { "dependencies.html": {}, "index.html": {} },
        },
      ],
      [
        "14.2.12",
        { _index: 979, title: {}, body: { "dependencies.html": {} } },
      ],
      ["14.2.7", { _index: 983, title: {}, body: { "dependencies.html": {} } }],
      ["14.3.0", { _index: 981, title: {}, body: { "dependencies.html": {} } }],
      ["15", { _index: 692, title: {}, body: { "changelog.html": {} } }],
      ["151", { _index: 711, title: {}, body: { "changelog.html": {} } }],
      ["154", { _index: 702, title: {}, body: { "changelog.html": {} } }],
      ["156", { _index: 707, title: {}, body: { "changelog.html": {} } }],
      ["157", { _index: 708, title: {}, body: { "changelog.html": {} } }],
      ["16", { _index: 854, title: {}, body: { "changelog.html": {} } }],
      ["16/16", { _index: 973, title: {}, body: { "coverage.html": {} } }],
      ["17", { _index: 686, title: {}, body: { "changelog.html": {} } }],
      ["179", { _index: 688, title: {}, body: { "changelog.html": {} } }],
      ["18", { _index: 664, title: {}, body: { "changelog.html": {} } }],
      ["18d04fd", { _index: 812, title: {}, body: { "changelog.html": {} } }],
      ["19", { _index: 734, title: {}, body: { "changelog.html": {} } }],
      ["1a1299b", { _index: 874, title: {}, body: { "changelog.html": {} } }],
      ["1a56037", { _index: 820, title: {}, body: { "changelog.html": {} } }],
      ["1c7c0c0", { _index: 794, title: {}, body: { "changelog.html": {} } }],
      ["1f22380", { _index: 777, title: {}, body: { "changelog.html": {} } }],
      [
        "2",
        {
          _index: 669,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["2.0", { _index: 1172, title: {}, body: { "license.html": {} } }],
      ["2.6.0", { _index: 996, title: {}, body: { "dependencies.html": {} } }],
      ["2/2", { _index: 966, title: {}, body: { "coverage.html": {} } }],
      ["20", { _index: 680, title: {}, body: { "changelog.html": {} } }],
      ["2004", { _index: 1174, title: {}, body: { "license.html": {} } }],
      ["2020", { _index: 838, title: {}, body: { "changelog.html": {} } }],
      ["2021", { _index: 751, title: {}, body: { "changelog.html": {} } }],
      ["2022", { _index: 715, title: {}, body: { "changelog.html": {} } }],
      ["2023", { _index: 681, title: {}, body: { "changelog.html": {} } }],
      ["2024", { _index: 662, title: {}, body: { "changelog.html": {} } }],
      ["2048", { _index: 1038, title: {}, body: { "index.html": {} } }],
      ["21", { _index: 830, title: {}, body: { "changelog.html": {} } }],
      ["22", { _index: 738, title: {}, body: { "changelog.html": {} } }],
      ["23", { _index: 700, title: {}, body: { "changelog.html": {} } }],
      ["23e35d1", { _index: 771, title: {}, body: { "changelog.html": {} } }],
      ["24", { _index: 759, title: {}, body: { "changelog.html": {} } }],
      ["24f4d6f", { _index: 723, title: {}, body: { "changelog.html": {} } }],
      ["25", { _index: 728, title: {}, body: { "changelog.html": {} } }],
      ["26", { _index: 825, title: {}, body: { "changelog.html": {} } }],
      ["26a2e27", { _index: 712, title: {}, body: { "changelog.html": {} } }],
      ["27", { _index: 743, title: {}, body: { "changelog.html": {} } }],
      ["28", { _index: 704, title: {}, body: { "changelog.html": {} } }],
      ["2965c35", { _index: 804, title: {}, body: { "changelog.html": {} } }],
      [
        "3",
        {
          _index: 666,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "3.6.0",
        {
          _index: 939,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["3/3", { _index: 969, title: {}, body: { "coverage.html": {} } }],
      ["30", { _index: 822, title: {}, body: { "changelog.html": {} } }],
      ["30000", { _index: 1041, title: {}, body: { "index.html": {} } }],
      ["31", { _index: 716, title: {}, body: { "changelog.html": {} } }],
      ["332baf7", { _index: 840, title: {}, body: { "changelog.html": {} } }],
      ["34", { _index: 796, title: {}, body: { "changelog.html": {} } }],
      ["3516488", { _index: 931, title: {}, body: { "changelog.html": {} } }],
      ["351ce3e", { _index: 887, title: {}, body: { "changelog.html": {} } }],
      ["371886a", { _index: 954, title: {}, body: { "changelog.html": {} } }],
      ["3ae307e", { _index: 764, title: {}, body: { "changelog.html": {} } }],
      [
        "4",
        {
          _index: 698,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["4/4", { _index: 974, title: {}, body: { "coverage.html": {} } }],
      ["40f33cc", { _index: 785, title: {}, body: { "changelog.html": {} } }],
      ["412d2fd", { _index: 958, title: {}, body: { "changelog.html": {} } }],
      ["41c8947", { _index: 772, title: {}, body: { "changelog.html": {} } }],
      ["4318", { _index: 769, title: {}, body: { "changelog.html": {} } }],
      ["47aba25", { _index: 953, title: {}, body: { "changelog.html": {} } }],
      ["47c249b", { _index: 956, title: {}, body: { "changelog.html": {} } }],
      ["4a000b9", { _index: 948, title: {}, body: { "changelog.html": {} } }],
      ["4bddf3a", { _index: 871, title: {}, body: { "changelog.html": {} } }],
      ["4d886fb", { _index: 890, title: {}, body: { "changelog.html": {} } }],
      ["4d9a061", { _index: 879, title: {}, body: { "changelog.html": {} } }],
      ["4fcec62", { _index: 762, title: {}, body: { "changelog.html": {} } }],
      ["5", { _index: 691, title: {}, body: { "changelog.html": {} } }],
      ["5.0.12", { _index: 993, title: {}, body: { "dependencies.html": {} } }],
      ["5/5", { _index: 967, title: {}, body: { "coverage.html": {} } }],
      ["50", { _index: 1213, title: {}, body: { "license.html": {} } }],
      ["5000", { _index: 1040, title: {}, body: { "index.html": {} } }],
      ["51", { _index: 790, title: {}, body: { "changelog.html": {} } }],
      ["510be78", { _index: 697, title: {}, body: { "changelog.html": {} } }],
      ["512", { _index: 1039, title: {}, body: { "index.html": {} } }],
      ["563071d", { _index: 940, title: {}, body: { "changelog.html": {} } }],
      ["59ac6ca", { _index: 747, title: {}, body: { "changelog.html": {} } }],
      ["5a29d29", { _index: 730, title: {}, body: { "changelog.html": {} } }],
      ["5a7c375", { _index: 770, title: {}, body: { "changelog.html": {} } }],
      [
        "6",
        {
          _index: 902,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["6.6.3", { _index: 994, title: {}, body: { "dependencies.html": {} } }],
      ["613c16d", { _index: 955, title: {}, body: { "changelog.html": {} } }],
      ["62e0d77", { _index: 885, title: {}, body: { "changelog.html": {} } }],
      ["640d901", { _index: 719, title: {}, body: { "changelog.html": {} } }],
      ["64ab01a", { _index: 709, title: {}, body: { "changelog.html": {} } }],
      ["66ca86c", { _index: 818, title: {}, body: { "changelog.html": {} } }],
      ["6763f97", { _index: 736, title: {}, body: { "changelog.html": {} } }],
      ["68d7aee", { _index: 814, title: {}, body: { "changelog.html": {} } }],
      ["6d94094", { _index: 689, title: {}, body: { "changelog.html": {} } }],
      ["6e5c19a", { _index: 858, title: {}, body: { "changelog.html": {} } }],
      ["7023a31", { _index: 732, title: {}, body: { "changelog.html": {} } }],
      ["735b05d", { _index: 961, title: {}, body: { "changelog.html": {} } }],
      ["75", { _index: 1047, title: {}, body: { "index.html": {} } }],
      ["7a5b07e", { _index: 918, title: {}, body: { "changelog.html": {} } }],
      ["7b4c031", { _index: 901, title: {}, body: { "changelog.html": {} } }],
      ["7bab017", { _index: 869, title: {}, body: { "changelog.html": {} } }],
      ["7bbaf2e", { _index: 754, title: {}, body: { "changelog.html": {} } }],
      ["7f3aba9", { _index: 726, title: {}, body: { "changelog.html": {} } }],
      ["7f7c66a", { _index: 882, title: {}, body: { "changelog.html": {} } }],
      ["8/8", { _index: 968, title: {}, body: { "coverage.html": {} } }],
      ["80d2ada", { _index: 897, title: {}, body: { "changelog.html": {} } }],
      ["80f7bf8", { _index: 960, title: {}, body: { "changelog.html": {} } }],
      ["83fc1f3", { _index: 919, title: {}, body: { "changelog.html": {} } }],
      ["8442349", { _index: 722, title: {}, body: { "changelog.html": {} } }],
      ["8b1b7b5", { _index: 867, title: {}, body: { "changelog.html": {} } }],
      ["8d45a2c", { _index: 905, title: {}, body: { "changelog.html": {} } }],
      ["8e268a9", { _index: 911, title: {}, body: { "changelog.html": {} } }],
      ["8faa4c9", { _index: 855, title: {}, body: { "changelog.html": {} } }],
      [
        "9",
        {
          _index: 896,
          title: {},
          body: { "changelog.html": {}, "license.html": {} },
        },
      ],
      ["9/node", { _index: 937, title: {}, body: { "changelog.html": {} } }],
      ["92330f9", { _index: 926, title: {}, body: { "changelog.html": {} } }],
      ["94e0b44", { _index: 894, title: {}, body: { "changelog.html": {} } }],
      ["95167b9", { _index: 952, title: {}, body: { "changelog.html": {} } }],
      ["96da55f", { _index: 943, title: {}, body: { "changelog.html": {} } }],
      ["97579f0", { _index: 742, title: {}, body: { "changelog.html": {} } }],
      ["9783c0d", { _index: 675, title: {}, body: { "changelog.html": {} } }],
      ["99", { _index: 1048, title: {}, body: { "index.html": {} } }],
      [
        "_currentcontext",
        {
          _index: 560,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "_exact",
        {
          _index: 165,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      ["a1746bf", { _index: 947, title: {}, body: { "changelog.html": {} } }],
      ["a517094", { _index: 957, title: {}, body: { "changelog.html": {} } }],
      ["a6307f2", { _index: 781, title: {}, body: { "changelog.html": {} } }],
      ["a73e382", { _index: 799, title: {}, body: { "changelog.html": {} } }],
      ["above", { _index: 1391, title: {}, body: { "license.html": {} } }],
      ["ac3d9ab", { _index: 696, title: {}, body: { "changelog.html": {} } }],
      ["acceptance", { _index: 1466, title: {}, body: { "license.html": {} } }],
      ["accepting", { _index: 1463, title: {}, body: { "license.html": {} } }],
      ["accessor", { _index: 1166, title: {}, body: { "index.html": {} } }],
      ["act", { _index: 1473, title: {}, body: { "license.html": {} } }],
      ["acting", { _index: 1193, title: {}, body: { "license.html": {} } }],
      ["action", { _index: 695, title: {}, body: { "changelog.html": {} } }],
      ["activate", { _index: 1064, title: {}, body: { "index.html": {} } }],
      ["acts", { _index: 1442, title: {}, body: { "license.html": {} } }],
      ["ad03334", { _index: 923, title: {}, body: { "changelog.html": {} } }],
      [
        "add",
        {
          _index: 275,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "add(span",
        {
          _index: 277,
          title: {},
          body: { "interfaces/CustomSpan.html": {}, "index.html": {} },
        },
      ],
      ["addendum", { _index: 1378, title: {}, body: { "license.html": {} } }],
      ["adding", { _index: 1118, title: {}, body: { "index.html": {} } }],
      [
        "addition",
        {
          _index: 164,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["additional", { _index: 1379, title: {}, body: { "license.html": {} } }],
      ["additions", { _index: 1265, title: {}, body: { "license.html": {} } }],
      ["advised", { _index: 1461, title: {}, body: { "license.html": {} } }],
      ["again", { _index: 868, title: {}, body: { "changelog.html": {} } }],
      ["against", { _index: 1330, title: {}, body: { "license.html": {} } }],
      [
        "agent",
        {
          _index: 862,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["agree", { _index: 1476, title: {}, body: { "license.html": {} } }],
      ["agreed", { _index: 1414, title: {}, body: { "license.html": {} } }],
      ["agreement", { _index: 1395, title: {}, body: { "license.html": {} } }],
      ["alleging", { _index: 1335, title: {}, body: { "license.html": {} } }],
      [
        "allow",
        {
          _index: 559,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "allowedcommonjsdependencies",
        { _index: 1157, title: {}, body: { "index.html": {} } },
      ],
      ["alone", { _index: 1326, title: {}, body: { "license.html": {} } }],
      ["along", { _index: 1369, title: {}, body: { "license.html": {} } }],
      ["alongside", { _index: 1377, title: {}, body: { "license.html": {} } }],
      [
        "already",
        {
          _index: 598,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      ["althought", { _index: 1121, title: {}, body: { "index.html": {} } }],
      [
        "always",
        {
          _index: 322,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "alwaysoffsampler",
        {
          _index: 357,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "alwaysonsampler",
        {
          _index: 358,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["ambient", { _index: 1168, title: {}, body: { "index.html": {} } }],
      ["amd", { _index: 1147, title: {}, body: { "index.html": {} } }],
      ["and/or", { _index: 1470, title: {}, body: { "license.html": {} } }],
      [
        "angular",
        {
          _index: 464,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
            "dependencies.html": {},
            "index.html": {},
            "properties.html": {},
            "todo.html": {},
          },
        },
      ],
      ["angular.json", { _index: 1155, title: {}, body: { "index.html": {} } }],
      [
        "angular/animations",
        { _index: 980, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "angular/cdk",
        { _index: 982, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "angular/common",
        {
          _index: 412,
          title: {},
          body: {
            "modules/NoopSpanExporterModule.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "angular/common/http",
        {
          _index: 285,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "angular/compiler",
        { _index: 984, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "angular/core",
        {
          _index: 14,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "dependencies.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "angular/forms",
        { _index: 985, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "angular/material",
        { _index: 986, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "angular/platform",
        { _index: 987, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "angular/router",
        { _index: 989, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "annotations",
        { _index: 1254, title: {}, body: { "license.html": {} } },
      ],
      ["apache", { _index: 1171, title: {}, body: { "license.html": {} } }],
      [
        "api",
        {
          _index: 404,
          title: {},
          body: {
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "api.defaulttextmapsetter",
        {
          _index: 565,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "api.diag.setlogger(logger",
        {
          _index: 506,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "api.propagation.inject",
        {
          _index: 564,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "api.trace.setspan",
        {
          _index: 562,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "apis",
        {
          _index: 440,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["app", { _index: 1016, title: {}, body: { "index.html": {} } }],
      [
        "app.component",
        { _index: 1079, title: {}, body: { "index.html": {} } },
      ],
      [
        "app.module.ts",
        { _index: 1067, title: {}, body: { "index.html": {} } },
      ],
      [
        "app_initializer",
        {
          _index: 611,
          title: {},
          body: { "modules/OtelWebTracerModule.html": {}, "index.html": {} },
        },
      ],
      ["appcomponent", { _index: 1078, title: {}, body: { "index.html": {} } }],
      ["appear", { _index: 1374, title: {}, body: { "license.html": {} } }],
      ["appendix", { _index: 1248, title: {}, body: { "license.html": {} } }],
      ["applicable", { _index: 1412, title: {}, body: { "license.html": {} } }],
      ["application", { _index: 1002, title: {}, body: { "index.html": {} } }],
      ["applications", { _index: 1122, title: {}, body: { "index.html": {} } }],
      [
        "applies",
        {
          _index: 1055,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["apply", { _index: 1485, title: {}, body: { "license.html": {} } }],
      [
        "appmodule",
        {
          _index: 600,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "appropriate",
        { _index: 1493, title: {}, body: { "license.html": {} } },
      ],
      [
        "appropriateness",
        { _index: 1428, title: {}, body: { "license.html": {} } },
      ],
      ["archives", { _index: 1501, title: {}, body: { "license.html": {} } }],
      ["arising", { _index: 1449, title: {}, body: { "license.html": {} } }],
      [
        "array",
        {
          _index: 168,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["asserted", { _index: 1482, title: {}, body: { "license.html": {} } }],
      ["associated", { _index: 1433, title: {}, body: { "license.html": {} } }],
      ["assume", { _index: 1431, title: {}, body: { "license.html": {} } }],
      ["async", { _index: 1051, title: {}, body: { "index.html": {} } }],
      ["attach", { _index: 1486, title: {}, body: { "license.html": {} } }],
      ["attached", { _index: 1246, title: {}, body: { "license.html": {} } }],
      [
        "attr_service_name",
        {
          _index: 352,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "attr_service_namespace",
        { _index: 1030, title: {}, body: { "index.html": {} } },
      ],
      [
        "attribute",
        {
          _index: 91,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "attributes",
        {
          _index: 276,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "attributevalue",
        {
          _index: 74,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "attribution",
        { _index: 1360, title: {}, body: { "license.html": {} } },
      ],
      ["author", { _index: 1518, title: {}, body: { "properties.html": {} } }],
      ["authorized", { _index: 1189, title: {}, body: { "license.html": {} } }],
      ["authorship", { _index: 1241, title: {}, body: { "license.html": {} } }],
      [
        "available",
        {
          _index: 1110,
          title: {},
          body: {
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "aws",
        {
          _index: 18,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "awsxraypropagator",
        {
          _index: 39,
          title: {},
          body: { "injectables/AwsXrayPropagatorService.html": {} },
        },
      ],
      [
        "awsxraypropagatormodule",
        {
          _index: 1,
          title: { "modules/AwsXrayPropagatorModule.html": {} },
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "awsxraypropagatorservice",
        {
          _index: 17,
          title: { "injectables/AwsXrayPropagatorService.html": {} },
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["b", { _index: 1350, title: {}, body: { "license.html": {} } }],
      ["b112065", { _index: 856, title: {}, body: { "changelog.html": {} } }],
      [
        "b3",
        {
          _index: 201,
          title: {},
          body: {
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "index.html": {},
          },
        },
      ],
      ["b3e15af", { _index: 791, title: {}, body: { "changelog.html": {} } }],
      [
        "b3injectencoding",
        {
          _index: 217,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "b3injectencoding.multi_header",
        {
          _index: 227,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "b3injectencoding.single_header",
        {
          _index: 226,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "b3propagator",
        {
          _index: 63,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "b3propagator(this.b3propagatorconfig",
        {
          _index: 228,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "b3propagatorconfig",
        {
          _index: 50,
          title: { "interfaces/B3PropagatorConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "b3propagatormodule",
        {
          _index: 197,
          title: { "modules/B3PropagatorModule.html": {} },
          body: {
            "modules/B3PropagatorModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "b3propagatorservice",
        {
          _index: 200,
          title: { "injectables/B3PropagatorService.html": {} },
          body: {
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "b3propagatorservice.defineb3encoding(config.b3propagatorconfig?.multiheader",
        {
          _index: 225,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      ["b63afc1", { _index: 932, title: {}, body: { "changelog.html": {} } }],
      ["b679883", { _index: 933, title: {}, body: { "changelog.html": {} } }],
      ["b6dcaf7", { _index: 872, title: {}, body: { "changelog.html": {} } }],
      [
        "backendapp.get('/api/config",
        { _index: 1043, title: {}, body: { "index.html": {} } },
      ],
      ["bad", { _index: 717, title: {}, body: { "changelog.html": {} } }],
      ["baggage", { _index: 1523, title: {}, body: { "todo.html": {} } }],
      ["bailouts", { _index: 1150, title: {}, body: { "index.html": {} } }],
      [
        "base",
        {
          _index: 270,
          title: {},
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "based",
        {
          _index: 1116,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["basis", { _index: 1416, title: {}, body: { "license.html": {} } }],
      [
        "batch",
        {
          _index: 118,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "batchspanexporter",
        {
          _index: 109,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "batchspanexporter(async",
        {
          _index: 98,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "batchspanprocessor",
        {
          _index: 338,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "batchspanprocessor(exporter.getexporter",
        {
          _index: 396,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "batchspanprocessor(this.exporterservice.getexporter",
        {
          _index: 580,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "batchspanprocessorconfig",
        {
          _index: 110,
          title: { "interfaces/BatchSpanProcessorConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      ["bca88a0", { _index: 852, title: {}, body: { "changelog.html": {} } }],
      ["bd69598", { _index: 915, title: {}, body: { "changelog.html": {} } }],
      [
        "before",
        {
          _index: 130,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      ["behalf", { _index: 1270, title: {}, body: { "license.html": {} } }],
      ["below", { _index: 1249, title: {}, body: { "license.html": {} } }],
      ["beneficial", { _index: 1217, title: {}, body: { "license.html": {} } }],
      [
        "between",
        {
          _index: 123,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["bfc26ae", { _index: 892, title: {}, body: { "changelog.html": {} } }],
      ["bind", { _index: 1262, title: {}, body: { "license.html": {} } }],
      [
        "body",
        {
          _index: 102,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "boilerplate",
        { _index: 1487, title: {}, body: { "license.html": {} } },
      ],
      [
        "boolean",
        {
          _index: 95,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["boolean)send", { _index: 1049, title: {}, body: { "index.html": {} } }],
      [
        "bootstrap",
        {
          _index: 1084,
          title: {},
          body: { "index.html": {}, "overview.html": {} },
        },
      ],
      ["brackets", { _index: 1490, title: {}, body: { "license.html": {} } }],
      ["branch", { _index: 816, title: {}, body: { "changelog.html": {} } }],
      ["breaking", { _index: 808, title: {}, body: { "changelog.html": {} } }],
      ["browse", { _index: 1512, title: {}, body: { "modules.html": {} } }],
      [
        "browser",
        {
          _index: 988,
          title: {},
          body: { "dependencies.html": {}, "index.html": {} },
        },
      ],
      [
        "bufferconfig",
        {
          _index: 479,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["bug", { _index: 671, title: {}, body: { "changelog.html": {} } }],
      ["c", { _index: 1357, title: {}, body: { "license.html": {} } }],
      ["c2b4209", { _index: 778, title: {}, body: { "changelog.html": {} } }],
      ["c36e295", { _index: 737, title: {}, body: { "changelog.html": {} } }],
      ["c53447a", { _index: 828, title: {}, body: { "changelog.html": {} } }],
      ["c6368c9", { _index: 913, title: {}, body: { "changelog.html": {} } }],
      ["c71ba73", { _index: 848, title: {}, body: { "changelog.html": {} } }],
      ["c9f8667", { _index: 807, title: {}, body: { "changelog.html": {} } }],
      ["caab7a9", { _index: 797, title: {}, body: { "changelog.html": {} } }],
      [
        "call",
        {
          _index: 514,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "calls",
        {
          _index: 438,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "cancelled",
        {
          _index: 131,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "carrier",
        {
          _index: 563,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "carrier[key",
        {
          _index: 567,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["carry", { _index: 1352, title: {}, body: { "license.html": {} } }],
      ["catch", { _index: 1017, title: {}, body: { "index.html": {} } }],
      [
        "cause",
        {
          _index: 1148,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["change", { _index: 809, title: {}, body: { "changelog.html": {} } }],
      ["changed", { _index: 1356, title: {}, body: { "license.html": {} } }],
      [
        "changelog",
        {
          _index: 652,
          title: { "changelog.html": {} },
          body: { "changelog.html": {} },
        },
      ],
      ["changes", { _index: 654, title: {}, body: { "changelog.html": {} } }],
      ["character", { _index: 1448, title: {}, body: { "license.html": {} } }],
      ["charge", { _index: 1303, title: {}, body: { "license.html": {} } }],
      ["choices", { _index: 1063, title: {}, body: { "index.html": {} } }],
      ["choose", { _index: 1464, title: {}, body: { "license.html": {} } }],
      ["ci", { _index: 693, title: {}, body: { "changelog.html": {} } }],
      ["claim", { _index: 1332, title: {}, body: { "license.html": {} } }],
      ["claims", { _index: 1321, title: {}, body: { "license.html": {} } }],
      [
        "class",
        {
          _index: 26,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "classprovider",
        {
          _index: 68,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["client", { _index: 787, title: {}, body: { "changelog.html": {} } }],
      ["closes", { _index: 710, title: {}, body: { "changelog.html": {} } }],
      [
        "code",
        {
          _index: 527,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "collector",
        {
          _index: 133,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "collector/build/src/platform/browser",
        { _index: 1153, title: {}, body: { "index.html": {} } },
      ],
      [
        "collector/docker",
        { _index: 1134, title: {}, body: { "index.html": {} } },
      ],
      [
        "collectorexporter",
        {
          _index: 621,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "collectorexporterconfigbase",
        {
          _index: 623,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "combination",
        { _index: 1327, title: {}, body: { "license.html": {} } },
      ],
      ["command", { _index: 1124, title: {}, body: { "index.html": {} } }],
      ["comment", { _index: 1494, title: {}, body: { "license.html": {} } }],
      ["commercial", { _index: 1458, title: {}, body: { "license.html": {} } }],
      ["commit", { _index: 659, title: {}, body: { "changelog.html": {} } }],
      [
        "common",
        {
          _index: 82,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "commoncollectorconfig",
        {
          _index: 83,
          title: { "interfaces/CommonCollectorConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "commonconfig",
        {
          _index: 170,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "commonconfig.resourceattributes",
        {
          _index: 387,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "commonconfig.servicename",
        {
          _index: 386,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["commonjs", { _index: 1146, title: {}, body: { "index.html": {} } }],
      [
        "commonmodule",
        {
          _index: 411,
          title: {},
          body: { "modules/NoopSpanExporterModule.html": {} },
        },
      ],
      ["commons", { _index: 1009, title: {}, body: { "index.html": {} } }],
      [
        "communication",
        { _index: 1274, title: {}, body: { "license.html": {} } },
      ],
      [
        "compatible",
        {
          _index: 179,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["compiled", { _index: 1235, title: {}, body: { "license.html": {} } }],
      ["compliance", { _index: 1504, title: {}, body: { "license.html": {} } }],
      ["complies", { _index: 1384, title: {}, body: { "license.html": {} } }],
      [
        "component",
        {
          _index: 300,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      ["compose", { _index: 1132, title: {}, body: { "index.html": {} } }],
      ["compose.yaml", { _index: 1135, title: {}, body: { "index.html": {} } }],
      [
        "composite",
        {
          _index: 233,
          title: {},
          body: {
            "modules/CompositePropagatorModule.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "compositepropagator",
        {
          _index: 239,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "compositepropagatormodule",
        {
          _index: 229,
          title: { "modules/CompositePropagatorModule.html": {} },
          body: {
            "modules/CompositePropagatorModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "compositepropagatorservice",
        {
          _index: 232,
          title: { "injectables/CompositePropagatorService.html": {} },
          body: {
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["computer", { _index: 1455, title: {}, body: { "license.html": {} } }],
      [
        "concurencylimit",
        { _index: 784, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "concurrencylimit",
        {
          _index: 142,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["conditions", { _index: 1177, title: {}, body: { "license.html": {} } }],
      [
        "config",
        {
          _index: 174,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "config.commonconfig.logbody",
        {
          _index: 505,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "config.commonconfig.loglevel",
        {
          _index: 507,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "config.jaegerpropagatorconfig?.customheader",
        {
          _index: 406,
          title: {},
          body: { "injectables/JaegerHttpTracePropagatorService.html": {} },
        },
      ],
      [
        "config.otelcolconfig?.headers",
        {
          _index: 629,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "config.otelcolconfig?.url",
        {
          _index: 628,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "config.ts",
        {
          _index: 53,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "config.zipkinconfig?.headers",
        {
          _index: 648,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      [
        "config.zipkinconfig?.url",
        {
          _index: 647,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      [
        "configprovider",
        {
          _index: 189,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "configprovider.provide",
        {
          _index: 191,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "configurable",
        {
          _index: 839,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "configuration",
        {
          _index: 54,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
            "todo.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "configuration/opentelemetry",
        {
          _index: 220,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      ["configure", { _index: 1022, title: {}, body: { "index.html": {} } }],
      [
        "configured",
        {
          _index: 643,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      [
        "consecutive",
        {
          _index: 125,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "consequential",
        { _index: 1447, title: {}, body: { "license.html": {} } },
      ],
      [
        "conserve",
        {
          _index: 454,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["consistent", { _index: 1472, title: {}, body: { "license.html": {} } }],
      [
        "console",
        {
          _index: 94,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "consolespanexporter",
        {
          _index: 266,
          title: {},
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "consolespanexportermodule",
        {
          _index: 256,
          title: { "modules/ConsoleSpanExporterModule.html": {} },
          body: {
            "modules/ConsoleSpanExporterModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "consolespanexporterservice",
        {
          _index: 259,
          title: { "injectables/ConsoleSpanExporterService.html": {} },
          body: {
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "conspicuously",
        { _index: 1287, title: {}, body: { "license.html": {} } },
      ],
      [
        "const",
        {
          _index: 176,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "constitutes",
        { _index: 1336, title: {}, body: { "license.html": {} } },
      ],
      [
        "constructor",
        {
          _index: 208,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "constructor(@inject(otel_config",
        {
          _index: 222,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "constructor(b3propagatorservice",
        {
          _index: 234,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "constructor(config",
        {
          _index: 209,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "constructorprovider",
        {
          _index: 69,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["construed", { _index: 1380, title: {}, body: { "license.html": {} } }],
      ["contained", { _index: 1366, title: {}, body: { "license.html": {} } }],
      [
        "content",
        {
          _index: 1006,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      [
        "contents",
        {
          _index: 1005,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      [
        "context",
        {
          _index: 242,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "contextmanager",
        {
          _index: 301,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["contract", { _index: 1208, title: {}, body: { "license.html": {} } }],
      [
        "contribution",
        { _index: 1264, title: {}, body: { "license.html": {} } },
      ],
      [
        "contribution(s",
        { _index: 1325, title: {}, body: { "license.html": {} } },
      ],
      [
        "contributions",
        { _index: 1386, title: {}, body: { "license.html": {} } },
      ],
      [
        "contributor",
        { _index: 1291, title: {}, body: { "license.html": {} } },
      ],
      [
        "contributory",
        { _index: 1337, title: {}, body: { "license.html": {} } },
      ],
      ["control", { _index: 1195, title: {}, body: { "license.html": {} } }],
      ["controlled", { _index: 1196, title: {}, body: { "license.html": {} } }],
      [
        "conventions",
        {
          _index: 354,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "conversions",
        { _index: 1237, title: {}, body: { "license.html": {} } },
      ],
      [
        "convert",
        {
          _index: 316,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "convertstringtonumber",
        {
          _index: 303,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "convertstringtonumber(value",
        {
          _index: 314,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["copies", { _index: 1344, title: {}, body: { "license.html": {} } }],
      ["copy", { _index: 1349, title: {}, body: { "license.html": {} } }],
      ["copyright", { _index: 1186, title: {}, body: { "license.html": {} } }],
      ["core", { _index: 1071, title: {}, body: { "index.html": {} } }],
      [
        "counterclaim",
        { _index: 1333, title: {}, body: { "license.html": {} } },
      ],
      ["cours", { _index: 928, title: {}, body: { "changelog.html": {} } }],
      [
        "coverage",
        {
          _index: 962,
          title: { "coverage.html": {} },
          body: { "coverage.html": {} },
        },
      ],
      ["create", { _index: 1117, title: {}, body: { "index.html": {} } }],
      ["cross", { _index: 1331, title: {}, body: { "license.html": {} } }],
      [
        "current",
        {
          _index: 444,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "custom",
        {
          _index: 137,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["customary", { _index: 1406, title: {}, body: { "license.html": {} } }],
      [
        "customheader",
        {
          _index: 156,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["customize", { _index: 1099, title: {}, body: { "index.html": {} } }],
      [
        "customspan",
        {
          _index: 79,
          title: { "interfaces/CustomSpan.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "customspanimpl",
        { _index: 1112, title: {}, body: { "index.html": {} } },
      ],
      ["cypress", { _index: 813, title: {}, body: { "changelog.html": {} } }],
      ["d", { _index: 1363, title: {}, body: { "license.html": {} } }],
      ["d2ecbb8", { _index: 898, title: {}, body: { "changelog.html": {} } }],
      ["d8b9f3c", { _index: 823, title: {}, body: { "changelog.html": {} } }],
      ["damages", { _index: 1444, title: {}, body: { "license.html": {} } }],
      [
        "dangle",
        {
          _index: 558,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["date", { _index: 1341, title: {}, body: { "license.html": {} } }],
      ["dbaec60", { _index: 800, title: {}, body: { "changelog.html": {} } }],
      ["dcde5bb", { _index: 843, title: {}, body: { "changelog.html": {} } }],
      ["dd7a0e5", { _index: 930, title: {}, body: { "changelog.html": {} } }],
      ["dda5d54", { _index: 946, title: {}, body: { "changelog.html": {} } }],
      ["de09c4d", { _index: 881, title: {}, body: { "changelog.html": {} } }],
      ["de1f141", { _index: 849, title: {}, body: { "changelog.html": {} } }],
      ["de50104", { _index: 703, title: {}, body: { "changelog.html": {} } }],
      ["debug", { _index: 1105, title: {}, body: { "index.html": {} } }],
      [
        "declarations",
        {
          _index: 20,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
            "overview.html": {},
          },
        },
      ],
      ["declare", { _index: 1085, title: {}, body: { "index.html": {} } }],
      ["declared", { _index: 1167, title: {}, body: { "index.html": {} } }],
      [
        "default",
        {
          _index: 64,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["defend", { _index: 1478, title: {}, body: { "license.html": {} } }],
      [
        "define",
        {
          _index: 214,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "defineb3encoding",
        {
          _index: 207,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "defineb3encoding(value",
        {
          _index: 212,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "defineconfigprovider",
        {
          _index: 186,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "defineconfigprovider(config",
        {
          _index: 616,
          title: {},
          body: { "modules/OtelWebTracerModule.html": {} },
        },
      ],
      [
        "defineconfigprovider(config,configprovider",
        {
          _index: 602,
          title: {},
          body: { "modules/OpenTelemetryInterceptorModule.html": {} },
        },
      ],
      [
        "defined",
        {
          _index: 36,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "defineprobabilitysampler",
        {
          _index: 304,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "defineprobabilitysampler(sampleconfig",
        {
          _index: 318,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["definition", { _index: 1199, title: {}, body: { "license.html": {} } }],
      [
        "definitions",
        { _index: 1180, title: {}, body: { "license.html": {} } },
      ],
      ["del", { _index: 941, title: {}, body: { "changelog.html": {} } }],
      ["delete", { _index: 944, title: {}, body: { "changelog.html": {} } }],
      ["deliberate", { _index: 1439, title: {}, body: { "license.html": {} } }],
      [
        "dep",
        {
          _index: 351,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "dependence",
        {
          _index: 741,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "dependencies",
        {
          _index: 673,
          title: { "dependencies.html": {} },
          body: {
            "changelog.html": {},
            "dependencies.html": {},
            "index.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "dependenciesadd",
        { _index: 1154, title: {}, body: { "index.html": {} } },
      ],
      ["depends", { _index: 1144, title: {}, body: { "index.html": {} } }],
      ["deploy", { _index: 1001, title: {}, body: { "index.html": {} } }],
      [
        "deprecated",
        { _index: 720, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "deps",
        {
          _index: 618,
          title: {},
          body: { "modules/OtelWebTracerModule.html": {} },
        },
      ],
      ["derivative", { _index: 1250, title: {}, body: { "license.html": {} } }],
      ["derived", { _index: 1251, title: {}, body: { "license.html": {} } }],
      ["describing", { _index: 1407, title: {}, body: { "license.html": {} } }],
      [
        "description",
        {
          _index: 32,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "license.html": {},
          },
        },
      ],
      ["designated", { _index: 1289, title: {}, body: { "license.html": {} } }],
      [
        "determining",
        { _index: 1427, title: {}, body: { "license.html": {} } },
      ],
      [
        "devkit/core",
        { _index: 978, title: {}, body: { "dependencies.html": {} } },
      ],
      ["dgo", { _index: 1137, title: {}, body: { "index.html": {} } }],
      [
        "diaglogger",
        {
          _index: 75,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "diagloglevel",
        {
          _index: 76,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["different", { _index: 1383, title: {}, body: { "license.html": {} } }],
      ["dir", { _index: 942, title: {}, body: { "changelog.html": {} } }],
      ["direct", { _index: 1202, title: {}, body: { "license.html": {} } }],
      ["direction", { _index: 1204, title: {}, body: { "license.html": {} } }],
      [
        "disable",
        {
          _index: 364,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      ["disclaimer", { _index: 1410, title: {}, body: { "license.html": {} } }],
      ["discussing", { _index: 1284, title: {}, body: { "license.html": {} } }],
      [
        "display",
        {
          _index: 1027,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["distribute", { _index: 1312, title: {}, body: { "license.html": {} } }],
      [
        "distributed",
        { _index: 1368, title: {}, body: { "license.html": {} } },
      ],
      [
        "distribution",
        { _index: 1179, title: {}, body: { "license.html": {} } },
      ],
      ["doc", { _index: 846, title: {}, body: { "changelog.html": {} } }],
      ["docker", { _index: 1131, title: {}, body: { "index.html": {} } }],
      ["docs", { _index: 914, title: {}, body: { "changelog.html": {} } }],
      [
        "document",
        {
          _index: 774,
          title: {},
          body: { "changelog.html": {}, "index.html": {}, "license.html": {} },
        },
      ],
      [
        "documentation",
        {
          _index: 803,
          title: {},
          body: {
            "changelog.html": {},
            "coverage.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "documented",
        { _index: 656, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "dom",
        {
          _index: 439,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "don't",
        {
          _index: 810,
          title: {},
          body: { "changelog.html": {}, "index.html": {}, "license.html": {} },
        },
      ],
      ["done", { _index: 1524, title: {}, body: { "todo.html": {} } }],
      ["downgrade", { _index: 924, title: {}, body: { "changelog.html": {} } }],
      [
        "dropped",
        {
          _index: 116,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "during",
        {
          _index: 283,
          title: {},
          body: { "interfaces/CustomSpan.html": {}, "index.html": {} },
        },
      ],
      [
        "dynamic",
        {
          _index: 793,
          title: {},
          body: { "changelog.html": {}, "dependencies.html": {} },
        },
      ],
      ["e29c839", { _index: 756, title: {}, body: { "changelog.html": {} } }],
      ["e2e", { _index: 900, title: {}, body: { "changelog.html": {} } }],
      ["e5eb09e", { _index: 921, title: {}, body: { "changelog.html": {} } }],
      ["e6073bf", { _index: 847, title: {}, body: { "changelog.html": {} } }],
      ["e9dc64b", { _index: 749, title: {}, body: { "changelog.html": {} } }],
      [
        "each",
        {
          _index: 147,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      ["ead3251", { _index: 826, title: {}, body: { "changelog.html": {} } }],
      ["easier", { _index: 1499, title: {}, body: { "license.html": {} } }],
      ["ec28651", { _index: 935, title: {}, body: { "changelog.html": {} } }],
      ["editorial", { _index: 1252, title: {}, body: { "license.html": {} } }],
      ["ee08e85", { _index: 768, title: {}, body: { "changelog.html": {} } }],
      ["efa9083", { _index: 842, title: {}, body: { "changelog.html": {} } }],
      [
        "elaborations",
        { _index: 1255, title: {}, body: { "license.html": {} } },
      ],
      ["electronic", { _index: 1271, title: {}, body: { "license.html": {} } }],
      ["en", { _index: 927, title: {}, body: { "changelog.html": {} } }],
      [
        "encapsulates",
        {
          _index: 437,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["enclosed", { _index: 1489, title: {}, body: { "license.html": {} } }],
      ["end", { _index: 1484, title: {}, body: { "license.html": {} } }],
      ["entities", { _index: 1194, title: {}, body: { "license.html": {} } }],
      ["entity", { _index: 1188, title: {}, body: { "license.html": {} } }],
      ["enum", { _index: 1037, title: {}, body: { "index.html": {} } }],
      ["environment", { _index: 1080, title: {}, body: { "index.html": {} } }],
      [
        "environments/environment",
        { _index: 1081, title: {}, body: { "index.html": {} } },
      ],
      [
        "equal",
        {
          _index: 120,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "error",
        {
          _index: 194,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "error(`configuration",
        {
          _index: 193,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "eslint",
        {
          _index: 363,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["even", { _index: 1460, title: {}, body: { "license.html": {} } }],
      [
        "event",
        {
          _index: 520,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "event.body",
        {
          _index: 523,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "event.error",
        {
          _index: 535,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "event.message",
        {
          _index: 533,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "event.name",
        {
          _index: 530,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "event.status",
        {
          _index: 522,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "exact",
        {
          _index: 296,
          title: {},
          body: { "interfaces/IgnoreUrlsConfig.html": {}, "index.html": {} },
        },
      ],
      [
        "example",
        {
          _index: 755,
          title: {},
          body: { "changelog.html": {}, "index.html": {}, "license.html": {} },
        },
      ],
      ["exampleand", { _index: 1126, title: {}, body: { "index.html": {} } }],
      ["except", { _index: 1314, title: {}, body: { "license.html": {} } }],
      ["excluding", { _index: 1286, title: {}, body: { "license.html": {} } }],
      ["exclusive", { _index: 1302, title: {}, body: { "license.html": {} } }],
      ["executed", { _index: 1396, title: {}, body: { "license.html": {} } }],
      ["exercise", { _index: 1434, title: {}, body: { "license.html": {} } }],
      ["exercising", { _index: 1219, title: {}, body: { "license.html": {} } }],
      ["existing", { _index: 1102, title: {}, body: { "index.html": {} } }],
      [
        "existingprovider",
        {
          _index: 70,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["explicitly", { _index: 1388, title: {}, body: { "license.html": {} } }],
      [
        "export",
        {
          _index: 25,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      ["exported", { _index: 1160, title: {}, body: { "index.html": {} } }],
      [
        "exporter",
        {
          _index: 145,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "todo.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "exporter.interface",
        {
          _index: 262,
          title: {},
          body: {
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/OtelColExporterModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "exporter.module.ts",
        {
          _index: 258,
          title: {},
          body: {
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/ZipkinExporterModule.html": {},
          },
        },
      ],
      [
        "exporter.service",
        {
          _index: 260,
          title: {},
          body: {
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/ZipkinExporterModule.html": {},
          },
        },
      ],
      [
        "exporter.service.ts",
        {
          _index: 263,
          title: {},
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "exporter.service.ts:17",
        {
          _index: 640,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      [
        "exporter.service.ts:18",
        {
          _index: 265,
          title: {},
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/NoopSpanExporterService.html": {},
          },
        },
      ],
      [
        "exporter.service.ts:21",
        {
          _index: 619,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "exporter.service.ts:36",
        {
          _index: 641,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      [
        "exporter.service.ts:44",
        {
          _index: 620,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "exporter/exporter.interface",
        {
          _index: 369,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "exporter/noop",
        {
          _index: 410,
          title: {},
          body: {
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "exporterconfig",
        {
          _index: 645,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      ["exporters", { _index: 1068, title: {}, body: { "index.html": {} } }],
      [
        "exporterservice",
        {
          _index: 311,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "exports",
        {
          _index: 126,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "exporttimeoutmillis",
        {
          _index: 132,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["exposes", { _index: 1097, title: {}, body: { "index.html": {} } }],
      ["express", { _index: 1418, title: {}, body: { "license.html": {} } }],
      [
        "external",
        {
          _index: 753,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "extra",
        {
          _index: 89,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["f", { _index: 1133, title: {}, body: { "index.html": {} } }],
      ["f0a18ea", { _index: 835, title: {}, body: { "changelog.html": {} } }],
      ["f195a50", { _index: 909, title: {}, body: { "changelog.html": {} } }],
      ["f206c5e", { _index: 850, title: {}, body: { "changelog.html": {} } }],
      ["fabre", { _index: 1520, title: {}, body: { "properties.html": {} } }],
      [
        "factoryprovider",
        {
          _index: 71,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["fad044a", { _index: 910, title: {}, body: { "changelog.html": {} } }],
      ["failure", { _index: 1456, title: {}, body: { "license.html": {} } }],
      ["fake", { _index: 1069, title: {}, body: { "index.html": {} } }],
      [
        "false",
        {
          _index: 473,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      ["features", { _index: 706, title: {}, body: { "changelog.html": {} } }],
      ["fee", { _index: 1465, title: {}, body: { "license.html": {} } }],
      ["fetch", { _index: 1023, title: {}, body: { "index.html": {} } }],
      ["ff373c0", { _index: 884, title: {}, body: { "changelog.html": {} } }],
      [
        "field",
        {
          _index: 644,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      ["fields", { _index: 1488, title: {}, body: { "license.html": {} } }],
      ["fifty", { _index: 1211, title: {}, body: { "license.html": {} } }],
      [
        "file",
        {
          _index: 5,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "license.html": {},
          },
        },
      ],
      ["filed", { _index: 1342, title: {}, body: { "license.html": {} } }],
      ["files", { _index: 1229, title: {}, body: { "license.html": {} } }],
      [
        "finalize",
        {
          _index: 491,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["fitness", { _index: 1423, title: {}, body: { "license.html": {} } }],
      [
        "fix",
        {
          _index: 512,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      ["fixes", { _index: 672, title: {}, body: { "changelog.html": {} } }],
      ["following", { _index: 1347, title: {}, body: { "license.html": {} } }],
      [
        "forget",
        {
          _index: 811,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["form", { _index: 1222, title: {}, body: { "license.html": {} } }],
      ["format", { _index: 1496, title: {}, body: { "license.html": {} } }],
      [
        "forroot",
        {
          _index: 587,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      [
        "forroot(config",
        {
          _index: 588,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      ["free", { _index: 1305, title: {}, body: { "license.html": {} } }],
      ["functions", { _index: 1103, title: {}, body: { "index.html": {} } }],
      ["generally", { _index: 1066, title: {}, body: { "index.html": {} } }],
      [
        "generate",
        {
          _index: 344,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["generated", { _index: 1236, title: {}, body: { "license.html": {} } }],
      [
        "getexporter",
        {
          _index: 264,
          title: {},
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "getpropagator",
        {
          _index: 35,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
          },
        },
      ],
      [
        "getting",
        {
          _index: 650,
          title: {
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
            "todo.html": {},
          },
          body: { "index.html": {} },
        },
      ],
      [
        "gettracer(infolibrary.name",
        {
          _index: 543,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "geturl",
        {
          _index: 430,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["github", { _index: 815, title: {}, body: { "changelog.html": {} } }],
      [
        "give",
        {
          _index: 288,
          title: {},
          body: {
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "license.html": {},
          },
        },
      ],
      ["global", { _index: 1008, title: {}, body: { "index.html": {} } }],
      ["going", { _index: 1095, title: {}, body: { "index.html": {} } }],
      ["goodwill", { _index: 1453, title: {}, body: { "license.html": {} } }],
      ["governing", { _index: 1509, title: {}, body: { "license.html": {} } }],
      ["grant", { _index: 1296, title: {}, body: { "license.html": {} } }],
      ["granted", { _index: 1221, title: {}, body: { "license.html": {} } }],
      ["granting", { _index: 1190, title: {}, body: { "license.html": {} } }],
      ["grants", { _index: 1298, title: {}, body: { "license.html": {} } }],
      ["graph", { _index: 1511, title: {}, body: { "modules.html": {} } }],
      ["grossly", { _index: 1440, title: {}, body: { "license.html": {} } }],
      [
        "guidelines",
        { _index: 660, title: {}, body: { "changelog.html": {} } },
      ],
      ["harmless", { _index: 1480, title: {}, body: { "license.html": {} } }],
      [
        "header",
        {
          _index: 62,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "headers",
        {
          _index: 138,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "here",
        {
          _index: 1139,
          title: {},
          body: { "index.html": {}, "todo.html": {} },
        },
      ],
      ["hereby", { _index: 1297, title: {}, body: { "license.html": {} } }],
      ["herein", { _index: 1392, title: {}, body: { "license.html": {} } }],
      [
        "highlight",
        { _index: 991, title: {}, body: { "dependencies.html": {} } },
      ],
      ["hold", { _index: 1479, title: {}, body: { "license.html": {} } }],
      [
        "homepage",
        { _index: 1516, title: {}, body: { "properties.html": {} } },
      ],
      [
        "hostname",
        {
          _index: 446,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http",
        {
          _index: 245,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "http.interceptor",
        {
          _index: 596,
          title: {},
          body: { "modules/OpenTelemetryInterceptorModule.html": {} },
        },
      ],
      [
        "http.interceptor.ts",
        {
          _index: 428,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "http.interceptor.ts:117",
        {
          _index: 461,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:172",
        {
          _index: 443,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:179",
        {
          _index: 466,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:196",
        {
          _index: 449,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:228",
        {
          _index: 453,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:248",
        {
          _index: 457,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:260",
        {
          _index: 456,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:272",
        {
          _index: 458,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:292",
        {
          _index: 442,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:309",
        {
          _index: 441,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:321",
        {
          _index: 468,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:64",
        {
          _index: 474,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:68",
        {
          _index: 471,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http.interceptor.ts:72",
        {
          _index: 436,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "http://localhost:16686",
        { _index: 1138, title: {}, body: { "index.html": {} } },
      ],
      [
        "http://localhost:4200",
        { _index: 1128, title: {}, body: { "index.html": {} } },
      ],
      [
        "http://localhost:4318/v1/trace",
        {
          _index: 136,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "http://localhost:4318/v1/traces",
        { _index: 1042, title: {}, body: { "index.html": {} } },
      ],
      [
        "http://localhost:9411/api/v2/spans",
        {
          _index: 152,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "http://www.apache.org/licenses",
        { _index: 1175, title: {}, body: { "license.html": {} } },
      ],
      [
        "http://www.apache.org/licenses/license",
        { _index: 1506, title: {}, body: { "license.html": {} } },
      ],
      [
        "http_interceptors",
        {
          _index: 593,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "index.html": {},
          },
        },
      ],
      ["httpclient", { _index: 1018, title: {}, body: { "index.html": {} } }],
      [
        "httpclientmodule",
        {
          _index: 594,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "httperrorresponse",
        {
          _index: 281,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "httpevent",
        {
          _index: 475,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "httphandler",
        {
          _index: 460,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "httpinterceptor",
        {
          _index: 274,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "httprequest",
        {
          _index: 279,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "httpresponse",
        {
          _index: 280,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "https://angular.io/guide/build#configuring",
        { _index: 1151, title: {}, body: { "index.html": {} } },
      ],
      [
        "https://github.com/jufab/opentelemetry",
        { _index: 1517, title: {}, body: { "properties.html": {} } },
      ],
      [
        "https://github.com/open",
        { _index: 1056, title: {}, body: { "index.html": {} } },
      ],
      [
        "https://jufab.github.io/opentelemetry",
        { _index: 1004, title: {}, body: { "index.html": {} } },
      ],
      [
        "httptextpropagator",
        { _index: 294, title: {}, body: { "interfaces/IPropagator.html": {} } },
      ],
      ["id", { _index: 908, title: {}, body: { "changelog.html": {} } }],
      [
        "identification",
        { _index: 1500, title: {}, body: { "license.html": {} } },
      ],
      ["identifier", { _index: 963, title: {}, body: { "coverage.html": {} } }],
      [
        "identifying",
        { _index: 1492, title: {}, body: { "license.html": {} } },
      ],
      [
        "iexporter",
        {
          _index: 268,
          title: { "interfaces/IExporter.html": {} },
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "ignore",
        {
          _index: 735,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "ignoreurls",
        {
          _index: 162,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "ignoreurlsconfig",
        {
          _index: 157,
          title: { "interfaces/IgnoreUrlsConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      ["ii", { _index: 1209, title: {}, body: { "license.html": {} } }],
      ["iii", { _index: 1216, title: {}, body: { "license.html": {} } }],
      ["implement", { _index: 1111, title: {}, body: { "index.html": {} } }],
      [
        "implementation",
        {
          _index: 293,
          title: {},
          body: { "interfaces/IPropagator.html": {}, "index.html": {} },
        },
      ],
      [
        "implements",
        {
          _index: 47,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      ["implied", { _index: 1419, title: {}, body: { "license.html": {} } }],
      [
        "import",
        {
          _index: 11,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "imports",
        {
          _index: 21,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
          },
        },
      ],
      ["improving", { _index: 1285, title: {}, body: { "license.html": {} } }],
      ["inability", { _index: 1451, title: {}, body: { "license.html": {} } }],
      ["incidental", { _index: 1446, title: {}, body: { "license.html": {} } }],
      ["include", { _index: 1258, title: {}, body: { "license.html": {} } }],
      ["included", { _index: 1245, title: {}, body: { "license.html": {} } }],
      ["includes", { _index: 1364, title: {}, body: { "license.html": {} } }],
      ["including", { _index: 1226, title: {}, body: { "license.html": {} } }],
      ["inclusion", { _index: 1268, title: {}, body: { "license.html": {} } }],
      [
        "incorporated",
        { _index: 1294, title: {}, body: { "license.html": {} } },
      ],
      ["incurred", { _index: 1481, title: {}, body: { "license.html": {} } }],
      ["indemnify", { _index: 1477, title: {}, body: { "license.html": {} } }],
      ["indemnity", { _index: 1468, title: {}, body: { "license.html": {} } }],
      [
        "index",
        {
          _index: 33,
          title: { "index.html": {} },
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["indicated", { _index: 1243, title: {}, body: { "license.html": {} } }],
      ["indirect", { _index: 1203, title: {}, body: { "license.html": {} } }],
      ["individual", { _index: 1218, title: {}, body: { "license.html": {} } }],
      [
        "info",
        {
          _index: 3,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "infolibrary",
        {
          _index: 493,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "infolibrary.version",
        {
          _index: 544,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["infor", { _index: 1101, title: {}, body: { "index.html": {} } }],
      [
        "information",
        {
          _index: 204,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "informational",
        { _index: 1375, title: {}, body: { "license.html": {} } },
      ],
      ["infringed", { _index: 1324, title: {}, body: { "license.html": {} } }],
      [
        "infringement",
        { _index: 1338, title: {}, body: { "license.html": {} } },
      ],
      [
        "init",
        {
          _index: 326,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "initialise",
        {
          _index: 450,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "initinstrumentation",
        {
          _index: 306,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "initspan",
        {
          _index: 431,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "initspan(request",
        {
          _index: 448,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "inject",
        {
          _index: 219,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "inject(awsxraypropagatorservice",
        {
          _index: 250,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "inject(b3propagatorservice",
        {
          _index: 247,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "inject(jaegerhttptracepropagatorservice",
        {
          _index: 249,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "inject(otel_config",
        {
          _index: 497,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
          },
        },
      ],
      [
        "inject(otel_custom_span",
        {
          _index: 499,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "inject(otel_exporter",
        {
          _index: 371,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "inject(otel_instrumentation_plugins",
        {
          _index: 373,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "inject(otel_logger",
        {
          _index: 498,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "inject(otel_propagator",
        {
          _index: 372,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "inject(w3ctracecontextpropagatorservice",
        {
          _index: 248,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "injectable",
        {
          _index: 29,
          title: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "injectables",
        {
          _index: 30,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "injectcontextandheader",
        {
          _index: 432,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "injectcontextandheader(request",
        {
          _index: 452,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "injected",
        {
          _index: 273,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "injectencoding",
        {
          _index: 224,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "injection",
        {
          _index: 175,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "injectiontoken",
        {
          _index: 72,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "injectiontoken('opentelemetry.config",
        {
          _index: 177,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "injectiontoken('otelcol.custom",
        {
          _index: 183,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "injectiontoken('otelcol.exporter",
        {
          _index: 290,
          title: {},
          body: {
            "interfaces/IExporter.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "injectiontoken('otelcol.instrumentation.plugins",
        {
          _index: 185,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "injectiontoken('otelcol.logger",
        {
          _index: 181,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "injectiontoken('otelcol.propagator",
        {
          _index: 295,
          title: {},
          body: {
            "interfaces/IPropagator.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "inmplementation",
        { _index: 289, title: {}, body: { "interfaces/IExporter.html": {} } },
      ],
      [
        "insert",
        {
          _index: 330,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "insertconsolespanexporter",
        {
          _index: 307,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "insertconsolespanexporter(console",
        {
          _index: 328,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "insertornotspanexporter",
        {
          _index: 308,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "insertornotspanexporter(production",
        {
          _index: 333,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "insertspanprocessorproductionmode",
        {
          _index: 309,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "insertspanprocessorproductionmode(production",
        {
          _index: 336,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      ["install", { _index: 1021, title: {}, body: { "index.html": {} } }],
      ["installation", { _index: 1007, title: {}, body: { "index.html": {} } }],
      ["institute", { _index: 1328, title: {}, body: { "license.html": {} } }],
      [
        "instrumentation",
        {
          _index: 77,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "instrumentationoption",
        { _index: 1100, title: {}, body: { "index.html": {} } },
      ],
      [
        "instrumentations",
        {
          _index: 383,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "instrumentationservice",
        {
          _index: 298,
          title: { "injectables/InstrumentationService.html": {} },
          body: {
            "injectables/InstrumentationService.html": {},
            "modules/OtelWebTracerModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "instrumentationservice.initinstrumentation",
        {
          _index: 615,
          title: {},
          body: {
            "modules/OtelWebTracerModule.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "instruserviceloader",
        {
          _index: 613,
          title: {},
          body: {
            "modules/OtelWebTracerModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "integration",
        { _index: 761, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "intentionally",
        { _index: 1266, title: {}, body: { "license.html": {} } },
      ],
      [
        "intercept",
        {
          _index: 433,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "intercept(request",
        {
          _index: 459,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "intercepted",
        {
          _index: 451,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "interception",
        {
          _index: 284,
          title: {},
          body: { "interfaces/CustomSpan.html": {}, "index.html": {} },
        },
      ],
      [
        "interceptor",
        {
          _index: 424,
          title: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "index.html": {},
            "properties.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "interceptor.js",
        { _index: 1143, title: {}, body: { "index.html": {} } },
      ],
      [
        "interceptor.module.ts",
        {
          _index: 586,
          title: {},
          body: { "modules/OpenTelemetryInterceptorModule.html": {} },
        },
      ],
      [
        "interceptor.module.ts:36",
        {
          _index: 589,
          title: {},
          body: { "modules/OpenTelemetryInterceptorModule.html": {} },
        },
      ],
      [
        "interceptor/custom",
        {
          _index: 80,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "interceptor/opentelemetry",
        {
          _index: 595,
          title: {},
          body: { "modules/OpenTelemetryInterceptorModule.html": {} },
        },
      ],
      [
        "interceptor/src/lib/configuration/opentelemetry",
        {
          _index: 52,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/interceptor/custom",
        {
          _index: 271,
          title: {},
          body: { "interfaces/CustomSpan.html": {}, "coverage.html": {} },
        },
      ],
      [
        "interceptor/src/lib/interceptor/opentelemetry",
        {
          _index: 427,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/opentelemetry",
        {
          _index: 585,
          title: {},
          body: { "modules/OpenTelemetryInterceptorModule.html": {} },
        },
      ],
      [
        "interceptor/src/lib/otel",
        {
          _index: 608,
          title: {},
          body: {
            "modules/OtelWebTracerModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/exporter/console/console",
        {
          _index: 257,
          title: {},
          body: {
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/exporter/exporter.interface.ts",
        {
          _index: 286,
          title: {},
          body: {
            "interfaces/IExporter.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/exporter/exporter.interface.ts:13",
        { _index: 287, title: {}, body: { "interfaces/IExporter.html": {} } },
      ],
      [
        "interceptor/src/lib/services/exporter/noop",
        {
          _index: 409,
          title: {},
          body: {
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/exporter/otelcol/otelcol",
        {
          _index: 604,
          title: {},
          body: {
            "modules/OtelColExporterModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/exporter/zipkin/zipkin",
        {
          _index: 638,
          title: {},
          body: {
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts",
        {
          _index: 299,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:109",
        {
          _index: 329,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:124",
        {
          _index: 337,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:141",
        {
          _index: 315,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:151",
        {
          _index: 319,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:33",
        {
          _index: 347,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:38",
        {
          _index: 313,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:63",
        {
          _index: 325,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:80",
        {
          _index: 343,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/instrumentation/instrumentation.service.ts:95",
        {
          _index: 334,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "interceptor/src/lib/services/propagator/aws",
        {
          _index: 7,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/propagator/b3",
        {
          _index: 198,
          title: {},
          body: {
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/propagator/composite",
        {
          _index: 230,
          title: {},
          body: {
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/propagator/jaeger",
        {
          _index: 400,
          title: {},
          body: {
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/propagator/noop",
        {
          _index: 417,
          title: {},
          body: {
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/propagator/propagator.interface.ts",
        {
          _index: 291,
          title: {},
          body: {
            "interfaces/IPropagator.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "interceptor/src/lib/services/propagator/propagator.interface.ts:13",
        { _index: 292, title: {}, body: { "interfaces/IPropagator.html": {} } },
      ],
      [
        "interceptor/src/lib/services/propagator/w3c",
        {
          _index: 634,
          title: {},
          body: {
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interceptor/src/public",
        { _index: 1087, title: {}, body: { "index.html": {} } },
      ],
      [
        "interceptorconfiguration",
        { _index: 1026, title: {}, body: { "index.html": {} } },
      ],
      [
        "interceptorprovider",
        {
          _index: 601,
          title: {},
          body: { "modules/OpenTelemetryInterceptorModule.html": {} },
        },
      ],
      [
        "interceptors",
        {
          _index: 426,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "interface",
        {
          _index: 49,
          title: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "interfaces",
        {
          _index: 51,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "license.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "interval",
        {
          _index: 122,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "ipropagator",
        {
          _index: 42,
          title: { "interfaces/IPropagator.html": {} },
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "irrevocable",
        { _index: 1306, title: {}, body: { "license.html": {} } },
      ],
      ["issue", { _index: 1280, title: {}, body: { "license.html": {} } }],
      ["issue#38", { _index: 798, title: {}, body: { "changelog.html": {} } }],
      ["issue#4", { _index: 801, title: {}, body: { "changelog.html": {} } }],
      ["issue#41", { _index: 792, title: {}, body: { "changelog.html": {} } }],
      ["issue#42", { _index: 805, title: {}, body: { "changelog.html": {} } }],
      ["issue#80", { _index: 765, title: {}, body: { "changelog.html": {} } }],
      [
        "isurlignored",
        {
          _index: 480,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
          },
        },
      ],
      [
        "isurlignored(request.url",
        {
          _index: 508,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "it's",
        {
          _index: 215,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "jaeger",
        {
          _index: 244,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "changelog.html": {},
            "index.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "jaegerhttppropagator",
        { _index: 1074, title: {}, body: { "index.html": {} } },
      ],
      [
        "jaegerhttptracepropagatormodule",
        {
          _index: 399,
          title: { "modules/JaegerHttpTracePropagatorModule.html": {} },
          body: {
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "jaegerhttptracepropagatorservice",
        {
          _index: 236,
          title: { "injectables/JaegerHttpTracePropagatorService.html": {} },
          body: {
            "injectables/CompositePropagatorService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "jaegerpropagator",
        {
          _index: 403,
          title: {},
          body: {
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "changelog.html": {},
          },
        },
      ],
      [
        "jaegerpropagator(this.customheader",
        {
          _index: 407,
          title: {},
          body: { "injectables/JaegerHttpTracePropagatorService.html": {} },
        },
      ],
      [
        "jaegerpropagatorconfig",
        {
          _index: 154,
          title: { "interfaces/JaegerPropagatorConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      ["january", { _index: 1173, title: {}, body: { "license.html": {} } }],
      ["jest", { _index: 878, title: {}, body: { "changelog.html": {} } }],
      [
        "js",
        {
          _index: 834,
          title: {},
          body: {
            "changelog.html": {},
            "dependencies.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "js/tree/main/experimental/packages/exporter",
        { _index: 1058, title: {}, body: { "index.html": {} } },
      ],
      [
        "js/tree/main/experimental/packages/opentelemetry",
        { _index: 1070, title: {}, body: { "index.html": {} } },
      ],
      [
        "js/tree/main/packages/opentelemetry",
        { _index: 1059, title: {}, body: { "index.html": {} } },
      ],
      [
        "json.stringify(event.body",
        {
          _index: 525,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["jsonp", { _index: 950, title: {}, body: { "changelog.html": {} } }],
      [
        "jufab/opentelemetry",
        { _index: 999, title: {}, body: { "index.html": {} } },
      ],
      ["julien", { _index: 1519, title: {}, body: { "properties.html": {} } }],
      [
        "key",
        {
          _index: 153,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "kind",
        {
          _index: 554,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "license.html": {},
          },
        },
      ],
      ["language", { _index: 1508, title: {}, body: { "license.html": {} } }],
      ["last", { _index: 1062, title: {}, body: { "index.html": {} } }],
      ["law", { _index: 1413, title: {}, body: { "license.html": {} } }],
      ["lawsuit", { _index: 1334, title: {}, body: { "license.html": {} } }],
      ["legal", { _index: 1191, title: {}, body: { "license.html": {} } }],
      ["legend", { _index: 1514, title: {}, body: { "overview.html": {} } }],
      [
        "len",
        {
          _index: 368,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "level",
        {
          _index: 106,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["liability", { _index: 1435, title: {}, body: { "license.html": {} } }],
      ["liable", { _index: 1443, title: {}, body: { "license.html": {} } }],
      ["lib", { _index: 674, title: {}, body: { "changelog.html": {} } }],
      ["library", { _index: 1000, title: {}, body: { "index.html": {} } }],
      ["licensable", { _index: 1322, title: {}, body: { "license.html": {} } }],
      [
        "license",
        {
          _index: 1170,
          title: { "license.html": {} },
          body: { "license.html": {} },
        },
      ],
      ["licensed", { _index: 1503, title: {}, body: { "license.html": {} } }],
      ["licenses", { _index: 1339, title: {}, body: { "license.html": {} } }],
      ["licensor", { _index: 1185, title: {}, body: { "license.html": {} } }],
      [
        "limit",
        {
          _index: 139,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["limitation", { _index: 1420, title: {}, body: { "license.html": {} } }],
      [
        "limitations",
        { _index: 1510, title: {}, body: { "license.html": {} } },
      ],
      ["limited", { _index: 1227, title: {}, body: { "license.html": {} } }],
      [
        "line",
        {
          _index: 366,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "link",
        {
          _index: 802,
          title: {},
          body: { "changelog.html": {}, "license.html": {} },
        },
      ],
      ["list", { _index: 1054, title: {}, body: { "index.html": {} } }],
      ["lists", { _index: 1278, title: {}, body: { "license.html": {} } }],
      [
        "literal",
        {
          _index: 636,
          title: {},
          body: { "interfaces/ZipkinCollectorConfig.html": {} },
        },
      ],
      ["litigation", { _index: 1329, title: {}, body: { "license.html": {} } }],
      [
        "load",
        {
          _index: 775,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "loaded",
        {
          _index: 599,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      [
        "loader",
        {
          _index: 614,
          title: {},
          body: {
            "modules/OtelWebTracerModule.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "loadresourceattributes",
        {
          _index: 310,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "loadresourceattributes(commonconfig",
        {
          _index: 342,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["lock", { _index: 827, title: {}, body: { "changelog.html": {} } }],
      ["lock.json", { _index: 748, title: {}, body: { "changelog.html": {} } }],
      [
        "log",
        {
          _index: 101,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "logbody",
        {
          _index: 105,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "logger",
        {
          _index: 178,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "dependencies.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["loggermodule", { _index: 1106, title: {}, body: { "index.html": {} } }],
      [
        "loggermodule.forroot(environment.loggerconfig",
        { _index: 1107, title: {}, body: { "index.html": {} } },
      ],
      [
        "logging",
        {
          _index: 859,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "loglevel",
        {
          _index: 108,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "loglevel:diagloglevel.all",
        { _index: 1036, title: {}, body: { "index.html": {} } },
      ],
      [
        "long",
        {
          _index: 128,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["loss", { _index: 1452, title: {}, body: { "license.html": {} } }],
      ["losses", { _index: 1459, title: {}, body: { "license.html": {} } }],
      ["made", { _index: 1242, title: {}, body: { "license.html": {} } }],
      ["mailing", { _index: 1277, title: {}, body: { "license.html": {} } }],
      ["main", { _index: 817, title: {}, body: { "changelog.html": {} } }],
      ["make", { _index: 1316, title: {}, body: { "license.html": {} } }],
      ["making", { _index: 1224, title: {}, body: { "license.html": {} } }],
      [
        "malfunction",
        { _index: 1457, title: {}, body: { "license.html": {} } },
      ],
      ["managed", { _index: 1282, title: {}, body: { "license.html": {} } }],
      ["management", { _index: 1205, title: {}, body: { "license.html": {} } }],
      [
        "manager",
        {
          _index: 472,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "map",
        {
          _index: 420,
          title: {},
          body: {
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["marked", { _index: 1288, title: {}, body: { "license.html": {} } }],
      ["marks", { _index: 1402, title: {}, body: { "license.html": {} } }],
      [
        "match",
        {
          _index: 160,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "matches",
        {
          _index: 297,
          title: {},
          body: { "interfaces/IgnoreUrlsConfig.html": {}, "index.html": {} },
        },
      ],
      [
        "matches_",
        {
          _index: 166,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "matching",
        {
          _index: 28,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "todo.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "max",
        {
          _index: 367,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "maxexportbatchsize",
        {
          _index: 121,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "maximum",
        {
          _index: 111,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "maxqueuesize",
        {
          _index: 117,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["mean", { _index: 1182, title: {}, body: { "license.html": {} } }],
      ["means", { _index: 1200, title: {}, body: { "license.html": {} } }],
      ["mechanical", { _index: 1232, title: {}, body: { "license.html": {} } }],
      ["media", { _index: 1238, title: {}, body: { "license.html": {} } }],
      ["medium", { _index: 1345, title: {}, body: { "license.html": {} } }],
      ["meet", { _index: 1346, title: {}, body: { "license.html": {} } }],
      ["member", { _index: 1161, title: {}, body: { "index.html": {} } }],
      [
        "merchantability",
        { _index: 1422, title: {}, body: { "license.html": {} } },
      ],
      ["merely", { _index: 1261, title: {}, body: { "license.html": {} } }],
      ["merge", { _index: 883, title: {}, body: { "changelog.html": {} } }],
      [
        "message",
        {
          _index: 532,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "method",
        {
          _index: 463,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "methods",
        {
          _index: 34,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "miscellaneous",
        {
          _index: 1525,
          title: { "miscellaneous/variables.html": {} },
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "mode",
        {
          _index: 339,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "modifications",
        { _index: 1225, title: {}, body: { "license.html": {} } },
      ],
      ["modified", { _index: 1351, title: {}, body: { "license.html": {} } }],
      ["modify", { _index: 1376, title: {}, body: { "license.html": {} } }],
      ["modifying", { _index: 1381, title: {}, body: { "license.html": {} } }],
      [
        "module",
        {
          _index: 0,
          title: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "modules/ZipkinExporterModule.html": {},
          },
          body: { "index.html": {}, "overview.html": {} },
        },
      ],
      [
        "modules",
        {
          _index: 2,
          title: { "modules.html": {} },
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "modulewithproviders",
        {
          _index: 591,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      [
        "more",
        {
          _index: 203,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "index.html": {},
            "license.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "multi",
        {
          _index: 61,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      ["multi:true", { _index: 1090, title: {}, body: { "index.html": {} } }],
      [
        "multiheader",
        {
          _index: 57,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "name",
        {
          _index: 85,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      ["names", { _index: 1401, title: {}, body: { "license.html": {} } }],
      ["namespace", { _index: 1031, title: {}, body: { "index.html": {} } }],
      [
        "necessarily",
        { _index: 1323, title: {}, body: { "license.html": {} } },
      ],
      ["need", { _index: 1020, title: {}, body: { "index.html": {} } }],
      ["needs", { _index: 1091, title: {}, body: { "index.html": {} } }],
      ["negligence", { _index: 1438, title: {}, body: { "license.html": {} } }],
      ["negligent", { _index: 1441, title: {}, body: { "license.html": {} } }],
      [
        "new",
        {
          _index: 48,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "next",
        {
          _index: 365,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "next.handle(request",
        {
          _index: 510,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "next.handle(tracedreq).pipe",
        {
          _index: 519,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["ngcc", { _index: 888, title: {}, body: { "changelog.html": {} } }],
      [
        "ngmodule",
        {
          _index: 13,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "ngx",
        {
          _index: 990,
          title: {},
          body: { "dependencies.html": {}, "index.html": {} },
        },
      ],
      ["ngxlogger", { _index: 1010, title: {}, body: { "index.html": {} } }],
      ["nodejs", { _index: 1159, title: {}, body: { "index.html": {} } }],
      ["non", { _index: 1301, title: {}, body: { "license.html": {} } }],
      [
        "noop",
        {
          _index: 414,
          title: {},
          body: {
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
          },
        },
      ],
      [
        "noophttptextpropagatormodule",
        { _index: 1072, title: {}, body: { "index.html": {} } },
      ],
      [
        "noophttptextpropagatorservice",
        {
          _index: 422,
          title: {},
          body: { "injectables/NoopTextMapPropagatorService.html": {} },
        },
      ],
      [
        "noopspanexportermodule",
        {
          _index: 408,
          title: { "modules/NoopSpanExporterModule.html": {} },
          body: {
            "modules/NoopSpanExporterModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "noopspanexporterservice",
        {
          _index: 413,
          title: { "injectables/NoopSpanExporterService.html": {} },
          body: {
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "noopspanprocessor",
        {
          _index: 362,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "nooptextmappropagator",
        { _index: 725, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "nooptextmappropagatormodule",
        {
          _index: 416,
          title: { "modules/NoopTextMapPropagatorModule.html": {} },
          body: {
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "nooptextmappropagatorservice",
        {
          _index: 421,
          title: { "injectables/NoopTextMapPropagatorService.html": {} },
          body: {
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["normally", { _index: 1373, title: {}, body: { "license.html": {} } }],
      ["notable", { _index: 653, title: {}, body: { "changelog.html": {} } }],
      [
        "nothing",
        {
          _index: 1029,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["notice", { _index: 1244, title: {}, body: { "license.html": {} } }],
      ["notices", { _index: 1354, title: {}, body: { "license.html": {} } }],
      [
        "notwithstanding",
        { _index: 1390, title: {}, body: { "license.html": {} } },
      ],
      ["now", { _index: 1092, title: {}, body: { "index.html": {} } }],
      ["npm", { _index: 1025, title: {}, body: { "index.html": {} } }],
      [
        "null",
        {
          _index: 187,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "number",
        {
          _index: 317,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
          },
        },
      ],
      [
        "number(config.otelcolconfig?.concurrencylimit",
        {
          _index: 630,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "number(config.otelcolconfig?.timeoutmillis",
        {
          _index: 631,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "number(value",
        {
          _index: 398,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "o",
        {
          _index: 66,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["object", { _index: 1230, title: {}, body: { "license.html": {} } }],
      [
        "obligations",
        { _index: 1469, title: {}, body: { "license.html": {} } },
      ],
      [
        "observable",
        {
          _index: 465,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["obtain", { _index: 1505, title: {}, body: { "license.html": {} } }],
      ["offer", { _index: 1317, title: {}, body: { "license.html": {} } }],
      ["offers", { _index: 1014, title: {}, body: { "index.html": {} } }],
      ["ok", { _index: 920, title: {}, body: { "changelog.html": {} } }],
      ["old", { _index: 766, title: {}, body: { "changelog.html": {} } }],
      [
        "one",
        {
          _index: 1075,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      [
        "op",
        {
          _index: 415,
          title: {},
          body: { "injectables/NoopSpanExporterService.html": {} },
        },
      ],
      ["open", { _index: 1127, title: {}, body: { "index.html": {} } }],
      [
        "opentelemetry",
        {
          _index: 107,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "todo.html": {},
          },
        },
      ],
      [
        "opentelemetry/api",
        {
          _index: 43,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "opentelemetry/context",
        {
          _index: 348,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "opentelemetry/core",
        {
          _index: 240,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "opentelemetry/exporter",
        {
          _index: 625,
          title: {},
          body: {
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "opentelemetry/instrumentation",
        {
          _index: 78,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "opentelemetry/otlp",
        {
          _index: 626,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "opentelemetry/propagator",
        {
          _index: 44,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "opentelemetry/resources",
        {
          _index: 355,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "opentelemetry/sdk",
        {
          _index: 269,
          title: {},
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "opentelemetry/semantic",
        {
          _index: 353,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "opentelemetry/tracing",
        { _index: 1152, title: {}, body: { "index.html": {} } },
      ],
      [
        "opentelemetry/web",
        { _index: 1145, title: {}, body: { "index.html": {} } },
      ],
      [
        "opentelemetryconfig",
        {
          _index: 169,
          title: { "interfaces/OpenTelemetryConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "opentelemetryhttpinterceptor",
        {
          _index: 425,
          title: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "opentelemetryinterceptor",
        {
          _index: 429,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "opentelemetryinterceptormodule",
        {
          _index: 584,
          title: { "modules/OpenTelemetryInterceptorModule.html": {} },
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "opentelemetryinterceptormodule.forroot(environment.opentelemetryconfig",
        { _index: 1083, title: {}, body: { "index.html": {} } },
      ],
      [
        "opentelemtery",
        { _index: 831, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "opentelemtry",
        { _index: 893, title: {}, body: { "changelog.html": {} } },
      ],
      ["optimization", { _index: 1149, title: {}, body: { "index.html": {} } }],
      ["option", { _index: 1109, title: {}, body: { "index.html": {} } }],
      [
        "optional",
        {
          _index: 56,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      ["options", { _index: 1156, title: {}, body: { "index.html": {} } }],
      ["origin", { _index: 1408, title: {}, body: { "license.html": {} } }],
      [
        "original",
        {
          _index: 455,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "license.html": {},
          },
        },
      ],
      ["os", { _index: 740, title: {}, body: { "changelog.html": {} } }],
      ["otel", { _index: 1065, title: {}, body: { "index.html": {} } }],
      [
        "otel_config",
        {
          _index: 173,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "otel_custom_span",
        {
          _index: 182,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "otel_exporter",
        {
          _index: 261,
          title: {},
          body: {
            "modules/ConsoleSpanExporterModule.html": {},
            "interfaces/IExporter.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/ZipkinExporterModule.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "otel_instrumentation_plugins",
        {
          _index: 184,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "otel_logger",
        {
          _index: 180,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "otel_propagator",
        {
          _index: 15,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "otelcol",
        {
          _index: 606,
          title: {},
          body: {
            "modules/OtelColExporterModule.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "otelcolconfig",
        {
          _index: 171,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "otelcolexportermodule",
        {
          _index: 603,
          title: { "modules/OtelColExporterModule.html": {} },
          body: {
            "modules/OtelColExporterModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "otelcolexporterservice",
        {
          _index: 605,
          title: { "injectables/OtelcolExporterService.html": {} },
          body: {
            "modules/OtelColExporterModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "otelcollectorconfig",
        {
          _index: 134,
          title: { "interfaces/OtelCollectorConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "otelwebtracermodule",
        {
          _index: 607,
          title: { "modules/OtelWebTracerModule.html": {} },
          body: {
            "modules/OtelWebTracerModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "otelwebtracermodule.forroot(environment.opentelemetryconfig",
        { _index: 1088, title: {}, body: { "index.html": {} } },
      ],
      [
        "otherwise",
        {
          _index: 341,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "otlp",
        {
          _index: 144,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "otlpexporterconfigbase",
        {
          _index: 622,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "otlptraceexporter",
        {
          _index: 624,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "otlptraceexporter(this.otelcolconfig",
        {
          _index: 632,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "out",
        {
          _index: 1450,
          title: {},
          body: { "license.html": {}, "overview.html": {} },
        },
      ],
      [
        "outstanding",
        { _index: 1214, title: {}, body: { "license.html": {} } },
      ],
      [
        "overide",
        {
          _index: 462,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["override", { _index: 1098, title: {}, body: { "index.html": {} } }],
      [
        "overview",
        {
          _index: 1513,
          title: { "overview.html": {} },
          body: { "overview.html": {} },
        },
      ],
      ["owner", { _index: 1187, title: {}, body: { "license.html": {} } }],
      ["ownership", { _index: 1210, title: {}, body: { "license.html": {} } }],
      [
        "package",
        {
          _index: 721,
          title: { "dependencies.html": {}, "properties.html": {} },
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      ["page", { _index: 1498, title: {}, body: { "license.html": {} } }],
      [
        "param",
        {
          _index: 221,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "interfaces/CustomSpan.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      ["parameter", { _index: 851, title: {}, body: { "changelog.html": {} } }],
      [
        "parameters",
        {
          _index: 211,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/CustomSpan.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      ["parent", { _index: 907, title: {}, body: { "changelog.html": {} } }],
      [
        "parentbasedsampler",
        {
          _index: 359,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "parentmodule",
        {
          _index: 597,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      ["part", { _index: 1362, title: {}, body: { "license.html": {} } }],
      [
        "partial",
        {
          _index: 93,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
          },
        },
      ],
      [
        "partially",
        {
          _index: 159,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["particular", { _index: 1424, title: {}, body: { "license.html": {} } }],
      ["party", { _index: 1372, title: {}, body: { "license.html": {} } }],
      ["patent", { _index: 1313, title: {}, body: { "license.html": {} } }],
      [
        "peer",
        {
          _index: 350,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "peerdependecies",
        { _index: 687, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "peerdependencies",
        { _index: 729, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "pending",
        {
          _index: 140,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["percent", { _index: 1212, title: {}, body: { "license.html": {} } }],
      ["percentage", { _index: 1034, title: {}, body: { "index.html": {} } }],
      ["perform", { _index: 1310, title: {}, body: { "license.html": {} } }],
      ["permission", { _index: 1399, title: {}, body: { "license.html": {} } }],
      [
        "permissions",
        { _index: 1220, title: {}, body: { "license.html": {} } },
      ],
      ["perpetual", { _index: 1299, title: {}, body: { "license.html": {} } }],
      ["pertain", { _index: 1361, title: {}, body: { "license.html": {} } }],
      ["places", { _index: 1367, title: {}, body: { "license.html": {} } }],
      [
        "platformlocation",
        {
          _index: 435,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["plugin", { _index: 744, title: {}, body: { "changelog.html": {} } }],
      ["plugins", { _index: 1019, title: {}, body: { "index.html": {} } }],
      [
        "port",
        {
          _index: 447,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
          },
        },
      ],
      [
        "possibilities",
        { _index: 1015, title: {}, body: { "index.html": {} } },
      ],
      [
        "possibility",
        { _index: 1462, title: {}, body: { "license.html": {} } },
      ],
      ["power", { _index: 1201, title: {}, body: { "license.html": {} } }],
      ["preferred", { _index: 1223, title: {}, body: { "license.html": {} } }],
      [
        "prepare",
        {
          _index: 1308,
          title: {},
          body: { "license.html": {}, "todo.html": {} },
        },
      ],
      ["previous", { _index: 865, title: {}, body: { "changelog.html": {} } }],
      ["printed", { _index: 1497, title: {}, body: { "license.html": {} } }],
      [
        "private",
        {
          _index: 205,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "probability",
        {
          _index: 320,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "changelog.html": {},
          },
        },
      ],
      [
        "probabilitysampler",
        {
          _index: 100,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["problem", { _index: 906, title: {}, body: { "changelog.html": {} } }],
      ["product", { _index: 1403, title: {}, body: { "license.html": {} } }],
      [
        "production",
        {
          _index: 96,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "progress",
        {
          _index: 925,
          title: {},
          body: { "changelog.html": {}, "todo.html": {} },
        },
      ],
      [
        "project",
        {
          _index: 655,
          title: {},
          body: { "changelog.html": {}, "index.html": {}, "todo.html": {} },
        },
      ],
      [
        "projects/.../exporter.interface.ts",
        {
          _index: 1529,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "projects/.../opentelemetry",
        {
          _index: 1527,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "projects/.../otel",
        {
          _index: 1528,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "projects/.../propagator.interface.ts",
        {
          _index: 1530,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "projects/instrumentation",
        { _index: 1120, title: {}, body: { "index.html": {} } },
      ],
      [
        "projects/interceptor",
        { _index: 1119, title: {}, body: { "index.html": {} } },
      ],
      [
        "projects/opentelemetry",
        {
          _index: 6,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["prominent", { _index: 1353, title: {}, body: { "license.html": {} } }],
      ["propagation", { _index: 1061, title: {}, body: { "index.html": {} } }],
      [
        "propagator",
        {
          _index: 155,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "propagator.interface",
        {
          _index: 16,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
          },
        },
      ],
      [
        "propagator.module.ts",
        {
          _index: 10,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
          },
        },
      ],
      [
        "propagator.service",
        {
          _index: 19,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
          },
        },
      ],
      [
        "propagator.service.ts",
        {
          _index: 31,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "propagator.service.ts:15",
        {
          _index: 237,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "propagator.service.ts:16",
        {
          _index: 423,
          title: {},
          body: { "injectables/NoopTextMapPropagatorService.html": {} },
        },
      ],
      [
        "propagator.service.ts:17",
        {
          _index: 37,
          title: {},
          body: { "injectables/AwsXrayPropagatorService.html": {} },
        },
      ],
      [
        "propagator.service.ts:18",
        {
          _index: 401,
          title: {},
          body: {
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
          },
        },
      ],
      [
        "propagator.service.ts:24",
        {
          _index: 210,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "propagator.service.ts:33",
        {
          _index: 402,
          title: {},
          body: { "injectables/JaegerHttpTracePropagatorService.html": {} },
        },
      ],
      [
        "propagator.service.ts:35",
        {
          _index: 238,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "propagator.service.ts:43",
        {
          _index: 213,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "propagator.service.ts:55",
        {
          _index: 218,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "propagator/aws",
        {
          _index: 9,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "propagator/b3",
        {
          _index: 199,
          title: {},
          body: {
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "propagator/composite",
        {
          _index: 231,
          title: {},
          body: {
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "propagator/jaeger",
        {
          _index: 246,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "propagator/noop",
        {
          _index: 419,
          title: {},
          body: {
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "propagator/propagator.interface",
        {
          _index: 370,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "propagator/w3c",
        {
          _index: 243,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "propagators",
        {
          _index: 251,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "propagatorservice",
        {
          _index: 312,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "properties",
        {
          _index: 55,
          title: { "properties.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "properties.html": {},
          },
        },
      ],
      ["protocol", { _index: 819, title: {}, body: { "changelog.html": {} } }],
      [
        "provide",
        {
          _index: 23,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
            "license.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["provided", { _index: 1247, title: {}, body: { "license.html": {} } }],
      [
        "providedin",
        {
          _index: 45,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      ["provider", { _index: 752, title: {}, body: { "changelog.html": {} } }],
      [
        "providers",
        {
          _index: 22,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
            "overview.html": {},
          },
        },
      ],
      ["provides", { _index: 1415, title: {}, body: { "license.html": {} } }],
      [
        "public",
        {
          _index: 305,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      ["publicly", { _index: 1309, title: {}, body: { "license.html": {} } }],
      ["publish", { _index: 694, title: {}, body: { "changelog.html": {} } }],
      ["purpose", { _index: 1283, title: {}, body: { "license.html": {} } }],
      ["purposes", { _index: 1198, title: {}, body: { "license.html": {} } }],
      [
        "queue",
        {
          _index: 112,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["ray", { _index: 1077, title: {}, body: { "index.html": {} } }],
      [
        "reached",
        {
          _index: 114,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["readable", { _index: 1365, title: {}, body: { "license.html": {} } }],
      ["readme", { _index: 718, title: {}, body: { "changelog.html": {} } }],
      ["reason", { _index: 1483, title: {}, body: { "license.html": {} } }],
      ["reasonable", { _index: 1405, title: {}, body: { "license.html": {} } }],
      ["received", { _index: 1292, title: {}, body: { "license.html": {} } }],
      ["recipients", { _index: 1348, title: {}, body: { "license.html": {} } }],
      [
        "recommend",
        {
          _index: 1053,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["record", { _index: 870, title: {}, body: { "changelog.html": {} } }],
      [
        "redistributing",
        { _index: 1430, title: {}, body: { "license.html": {} } },
      ],
      [
        "redistribution",
        { _index: 1343, title: {}, body: { "license.html": {} } },
      ],
      ["redo", { _index: 857, title: {}, body: { "changelog.html": {} } }],
      ["reference", { _index: 767, title: {}, body: { "changelog.html": {} } }],
      ["regarding", { _index: 1397, title: {}, body: { "license.html": {} } }],
      [
        "regex",
        {
          _index: 161,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "registerinstrumentations",
        {
          _index: 356,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "reinit",
        {
          _index: 513,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["release", { _index: 776, title: {}, body: { "changelog.html": {} } }],
      ["remain", { _index: 1259, title: {}, body: { "license.html": {} } }],
      ["remove", { _index: 724, title: {}, body: { "changelog.html": {} } }],
      ["rename", { _index: 745, title: {}, body: { "changelog.html": {} } }],
      ["replaced", { _index: 1491, title: {}, body: { "license.html": {} } }],
      ["represent", { _index: 1256, title: {}, body: { "license.html": {} } }],
      [
        "representatives",
        { _index: 1276, title: {}, body: { "license.html": {} } },
      ],
      ["reproduce", { _index: 1307, title: {}, body: { "license.html": {} } }],
      [
        "reproducing",
        { _index: 1409, title: {}, body: { "license.html": {} } },
      ],
      [
        "reproduction",
        { _index: 1178, title: {}, body: { "license.html": {} } },
      ],
      ["req,res", { _index: 1044, title: {}, body: { "index.html": {} } }],
      [
        "request",
        {
          _index: 278,
          title: {},
          body: {
            "interfaces/CustomSpan.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "request.clone",
        {
          _index: 569,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "request.headers.get(key",
        {
          _index: 568,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "request.headers.keys().map(key",
        {
          _index: 566,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "request.method",
        {
          _index: 547,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "request.method.touppercase",
        {
          _index: 546,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "request.params",
        { _index: 1114, title: {}, body: { "index.html": {} } },
      ],
      [
        "request.urlwithparams",
        {
          _index: 548,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "request.urlwithparams.startswith('http",
        {
          _index: 540,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "requests",
        {
          _index: 141,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["required", { _index: 1404, title: {}, body: { "license.html": {} } }],
      [
        "res.status(200).send",
        { _index: 1045, title: {}, body: { "index.html": {} } },
      ],
      [
        "reset",
        {
          _index: 864,
          title: {},
          body: { "changelog.html": {}, "overview.html": {} },
        },
      ],
      [
        "resource",
        {
          _index: 90,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "resource(commonconfig.resourceattributes",
        {
          _index: 389,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "resource.default().merge",
        {
          _index: 385,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "resourceattributes",
        {
          _index: 88,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "resourceattributes.merge(new",
        {
          _index: 388,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "response",
        {
          _index: 103,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "response.status",
        { _index: 1115, title: {}, body: { "index.html": {} } },
      ],
      [
        "responsibility",
        { _index: 1475, title: {}, body: { "license.html": {} } },
      ],
      [
        "responsible",
        { _index: 1426, title: {}, body: { "license.html": {} } },
      ],
      ["restart", { _index: 806, title: {}, body: { "changelog.html": {} } }],
      [
        "result",
        {
          _index: 1011,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["resulting", { _index: 1231, title: {}, body: { "license.html": {} } }],
      [
        "results",
        {
          _index: 27,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "todo.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["retain", { _index: 1358, title: {}, body: { "license.html": {} } }],
      [
        "return",
        {
          _index: 38,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "returns",
        {
          _index: 40,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      ["review", { _index: 760, title: {}, body: { "changelog.html": {} } }],
      ["revisions", { _index: 1253, title: {}, body: { "license.html": {} } }],
      ["rights", { _index: 1471, title: {}, body: { "license.html": {} } }],
      ["risks", { _index: 1432, title: {}, body: { "license.html": {} } }],
      [
        "root",
        {
          _index: 46,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      ["royalty", { _index: 1304, title: {}, body: { "license.html": {} } }],
      [
        "run",
        {
          _index: 129,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "rxjs",
        {
          _index: 476,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "rxjs/operators",
        {
          _index: 492,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "same",
        {
          _index: 1093,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      [
        "sample",
        {
          _index: 324,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "sampleconfig",
        {
          _index: 323,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "sampler",
        {
          _index: 321,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      ["samples", { _index: 1033, title: {}, body: { "index.html": {} } }],
      [
        "sampling",
        {
          _index: 922,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "scheduleddelaymillis",
        {
          _index: 127,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "scheme",
        {
          _index: 445,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "section",
        {
          _index: 1086,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["sections", { _index: 1183, title: {}, body: { "license.html": {} } }],
      [
        "see",
        {
          _index: 202,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
            "todo.html": {},
          },
        },
      ],
      ["sell", { _index: 1318, title: {}, body: { "license.html": {} } }],
      ["semantic", { _index: 701, title: {}, body: { "changelog.html": {} } }],
      [
        "semattrs_error_type",
        {
          _index: 489,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "semattrs_http_host",
        {
          _index: 484,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "semattrs_http_method",
        {
          _index: 486,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "semattrs_http_scheme",
        {
          _index: 483,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "semattrs_http_status_code",
        {
          _index: 488,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "semattrs_http_target",
        {
          _index: 482,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "semattrs_http_url",
        {
          _index: 485,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "semattrs_http_user_agent",
        {
          _index: 481,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "ATTR_SERVICE_NAME",
        {
          _index: 487,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["send", { _index: 1028, title: {}, body: { "index.html": {} } }],
      ["sending", { _index: 1141, title: {}, body: { "index.html": {} } }],
      ["sent", { _index: 1275, title: {}, body: { "license.html": {} } }],
      ["separable", { _index: 1260, title: {}, body: { "license.html": {} } }],
      ["separate", { _index: 1394, title: {}, body: { "license.html": {} } }],
      [
        "service",
        {
          _index: 86,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "service.namespace",
        {
          _index: 92,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "servicename",
        {
          _index: 84,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "services/exporter/exporter.interface",
        {
          _index: 495,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "services/instrumentation/instrumentation.service",
        {
          _index: 612,
          title: {},
          body: { "modules/OtelWebTracerModule.html": {} },
        },
      ],
      [
        "services/propagator/propagator.interface",
        {
          _index: 496,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "set",
        {
          _index: 469,
          title: {},
          body: {
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "setcustomspan",
        {
          _index: 434,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "setcustomspan(span",
        {
          _index: 467,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "setheaders",
        {
          _index: 570,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["shall", { _index: 1181, title: {}, body: { "license.html": {} } }],
      ["shares", { _index: 1215, title: {}, body: { "license.html": {} } }],
      ["show", { _index: 1060, title: {}, body: { "index.html": {} } }],
      [
        "simplespanexporter(sync",
        {
          _index: 99,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "simplespanprocessor",
        {
          _index: 340,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "simplespanprocessor(exporter.getexporter",
        {
          _index: 397,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "simplespanprocessor(new",
        {
          _index: 395,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "simplespanprocessor(this.exporterservice.getexporter",
        {
          _index: 581,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "single",
        {
          _index: 60,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "size",
        {
          _index: 113,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "skipself",
        {
          _index: 592,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      [
        "smaller",
        {
          _index: 119,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["software", { _index: 1228, title: {}, body: { "license.html": {} } }],
      ["sole", { _index: 1474, title: {}, body: { "license.html": {} } }],
      ["solely", { _index: 1425, title: {}, body: { "license.html": {} } }],
      [
        "source",
        {
          _index: 4,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "interfaces/B3PropagatorConfig.html": {},
            "modules/B3PropagatorModule.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/CompositePropagatorModule.html": {},
            "injectables/CompositePropagatorService.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IPropagator.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "span",
        {
          _index: 104,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "span.addevent('response",
        {
          _index: 524,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "span.end",
        {
          _index: 537,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "span.interface",
        {
          _index: 81,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
          },
        },
      ],
      [
        "span.interface.ts",
        {
          _index: 272,
          title: {},
          body: { "interfaces/CustomSpan.html": {}, "coverage.html": {} },
        },
      ],
      [
        "span.interface.ts:16",
        { _index: 282, title: {}, body: { "interfaces/CustomSpan.html": {} } },
      ],
      ["span.kind", { _index: 786, title: {}, body: { "changelog.html": {} } }],
      [
        "span.recordexception",
        {
          _index: 531,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "span.setattribute('mycustom.key",
        { _index: 1113, title: {}, body: { "index.html": {} } },
      ],
      [
        "span.setattributes",
        {
          _index: 521,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "span.setstatus",
        {
          _index: 526,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "spanexporter",
        {
          _index: 267,
          title: {},
          body: {
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "injectables/OtelcolExporterService.html": {},
            "injectables/ZipkinExporterService.html": {},
          },
        },
      ],
      [
        "spankind",
        {
          _index: 478,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "spankind.client",
        {
          _index: 555,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "spans",
        {
          _index: 115,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "spanstatuscode",
        {
          _index: 477,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "spanstatuscode.error",
        {
          _index: 536,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "spanstatuscode.unset",
        {
          _index: 528,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["special", { _index: 1445, title: {}, body: { "license.html": {} } }],
      ["specific", { _index: 1507, title: {}, body: { "license.html": {} } }],
      [
        "specify",
        {
          _index: 196,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "stack",
        {
          _index: 534,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "stackcontextmanager",
        {
          _index: 470,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["standard", { _index: 657, title: {}, body: { "changelog.html": {} } }],
      ["start", { _index: 1123, title: {}, body: { "index.html": {} } }],
      [
        "start:complete",
        { _index: 1125, title: {}, body: { "index.html": {} } },
      ],
      [
        "started",
        {
          _index: 651,
          title: {
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
            "todo.html": {},
          },
          body: { "index.html": {} },
        },
      ],
      [
        "startspan",
        {
          _index: 545,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["state", { _index: 1389, title: {}, body: { "license.html": {} } }],
      ["stated", { _index: 1315, title: {}, body: { "license.html": {} } }],
      ["statement", { _index: 1382, title: {}, body: { "license.html": {} } }],
      ["statements", { _index: 964, title: {}, body: { "coverage.html": {} } }],
      [
        "static",
        {
          _index: 206,
          title: {},
          body: {
            "injectables/B3PropagatorService.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      ["stating", { _index: 1355, title: {}, body: { "license.html": {} } }],
      [
        "status.code",
        { _index: 788, title: {}, body: { "changelog.html": {} } },
      ],
      ["stoppage", { _index: 1454, title: {}, body: { "license.html": {} } }],
      [
        "string",
        {
          _index: 58,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "strings",
        {
          _index: 167,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "subject",
        {
          _index: 949,
          title: {},
          body: { "changelog.html": {}, "license.html": {} },
        },
      ],
      ["sublicense", { _index: 1311, title: {}, body: { "license.html": {} } }],
      ["submission", { _index: 1385, title: {}, body: { "license.html": {} } }],
      ["submit", { _index: 1269, title: {}, body: { "license.html": {} } }],
      ["submitted", { _index: 1267, title: {}, body: { "license.html": {} } }],
      [
        "subsequently",
        { _index: 1293, title: {}, body: { "license.html": {} } },
      ],
      ["such", { _index: 1206, title: {}, body: { "license.html": {} } }],
      ["supersede", { _index: 1393, title: {}, body: { "license.html": {} } }],
      ["support", { _index: 1467, title: {}, body: { "license.html": {} } }],
      ["sync", { _index: 1052, title: {}, body: { "index.html": {} } }],
      ["syntax", { _index: 1495, title: {}, body: { "license.html": {} } }],
      ["systems", { _index: 1279, title: {}, body: { "license.html": {} } }],
      [
        "table",
        {
          _index: 977,
          title: {},
          body: { "coverage.html": {}, "index.html": {} },
        },
      ],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 976, title: {}, body: { "coverage.html": {} } },
      ],
      [
        "tap",
        {
          _index: 490,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["task", { _index: 1522, title: {}, body: { "todo.html": {} } }],
      [
        "telemetry/opentelemetry",
        { _index: 1057, title: {}, body: { "index.html": {} } },
      ],
      ["terminate", { _index: 1340, title: {}, body: { "license.html": {} } }],
      ["terms", { _index: 1176, title: {}, body: { "license.html": {} } }],
      [
        "test",
        {
          _index: 763,
          title: {},
          body: { "changelog.html": {}, "index.html": {} },
        },
      ],
      [
        "text",
        {
          _index: 418,
          title: {},
          body: {
            "modules/NoopTextMapPropagatorModule.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "coverage.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "textmappropagator",
        {
          _index: 41,
          title: {},
          body: {
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/B3PropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/IPropagator.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "injectables/NoopTextMapPropagatorService.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
          },
        },
      ],
      ["theory", { _index: 1436, title: {}, body: { "license.html": {} } }],
      ["there's", { _index: 1130, title: {}, body: { "index.html": {} } }],
      ["thereof", { _index: 1263, title: {}, body: { "license.html": {} } }],
      ["third", { _index: 1371, title: {}, body: { "license.html": {} } }],
      [
        "this.awsxraypropagatorservice.getpropagator",
        {
          _index: 255,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "this.b3propagatorconfig",
        {
          _index: 223,
          title: {},
          body: { "injectables/B3PropagatorService.html": {} },
        },
      ],
      [
        "this.b3propagatorservice.getpropagator",
        {
          _index: 252,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "this.config.commonconfig.console",
        {
          _index: 379,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "this.config.commonconfig.production",
        {
          _index: 579,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.config.ignoreurls?.urls",
        {
          _index: 509,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.contextmanager",
        {
          _index: 381,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "this.contextmanager._currentcontext",
        {
          _index: 561,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.contextmanager.active",
        {
          _index: 556,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.contextmanager.disable",
        {
          _index: 511,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.contextmanager.enable",
        {
          _index: 515,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.convertstringtonumber(this.config.batchspanprocessorconfig?.exporttimeoutmillis",
        {
          _index: 577,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.convertstringtonumber(this.config.batchspanprocessorconfig?.maxexportbatchsize",
        {
          _index: 575,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.convertstringtonumber(this.config.batchspanprocessorconfig?.maxqueuesize",
        {
          _index: 578,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.convertstringtonumber(this.config.batchspanprocessorconfig?.scheduleddelaymillis",
        {
          _index: 576,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.customheader",
        {
          _index: 405,
          title: {},
          body: { "injectables/JaegerHttpTracePropagatorService.html": {} },
        },
      ],
      [
        "this.customspan",
        {
          _index: 582,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.customspan.add(span",
        {
          _index: 583,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.defineprobabilitysampler(this.convertstringtonumber(config.commonconfig.probabilitysampler",
        {
          _index: 501,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.defineprobabilitysampler(this.convertstringtonumber(this.config.commonconfig.probabilitysampler",
        {
          _index: 375,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.exporterservice",
        {
          _index: 378,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.exporterservice.getexporter",
        {
          _index: 390,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "this.initspan(request",
        {
          _index: 516,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.injectcontextandheader(request",
        {
          _index: 518,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.insertconsolespanexporter",
        {
          _index: 572,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.insertconsolespanexporter(console",
        {
          _index: 392,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.insertornotspanexporter",
        {
          _index: 502,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.insertornotspanexporter(this.config.commonconfig.production",
        {
          _index: 377,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.insertspanprocessorproductionmode",
        {
          _index: 571,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.insertspanprocessorproductionmode(production",
        {
          _index: 391,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.instrumentation",
        {
          _index: 384,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.jaegerhttptracepropagatorservice.getpropagator",
        {
          _index: 254,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "this.loadresourceattributes(this.config.commonconfig",
        {
          _index: 376,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "this.logbody",
        {
          _index: 504,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.otelcolconfig",
        {
          _index: 627,
          title: {},
          body: { "injectables/OtelcolExporterService.html": {} },
        },
      ],
      [
        "this.platformlocation.href",
        {
          _index: 538,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.propagatorservice.getpropagator",
        {
          _index: 382,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "this.setcustomspan(span",
        {
          _index: 529,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.tracer",
        {
          _index: 500,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.tracer.addspanprocessor",
        {
          _index: 574,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.tracer.addspanprocessor(new",
        {
          _index: 573,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.tracer.register",
        {
          _index: 503,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "this.tracerprovider",
        {
          _index: 374,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.tracerprovider.addspanprocessor",
        {
          _index: 394,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.tracerprovider.addspanprocessor(new",
        {
          _index: 393,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.tracerprovider.register",
        {
          _index: 380,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      [
        "this.w3ctracecontextpropagatorservice.getpropagator",
        {
          _index: 253,
          title: {},
          body: { "injectables/CompositePropagatorService.html": {} },
        },
      ],
      [
        "this.zipkinconfig",
        {
          _index: 646,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      ["those", { _index: 1320, title: {}, body: { "license.html": {} } }],
      ["through", { _index: 1184, title: {}, body: { "license.html": {} } }],
      [
        "throw",
        {
          _index: 192,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "time",
        {
          _index: 143,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["timeout", { _index: 1162, title: {}, body: { "index.html": {} } }],
      [
        "timeoutmillis",
        {
          _index: 149,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["title", { _index: 1421, title: {}, body: { "license.html": {} } }],
      [
        "todo",
        { _index: 1521, title: { "todo.html": {} }, body: { "todo.html": {} } },
      ],
      [
        "token",
        {
          _index: 195,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["tort", { _index: 1437, title: {}, body: { "license.html": {} } }],
      [
        "trace",
        {
          _index: 87,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "injectables/ConsoleSpanExporterService.html": {},
            "interfaces/IExporter.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "traced",
        {
          _index: 163,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "tracedreq",
        {
          _index: 517,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["traceid", { _index: 912, title: {}, body: { "changelog.html": {} } }],
      [
        "traceidratiobasedsampler",
        {
          _index: 360,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "tracer",
        {
          _index: 331,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "tracerprovider",
        {
          _index: 302,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      ["traces", { _index: 1035, title: {}, body: { "index.html": {} } }],
      ["tracking", { _index: 1281, title: {}, body: { "license.html": {} } }],
      ["trade", { _index: 1400, title: {}, body: { "license.html": {} } }],
      ["trademark", { _index: 1359, title: {}, body: { "license.html": {} } }],
      ["trademarks", { _index: 1398, title: {}, body: { "license.html": {} } }],
      ["transfer", { _index: 1319, title: {}, body: { "license.html": {} } }],
      [
        "transformation",
        { _index: 1233, title: {}, body: { "license.html": {} } },
      ],
      [
        "translation",
        { _index: 1234, title: {}, body: { "license.html": {} } },
      ],
      ["trouble", { _index: 889, title: {}, body: { "changelog.html": {} } }],
      ["troubleshoot", { _index: 1012, title: {}, body: { "index.html": {} } }],
      [
        "true",
        {
          _index: 332,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
            "index.html": {},
          },
        },
      ],
      ["ts", { _index: 877, title: {}, body: { "changelog.html": {} } }],
      ["ts1086", { _index: 1165, title: {}, body: { "index.html": {} } }],
      ["ts2694", { _index: 1158, title: {}, body: { "index.html": {} } }],
      ["tslib", { _index: 995, title: {}, body: { "dependencies.html": {} } }],
      ["twice", { _index: 1096, title: {}, body: { "index.html": {} } }],
      [
        "two",
        {
          _index: 124,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "type",
        {
          _index: 59,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "injectables/CompositePropagatorService.html": {},
            "interfaces/CustomSpan.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "injectables/JaegerHttpTracePropagatorService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      ["type/node", { _index: 1163, title: {}, body: { "index.html": {} } }],
      ["types", { _index: 1239, title: {}, body: { "license.html": {} } }],
      ["typescript", { _index: 1169, title: {}, body: { "index.html": {} } }],
      ["typo", { _index: 959, title: {}, body: { "changelog.html": {} } }],
      [
        "umdmoduleids",
        { _index: 845, title: {}, body: { "changelog.html": {} } },
      ],
      [
        "undefined",
        {
          _index: 188,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "injectables/NoopSpanExporterService.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["under", { _index: 1197, title: {}, body: { "license.html": {} } }],
      [
        "underscore",
        {
          _index: 557,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["union", { _index: 1192, title: {}, body: { "license.html": {} } }],
      ["unless", { _index: 1387, title: {}, body: { "license.html": {} } }],
      ["unset", { _index: 789, title: {}, body: { "changelog.html": {} } }],
      ["unused", { _index: 945, title: {}, body: { "changelog.html": {} } }],
      ["up", { _index: 1136, title: {}, body: { "index.html": {} } }],
      ["update", { _index: 731, title: {}, body: { "changelog.html": {} } }],
      ["upgrade", { _index: 886, title: {}, body: { "changelog.html": {} } }],
      ["upgrate", { _index: 875, title: {}, body: { "changelog.html": {} } }],
      [
        "url",
        {
          _index: 135,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "injectables/OtelcolExporterService.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "url(request.urlwithparams",
        {
          _index: 541,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "url(this.geturl",
        {
          _index: 542,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "urlrequest",
        {
          _index: 539,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "urlrequest.host",
        {
          _index: 549,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "urlrequest.pathname",
        {
          _index: 551,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "urlrequest.protocol.replace",
        {
          _index: 550,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "urlrequest.search",
        {
          _index: 552,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      [
        "urls",
        {
          _index: 158,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "use",
        {
          _index: 97,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "useclass",
        {
          _index: 24,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "modules/B3PropagatorModule.html": {},
            "modules/CompositePropagatorModule.html": {},
            "modules/ConsoleSpanExporterModule.html": {},
            "modules/JaegerHttpTracePropagatorModule.html": {},
            "modules/NoopSpanExporterModule.html": {},
            "modules/NoopTextMapPropagatorModule.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelColExporterModule.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
          },
        },
      ],
      ["used", { _index: 1082, title: {}, body: { "index.html": {} } }],
      ["useexisting", { _index: 1108, title: {}, body: { "index.html": {} } }],
      [
        "usefactory",
        {
          _index: 617,
          title: {},
          body: { "modules/OtelWebTracerModule.html": {} },
        },
      ],
      ["useless", { _index: 739, title: {}, body: { "changelog.html": {} } }],
      ["user", { _index: 861, title: {}, body: { "changelog.html": {} } }],
      ["uses", { _index: 1003, title: {}, body: { "index.html": {} } }],
      [
        "usevalue",
        {
          _index: 190,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["using", { _index: 1429, title: {}, body: { "license.html": {} } }],
      [
        "value",
        {
          _index: 65,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "injectables/B3PropagatorService.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "injectables/InstrumentationService.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "changelog.html": {},
            "index.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "valueprovider",
        {
          _index: 73,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "modules/OpenTelemetryInterceptorModule.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "modules/OtelWebTracerModule.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["variable", { _index: 970, title: {}, body: { "coverage.html": {} } }],
      [
        "variables",
        {
          _index: 1526,
          title: { "miscellaneous/variables.html": {} },
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["verbal", { _index: 1272, title: {}, body: { "license.html": {} } }],
      [
        "verify",
        {
          _index: 335,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "version",
        {
          _index: 658,
          title: {},
          body: {
            "changelog.html": {},
            "license.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "version.json",
        {
          _index: 494,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["via", { _index: 1050, title: {}, body: { "index.html": {} } }],
      [
        "void",
        {
          _index: 327,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
          },
        },
      ],
      [
        "w3c",
        {
          _index: 241,
          title: {},
          body: {
            "injectables/CompositePropagatorService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
          },
        },
      ],
      [
        "w3ctracecontext",
        { _index: 1073, title: {}, body: { "index.html": {} } },
      ],
      [
        "w3ctracecontextpropagator",
        {
          _index: 635,
          title: {},
          body: { "injectables/W3CTraceContextPropagatorService.html": {} },
        },
      ],
      [
        "w3ctracecontextpropagatormodule",
        {
          _index: 633,
          title: { "modules/W3CTraceContextPropagatorModule.html": {} },
          body: {
            "modules/W3CTraceContextPropagatorModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "w3ctracecontextpropagatorservice",
        {
          _index: 235,
          title: { "injectables/W3CTraceContextPropagatorService.html": {} },
          body: {
            "injectables/CompositePropagatorService.html": {},
            "modules/W3CTraceContextPropagatorModule.html": {},
            "injectables/W3CTraceContextPropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "wait",
        {
          _index: 146,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "index.html": {},
          },
        },
      ],
      ["want", { _index: 1129, title: {}, body: { "index.html": {} } }],
      ["warn", { _index: 1104, title: {}, body: { "index.html": {} } }],
      ["warning", { _index: 1013, title: {}, body: { "index.html": {} } }],
      ["warranties", { _index: 1417, title: {}, body: { "license.html": {} } }],
      ["warranty", { _index: 1411, title: {}, body: { "license.html": {} } }],
      [
        "web",
        {
          _index: 361,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "webtracer.module.ts",
        {
          _index: 609,
          title: {},
          body: {
            "modules/OtelWebTracerModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "webtracer.module.ts:38",
        {
          _index: 610,
          title: {},
          body: { "modules/OtelWebTracerModule.html": {} },
        },
      ],
      [
        "webtracerprovider",
        {
          _index: 346,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "interceptors/OpenTelemetryHttpInterceptor.html": {},
            "index.html": {},
          },
        },
      ],
      ["wherever", { _index: 1370, title: {}, body: { "license.html": {} } }],
      ["whether", { _index: 1207, title: {}, body: { "license.html": {} } }],
      ["whole", { _index: 1257, title: {}, body: { "license.html": {} } }],
      [
        "window.navigator.useragent",
        {
          _index: 553,
          title: {},
          body: { "interceptors/OpenTelemetryHttpInterceptor.html": {} },
        },
      ],
      ["within", { _index: 1295, title: {}, body: { "license.html": {} } }],
      [
        "without",
        {
          _index: 1140,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["work", { _index: 1240, title: {}, body: { "license.html": {} } }],
      [
        "works",
        {
          _index: 934,
          title: {},
          body: { "changelog.html": {}, "index.html": {}, "license.html": {} },
        },
      ],
      ["worldwide", { _index: 1300, title: {}, body: { "license.html": {} } }],
      ["writing", { _index: 1290, title: {}, body: { "license.html": {} } }],
      ["written", { _index: 1273, title: {}, body: { "license.html": {} } }],
      ["x", { _index: 1076, title: {}, body: { "index.html": {} } }],
      ["xml", { _index: 1024, title: {}, body: { "index.html": {} } }],
      [
        "xmlhttprequestinstrumentation",
        { _index: 1089, title: {}, body: { "index.html": {} } },
      ],
      [
        "xray",
        {
          _index: 8,
          title: {},
          body: {
            "modules/AwsXrayPropagatorModule.html": {},
            "injectables/AwsXrayPropagatorService.html": {},
            "injectables/CompositePropagatorService.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["xsrf", { _index: 951, title: {}, body: { "changelog.html": {} } }],
      [
        "xxx/fesm2015/jufab",
        { _index: 1142, title: {}, body: { "index.html": {} } },
      ],
      [
        "yes",
        {
          _index: 590,
          title: {},
          body: {
            "modules/OpenTelemetryInterceptorModule.html": {},
            "modules/OtelWebTracerModule.html": {},
          },
        },
      ],
      ["you're", { _index: 1094, title: {}, body: { "index.html": {} } }],
      ["yyyy", { _index: 1502, title: {}, body: { "license.html": {} } }],
      [
        "zipkin",
        {
          _index: 150,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "changelog.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "zipkincollectorconfig",
        {
          _index: 151,
          title: { "interfaces/ZipkinCollectorConfig.html": {} },
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "coverage.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "zipkinconfig",
        {
          _index: 172,
          title: {},
          body: {
            "interfaces/B3PropagatorConfig.html": {},
            "interfaces/BatchSpanProcessorConfig.html": {},
            "interfaces/CommonCollectorConfig.html": {},
            "interfaces/IgnoreUrlsConfig.html": {},
            "interfaces/JaegerPropagatorConfig.html": {},
            "interfaces/OpenTelemetryConfig.html": {},
            "interfaces/OtelCollectorConfig.html": {},
            "interfaces/ZipkinCollectorConfig.html": {},
            "injectables/ZipkinExporterService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "zipkinexporter",
        {
          _index: 642,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      [
        "zipkinexporter(this.zipkinconfig",
        {
          _index: 649,
          title: {},
          body: { "injectables/ZipkinExporterService.html": {} },
        },
      ],
      [
        "zipkinexportermodule",
        {
          _index: 637,
          title: { "modules/ZipkinExporterModule.html": {} },
          body: {
            "modules/ZipkinExporterModule.html": {},
            "index.html": {},
            "modules.html": {},
          },
        },
      ],
      [
        "zipkinexporterservice",
        {
          _index: 639,
          title: { "injectables/ZipkinExporterService.html": {} },
          body: {
            "modules/ZipkinExporterModule.html": {},
            "injectables/ZipkinExporterService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "zone",
        {
          _index: 349,
          title: {},
          body: {
            "injectables/InstrumentationService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "zone.js",
        { _index: 997, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "zonecontextmanager",
        {
          _index: 345,
          title: {},
          body: { "injectables/InstrumentationService.html": {} },
        },
      ],
      ["zoom", { _index: 1515, title: {}, body: { "overview.html": {} } }],
    ],
    pipeline: ["stemmer"],
  },
  store: {
    "modules/AwsXrayPropagatorModule.html": {
      url: "modules/AwsXrayPropagatorModule.html",
      title: "module - AwsXrayPropagatorModule",
      body: "\n                   \n\n\n\n\n    Modules\n    AwsXrayPropagatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/aws-xray-propagator/aws-xray-propagator.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { OTEL_PROPAGATOR } from '../propagator.interface';\nimport { AwsXrayPropagatorService } from './aws-xray-propagator.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_PROPAGATOR, useClass: AwsXrayPropagatorService }\n  ]\n})\nexport class AwsXrayPropagatorModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/AwsXrayPropagatorService.html": {
      url: "injectables/AwsXrayPropagatorService.html",
      title: "injectable - AwsXrayPropagatorService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AwsXrayPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/aws-xray-propagator/aws-xray-propagator.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AwsXrayPropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPropagator\n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/aws-xray-propagator/aws-xray-propagator.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return an AwsXrayPropagator\n\n\n                        \n                            Returns :     TextMapPropagator\n\n                        \n                            \n                                TextMapPropagator as AwsXrayPropagator\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from '../propagator.interface';\nimport { TextMapPropagator } from '@opentelemetry/api';\nimport { AWSXRayPropagator } from '@opentelemetry/propagator-aws-xray';\n/**\n * AwsXrayPropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AwsXrayPropagatorService implements IPropagator {\n  /**\n   * Return an AwsXrayPropagator\n   *\n   * @return TextMapPropagator as AwsXrayPropagator\n   */\n  getPropagator(): TextMapPropagator {\n    return new AWSXRayPropagator();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/B3PropagatorConfig.html": {
      url: "interfaces/B3PropagatorConfig.html",
      title: "interface - B3PropagatorConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  B3PropagatorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for B3PropagatorConfig\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            multiHeader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        multiHeader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        multiHeader:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Single or Multi Header for b3propagator (default: multi)\nValue : 'O' (single), '1' (multi)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/B3PropagatorModule.html": {
      url: "modules/B3PropagatorModule.html",
      title: "module - B3PropagatorModule",
      body: "\n                   \n\n\n\n\n    Modules\n    B3PropagatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator/b3-propagator.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { B3PropagatorService } from './b3-propagator.service';\nimport { OTEL_PROPAGATOR } from '../propagator.interface';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_PROPAGATOR, useClass: B3PropagatorService }\n  ]\n})\nexport class B3PropagatorModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/B3PropagatorService.html": {
      url: "injectables/B3PropagatorService.html",
      title: "injectable - B3PropagatorService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  B3PropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator/b3-propagator.service.ts\n        \n\n\n            \n                Description\n            \n            \n                B3PropagatorService\nCan be a single or multi header.\nSee Configuration for more information\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                b3PropagatorConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                defineB3Encoding\n                            \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator/b3-propagator.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        defineB3Encoding\n                        \n                    \n                \n            \n            \n                \n                        \n                    defineB3Encoding(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator/b3-propagator.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Define if it's a single or multi header\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string (0 => single header, 1 => Multi Header)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     B3InjectEncoding\n\n                        \n                            \n                                B3InjectEncoding\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPropagator\n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator/b3-propagator.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Return an B3Propagator\n\n\n                        \n                            Returns :     TextMapPropagator\n\n                        \n                            \n                                TextMapPropagator as B3Propagator\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        b3PropagatorConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         B3PropagatorConfig\n\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator/b3-propagator.service.ts:24\n                        \n                    \n\n            \n                \n                    B3PropagatorConfig\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IPropagator } from '../propagator.interface';\nimport { TextMapPropagator } from '@opentelemetry/api';\nimport { B3Propagator, B3PropagatorConfig, B3InjectEncoding } from '@opentelemetry/propagator-b3';\nimport {\n  OpenTelemetryConfig,\n  OTEL_CONFIG,\n} from '../../../configuration/opentelemetry-config';\n\n/**\n * B3PropagatorService\n *\n * Can be a single or multi header.\n *\n * See Configuration for more information\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class B3PropagatorService implements IPropagator {\n  /**\n   * B3PropagatorConfig\n   */\n  private b3PropagatorConfig: B3PropagatorConfig;\n\n  /**\n   * Constructor\n   *\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OTEL_CONFIG) config: OpenTelemetryConfig) {\n    this.b3PropagatorConfig = {\n      injectEncoding: B3PropagatorService.defineB3Encoding(config.b3PropagatorConfig?.multiHeader)\n    };\n  }\n\n  /**\n   * Define if it's a single or multi header\n   *\n   * @param value string (0 => single header, 1 => Multi Header)\n   * @return B3InjectEncoding\n   */\n  private static defineB3Encoding(value: string): B3InjectEncoding {\n    if (value && '0' === value) {\n      return B3InjectEncoding.SINGLE_HEADER;\n    }\n    return B3InjectEncoding.MULTI_HEADER;\n  }\n\n  /**\n   * Return an B3Propagator\n   *\n   * @return TextMapPropagator as B3Propagator\n   */\n  getPropagator(): TextMapPropagator {\n    return new B3Propagator(this.b3PropagatorConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/BatchSpanProcessorConfig.html": {
      url: "interfaces/BatchSpanProcessorConfig.html",
      title: "interface - BatchSpanProcessorConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BatchSpanProcessorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                BatchSpanExporter Configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            exportTimeoutMillis\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxExportBatchSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxQueueSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scheduledDelayMillis\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exportTimeoutMillis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exportTimeoutMillis:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    How long the export can run before it is cancelled\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxExportBatchSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxExportBatchSize:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The maximum batch size of every export. It must be smaller or equal to maxQueueSize.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxQueueSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxQueueSize:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The maximum queue size. After the size is reached spans are dropped.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheduledDelayMillis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheduledDelayMillis:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The interval between two consecutive exports\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/CommonCollectorConfig.html": {
      url: "interfaces/CommonCollectorConfig.html",
      title: "interface - CommonCollectorConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommonCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Common configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            console\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logBody\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logLevel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            probabilitySampler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            production\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            resourceAttributes\n                                        \n                                \n                                \n                                        \n                                            serviceName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        console\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        console:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    console : boolean to trace in console\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logBody:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    log or not body response in span\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logLevel:     DiagLogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DiagLogLevel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    log level for opentelemetry\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        probabilitySampler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        probabilitySampler:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    probabilitySampler\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        production:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resourceAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resourceAttributes:     Partial>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Partial>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    resourceAttributes: Extra resource attribute like service.namespace ...\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serviceName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        serviceName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    serviceName : Name of service in trace\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/CompositePropagatorModule.html": {
      url: "modules/CompositePropagatorModule.html",
      title: "module - CompositePropagatorModule",
      body: "\n                   \n\n\n\n\n    Modules\n    CompositePropagatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator/composite-propagator.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CompositePropagatorService } from './composite-propagator.service';\nimport { OTEL_PROPAGATOR } from '../propagator.interface';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_PROPAGATOR, useClass: CompositePropagatorService }\n  ]\n})\nexport class  CompositePropagatorModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/CompositePropagatorService.html": {
      url: "injectables/CompositePropagatorService.html",
      title: "injectable - CompositePropagatorService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CompositePropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator/composite-propagator.service.ts\n        \n\n\n            \n                Description\n            \n            \n                CompositePropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(b3PropagatorService: B3PropagatorService, w3cTraceContextPropagatorService: W3CTraceContextPropagatorService, jaegerHttpTracePropagatorService: JaegerHttpTracePropagatorService, awsXrayPropagatorService: AwsXrayPropagatorService)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator/composite-propagator.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        b3PropagatorService\n                                                  \n                                                        \n                                                                        B3PropagatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        w3cTraceContextPropagatorService\n                                                  \n                                                        \n                                                                        W3CTraceContextPropagatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jaegerHttpTracePropagatorService\n                                                  \n                                                        \n                                                                        JaegerHttpTracePropagatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        awsXrayPropagatorService\n                                                  \n                                                        \n                                                                        AwsXrayPropagatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPropagator\n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator/composite-propagator.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Return an CompositePropagator\n\n\n                        \n                            Returns :     TextMapPropagator\n\n                        \n                            \n                                TextMapPropagator as CompositePropagator\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IPropagator } from '../propagator.interface';\nimport { TextMapPropagator } from '@opentelemetry/api';\nimport { CompositePropagator } from '@opentelemetry/core';\nimport { B3PropagatorService } from '../b3-propagator/b3-propagator.service';\nimport { W3CTraceContextPropagatorService } from '../w3c-trace-context-propagator/w3c-trace-context-propagator.service';\nimport { JaegerHttpTracePropagatorService } from '../jaeger-http-trace-propagator/jaeger-http-trace-propagator.service';\nimport { AwsXrayPropagatorService } from '../aws-xray-propagator/aws-xray-propagator.service';\n/**\n * CompositePropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CompositePropagatorService implements IPropagator {\n  /**\n   * Constructor\n   */\n  constructor(\n    @Inject(B3PropagatorService)\n    private b3PropagatorService: B3PropagatorService,\n    @Inject(W3CTraceContextPropagatorService)\n    private w3cTraceContextPropagatorService: W3CTraceContextPropagatorService,\n    @Inject(JaegerHttpTracePropagatorService)\n    private jaegerHttpTracePropagatorService: JaegerHttpTracePropagatorService,\n    @Inject(AwsXrayPropagatorService)\n    private awsXrayPropagatorService: AwsXrayPropagatorService\n  ) {}\n\n  /**\n   * Return an CompositePropagator\n   *\n   * @return TextMapPropagator as CompositePropagator\n   */\n  getPropagator(): TextMapPropagator {\n    return new CompositePropagator({\n      propagators: [\n        this.b3PropagatorService.getPropagator(),\n        this.w3cTraceContextPropagatorService.getPropagator(),\n        this.jaegerHttpTracePropagatorService.getPropagator(),\n        this.awsXrayPropagatorService.getPropagator()\n      ],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/ConsoleSpanExporterModule.html": {
      url: "modules/ConsoleSpanExporterModule.html",
      title: "module - ConsoleSpanExporterModule",
      body: "\n                   \n\n\n\n\n    Modules\n    ConsoleSpanExporterModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/console/console-span-exporter.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ConsoleSpanExporterService } from './console-span-exporter.service';\nimport { OTEL_EXPORTER } from '../exporter.interface';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_EXPORTER, useClass: ConsoleSpanExporterService }\n  ]\n})\nexport class ConsoleSpanExporterModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/ConsoleSpanExporterService.html": {
      url: "injectables/ConsoleSpanExporterService.html",
      title: "injectable - ConsoleSpanExporterService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConsoleSpanExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/console/console-span-exporter.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ConsoleSpanExporterService\nA default span exporter\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getExporter\n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/console/console-span-exporter.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Return a ConsoleSpanExporter\n\n\n                        \n                            Returns :     SpanExporter\n\n                        \n                            \n                                SpanExporter\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IExporter } from '../exporter.interface';\nimport { SpanExporter, ConsoleSpanExporter } from '@opentelemetry/sdk-trace-base';\n\n/**\n * ConsoleSpanExporterService\n * A default span exporter\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConsoleSpanExporterService implements IExporter {\n  /**\n   * Return a ConsoleSpanExporter\n   *\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return new ConsoleSpanExporter();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/CustomSpan.html": {
      url: "interfaces/CustomSpan.html",
      title: "interface - CustomSpan",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomSpan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/interceptor/custom-span.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface Injected in HttpInterceptor to add attributes in a Span.\nImplements this interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        add\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(span: Span, request: HttpRequest<>, response: HttpResponse<> | HttpErrorResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/custom-span.interface.ts:16\n                        \n                    \n\n\n            \n                \n                        To add Attributes in a Span during interception.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                span\n                                            \n                                                        Span\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Span\n\n                                            \n                                        \n                                        \n                                                request\n                                            \n                                                        HttpRequest<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    an HttpRequest\n\n                                            \n                                        \n                                        \n                                                response\n                                            \n                                                        HttpResponse<> | HttpErrorResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    an HttpResponse\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Span\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpErrorResponse, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Span } from '@opentelemetry/api';\n\n/**\n * Interface Injected in HttpInterceptor to add attributes in a Span.\n * Implements this interface\n */\nexport interface CustomSpan {\n  /**\n   * To add Attributes in a Span during interception.\n   *\n   * @param span Span\n   * @param request an HttpRequest\n   * @param response an HttpResponse\n   */\n  add(span: Span, request: HttpRequest, response: HttpResponse | HttpErrorResponse): Span;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/IExporter.html": {
      url: "interfaces/IExporter.html",
      title: "interface - IExporter",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Exporter interface to define a default exporter\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getExporter\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getExporter\n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts:13\n                        \n                    \n\n\n            \n                \n                        give an inmplementation of SpanExporter\n\n\n                        \n                            Returns :     SpanExporter\n\n                        \n                            \n                                SpanExporter\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport { SpanExporter } from '@opentelemetry/sdk-trace-base';\n\n/**\n * Exporter interface to define a default exporter\n */\nexport interface IExporter {\n  /**\n   * give an inmplementation of SpanExporter\n   *\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter;\n}\n\n/** injection for a Exporter */\nexport const OTEL_EXPORTER = new InjectionToken('otelcol.exporter');\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/IPropagator.html": {
      url: "interfaces/IPropagator.html",
      title: "interface - IPropagator",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPropagator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface to define propagator\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getPropagator\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPropagator\n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts:13\n                        \n                    \n\n\n            \n                \n                        give an implementation of a propagator\n\n\n                        \n                            Returns :     TextMapPropagator\n\n                        \n                            \n                                HttpTextPropagator\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport { TextMapPropagator } from '@opentelemetry/api';\n\n/**\n * Interface to define propagator\n */\nexport interface IPropagator {\n  /**\n   * give an implementation of a propagator\n   *\n   * @return HttpTextPropagator\n   */\n  getPropagator(): TextMapPropagator;\n}\n\n/** injection for a propagator */\nexport const OTEL_PROPAGATOR = new InjectionToken('otelcol.propagator');\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/IgnoreUrlsConfig.html": {
      url: "interfaces/IgnoreUrlsConfig.html",
      title: "interface - IgnoreUrlsConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IgnoreUrlsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for IgnoreUrlsConfig\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            urls\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        urls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        urls:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    URLs that partially match any regex in ignoreUrls will not be traced.\nIn addition, URLs that are exact matches of strings in ignoreUrls will\nalso not be traced.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/InstrumentationService.html": {
      url: "injectables/InstrumentationService.html",
      title: "injectable - InstrumentationService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InstrumentationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                InstrumentationService.\nService for component to add instrumentation.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                contextManager\n                            \n                            \n                                    Private\n                                tracerProvider\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                convertStringToNumber\n                            \n                            \n                                    Private\n                                defineProbabilitySampler\n                            \n                            \n                                    Public\n                                initInstrumentation\n                            \n                            \n                                    Private\n                                insertConsoleSpanExporter\n                            \n                            \n                                    Private\n                                insertOrNotSpanExporter\n                            \n                            \n                                    Private\n                                insertSpanProcessorProductionMode\n                            \n                            \n                                    Private\n                                loadResourceAttributes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig, exporterService: IExporter, propagatorService: IPropagator, instrumentation: Instrumentation[])\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:38\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exporterService\n                                                  \n                                                        \n                                                                        IExporter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        propagatorService\n                                                  \n                                                        \n                                                                        IPropagator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        instrumentation\n                                                  \n                                                        \n                                                                    Instrumentation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        convertStringToNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertStringToNumber(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:141\n                        \n                    \n\n\n            \n                \n                        convert String to Number (or undefined)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                number or undefined\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defineProbabilitySampler\n                        \n                    \n                \n            \n            \n                \n                        \n                    defineProbabilitySampler(sampleConfig: number)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:151\n                        \n                    \n\n\n            \n                \n                        define the Probability Sampler\nBy Default, it's always (or 1)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sampleConfig\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the sample configuration\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Sampler\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initInstrumentation\n                        \n                    \n                \n            \n            \n                \n                        \n                    initInstrumentation()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Init instrumentation on init\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        insertConsoleSpanExporter\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertConsoleSpanExporter(console: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Insert in tracer the console span if config is true\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                console\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    config to insert console span\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        insertOrNotSpanExporter\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertOrNotSpanExporter(production: boolean, exporter: IExporter, console: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Verify to insert or not a Span Exporter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                production\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                exporter\n                                            \n                                                            IExporter\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                console\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        insertSpanProcessorProductionMode\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertSpanProcessorProductionMode(production: boolean, exporter: IExporter)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Insert BatchSpanProcessor in production mode\nSimpleSpanProcessor otherwise\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                production\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                exporter\n                                            \n                                                            IExporter\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadResourceAttributes\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadResourceAttributes(commonConfig: CommonCollectorConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Generate Resource Attributes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                commonConfig\n                                            \n                                                            CommonCollectorConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Resource\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        contextManager\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ZoneContextManager()\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:38\n                        \n                    \n\n            \n                \n                    contextManager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tracerProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebTracerProvider\n\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts:33\n                        \n                    \n\n            \n                \n                    tracerProvider\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { ZoneContextManager } from '@opentelemetry/context-zone-peer-dep';\nimport { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '@opentelemetry/resources';\nimport { Instrumentation, registerInstrumentations } from '@opentelemetry/instrumentation';\nimport {\n  AlwaysOffSampler,\n  AlwaysOnSampler,\n  ParentBasedSampler,\n  Sampler,\n  TraceIdRatioBasedSampler,\n  WebTracerProvider\n} from '@opentelemetry/sdk-trace-web';\nimport { ConsoleSpanExporter, SimpleSpanProcessor, BatchSpanProcessor, NoopSpanProcessor } from '@opentelemetry/sdk-trace-base';\n// eslint-disable-next-line max-len\nimport { OTEL_CONFIG, OpenTelemetryConfig, OTEL_INSTRUMENTATION_PLUGINS, CommonCollectorConfig } from '../../configuration/opentelemetry-config';\nimport { OTEL_EXPORTER, IExporter } from '../exporter/exporter.interface';\nimport { OTEL_PROPAGATOR, IPropagator } from '../propagator/propagator.interface';\n\n\n/**\n * InstrumentationService.\n * Service for component to add instrumentation.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class InstrumentationService {\n\n  /**\n   * tracerProvider\n   */\n  private tracerProvider: WebTracerProvider;\n\n  /**\n   * contextManager\n   */\n  private contextManager = new ZoneContextManager();\n\n  /**\n   * Constructor\n   *\n   * @param config\n   * @param exporterService\n   * @param propagatorService\n   */\n  constructor(@Inject(OTEL_CONFIG) private config: OpenTelemetryConfig,\n    @Inject(OTEL_EXPORTER)\n    private exporterService: IExporter,\n    @Inject(OTEL_PROPAGATOR)\n    private propagatorService: IPropagator,\n    @Inject(OTEL_INSTRUMENTATION_PLUGINS)\n    private instrumentation: Instrumentation[]) {\n    this.tracerProvider = new WebTracerProvider({\n      sampler: this.defineProbabilitySampler(this.convertStringToNumber(this.config.commonConfig.probabilitySampler)),\n      resource: this.loadResourceAttributes(this.config.commonConfig),\n    });\n  }\n\n  /**\n   * Init instrumentation on init\n   */\n  public initInstrumentation() {\n    this.insertOrNotSpanExporter(this.config.commonConfig.production, this.exporterService, this.config.commonConfig.console);\n\n    this.tracerProvider.register({\n      contextManager: this.contextManager,\n      propagator: this.propagatorService.getPropagator()\n    });\n\n    registerInstrumentations({\n      instrumentations: this.instrumentation,\n      tracerProvider: this.tracerProvider,\n    });\n  }\n\n  /**\n   * Generate Resource Attributes\n   */\n  private loadResourceAttributes(commonConfig: CommonCollectorConfig): Resource {\n    let resourceAttributes = Resource.default().merge(\n      new Resource({\n        [ATTR_SERVICE_NAME]: commonConfig.serviceName,\n      })\n    );\n    if (commonConfig.resourceAttributes !== undefined) {\n      resourceAttributes = resourceAttributes.merge(new Resource(commonConfig.resourceAttributes));\n    }\n    return resourceAttributes;\n  }\n\n  /**\n   * Verify to insert or not a Span Exporter\n   */\n  private insertOrNotSpanExporter(production: boolean, exporter: IExporter, console: boolean) {\n    if (this.exporterService.getExporter() !== undefined) {\n      this.insertSpanProcessorProductionMode(production, exporter);\n      this.insertConsoleSpanExporter(console);\n    } else {\n      this.tracerProvider.addSpanProcessor(new NoopSpanProcessor());\n    }\n  }\n\n  /**\n   * Insert in tracer the console span if config is true\n   *\n   * @param console config to insert console span\n   */\n  private insertConsoleSpanExporter(console: boolean) {\n    if (console) {\n      this.tracerProvider.addSpanProcessor(\n        new SimpleSpanProcessor(new ConsoleSpanExporter())\n      );\n    }\n  }\n\n  /**\n   * Insert BatchSpanProcessor in production mode\n   * SimpleSpanProcessor otherwise\n   *\n   * @param boolean production\n   * @param IExporter exporter\n   */\n  private insertSpanProcessorProductionMode(\n    production: boolean,\n    exporter: IExporter\n  ) {\n    this.tracerProvider.addSpanProcessor(\n      production\n        ? new BatchSpanProcessor(exporter.getExporter())\n        : new SimpleSpanProcessor(exporter.getExporter())\n    );\n  }\n\n  /**\n   * convert String to Number (or undefined)\n   *\n   * @param value\n   * @returns number or undefined\n   */\n  private convertStringToNumber(value: string): number {\n    return value !== undefined ? Number(value) : undefined;\n  }\n\n  /**\n   * define the Probability Sampler\n   * By Default, it's always (or 1)\n   *\n   * @param sampleConfig the sample configuration\n   */\n  private defineProbabilitySampler(sampleConfig: number): Sampler {\n    if (sampleConfig >= 1) {\n      return new ParentBasedSampler({ root: new AlwaysOnSampler() });\n    }\n    else if (sampleConfig \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/JaegerHttpTracePropagatorModule.html": {
      url: "modules/JaegerHttpTracePropagatorModule.html",
      title: "module - JaegerHttpTracePropagatorModule",
      body: "\n                   \n\n\n\n\n    Modules\n    JaegerHttpTracePropagatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/jaeger-http-trace-propagator/jaeger-http-trace-propagator.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { JaegerHttpTracePropagatorService } from './jaeger-http-trace-propagator.service';\nimport { OTEL_PROPAGATOR } from '../propagator.interface';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_PROPAGATOR, useClass: JaegerHttpTracePropagatorService }\n  ]\n})\nexport class JaegerHttpTracePropagatorModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/JaegerHttpTracePropagatorService.html": {
      url: "injectables/JaegerHttpTracePropagatorService.html",
      title: "injectable - JaegerHttpTracePropagatorService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JaegerHttpTracePropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/jaeger-http-trace-propagator/jaeger-http-trace-propagator.service.ts\n        \n\n\n            \n                Description\n            \n            \n                JaegerHttpTracePropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                customHeader\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/jaeger-http-trace-propagator/jaeger-http-trace-propagator.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPropagator\n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/jaeger-http-trace-propagator/jaeger-http-trace-propagator.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Return an JaegerPropagator\n\n\n                        \n                            Returns :     TextMapPropagator\n\n                        \n                            \n                                TextMapPropagator as JaegerPropagator\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        customHeader\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/jaeger-http-trace-propagator/jaeger-http-trace-propagator.service.ts:18\n                        \n                    \n\n            \n                \n                    custom Header\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IPropagator } from '../propagator.interface';\nimport { TextMapPropagator } from '@opentelemetry/api';\nimport { JaegerPropagator } from '@opentelemetry/propagator-jaeger';\nimport { OTEL_CONFIG } from '../../../configuration/opentelemetry-config';\nimport { OpenTelemetryConfig } from '../../../../public-api';\n\n/**\n * JaegerHttpTracePropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JaegerHttpTracePropagatorService implements IPropagator {\n  /**\n   * custom Header\n   */\n  private customHeader: string;\n  /**\n   * Constructor\n   *\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OTEL_CONFIG) config: OpenTelemetryConfig) {\n    this.customHeader = config.jaegerPropagatorConfig?.customHeader;\n  }\n\n  /**\n   * Return an JaegerPropagator\n   *\n   * @return TextMapPropagator as JaegerPropagator\n   */\n  getPropagator(): TextMapPropagator {\n    return new JaegerPropagator(this.customHeader);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/JaegerPropagatorConfig.html": {
      url: "interfaces/JaegerPropagatorConfig.html",
      title: "interface - JaegerPropagatorConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JaegerPropagatorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for JaegerPropagatorConfig\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customHeader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customHeader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customHeader:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A custom Header for the propagator\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/NoopSpanExporterModule.html": {
      url: "modules/NoopSpanExporterModule.html",
      title: "module - NoopSpanExporterModule",
      body: "\n                   \n\n\n\n\n    Modules\n    NoopSpanExporterModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/noop-exporter/noop-span-exporter.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NoopSpanExporterService } from './noop-span-exporter.service';\nimport { OTEL_EXPORTER } from '../exporter.interface';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    { provide: OTEL_EXPORTER, useClass: NoopSpanExporterService }\n  ]\n})\nexport class NoopSpanExporterModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/NoopSpanExporterService.html": {
      url: "injectables/NoopSpanExporterService.html",
      title: "injectable - NoopSpanExporterService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoopSpanExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/noop-exporter/noop-span-exporter.service.ts\n        \n\n\n            \n                Description\n            \n            \n                NoopSpanExporterService\nA No-op span exporter\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getExporter\n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/noop-exporter/noop-span-exporter.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Return undefined\n\n\n                        \n                            Returns :     SpanExporter\n\n                        \n                            \n                                SpanExporter\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IExporter } from '../exporter.interface';\nimport { SpanExporter } from '@opentelemetry/sdk-trace-base';\n\n/**\n * NoopSpanExporterService\n * A No-op span exporter\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NoopSpanExporterService implements IExporter {\n  /**\n   * Return undefined\n   *\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/NoopTextMapPropagatorModule.html": {
      url: "modules/NoopTextMapPropagatorModule.html",
      title: "module - NoopTextMapPropagatorModule",
      body: "\n                   \n\n\n\n\n    Modules\n    NoopTextMapPropagatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/noop-http-text-propagator/noop-text-map-propagator.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NoopTextMapPropagatorService } from './noop-text-map-propagator.service';\nimport { OTEL_PROPAGATOR } from '../propagator.interface';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_PROPAGATOR, useClass: NoopTextMapPropagatorService }\n  ]\n})\nexport class NoopTextMapPropagatorModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/NoopTextMapPropagatorService.html": {
      url: "injectables/NoopTextMapPropagatorService.html",
      title: "injectable - NoopTextMapPropagatorService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoopTextMapPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/noop-http-text-propagator/noop-text-map-propagator.service.ts\n        \n\n\n            \n                Description\n            \n            \n                NoopHttpTextPropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPropagator\n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/noop-http-text-propagator/noop-text-map-propagator.service.ts:16\n                        \n                    \n\n\n            \n                \n                        Return null\n\n\n                        \n                            Returns :     TextMapPropagator\n\n                        \n                            \n                                TextMapPropagator as null\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from '../propagator.interface';\nimport { TextMapPropagator } from '@opentelemetry/api';\n/**\n * NoopHttpTextPropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NoopTextMapPropagatorService implements IPropagator {\n  /**\n   * Return null\n   *\n   * @return TextMapPropagator as null\n   */\n  getPropagator(): TextMapPropagator {\n    return null;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/OpenTelemetryConfig.html": {
      url: "interfaces/OpenTelemetryConfig.html",
      title: "interface - OpenTelemetryConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpenTelemetryConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                OpenTelemetryConfig\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            b3PropagatorConfig\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            batchSpanProcessorConfig\n                                        \n                                \n                                \n                                        \n                                            commonConfig\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreUrls\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            jaegerPropagatorConfig\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            otelcolConfig\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zipkinConfig\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        b3PropagatorConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        b3PropagatorConfig:         B3PropagatorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         B3PropagatorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    b3PropagatorConfig\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        batchSpanProcessorConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        batchSpanProcessorConfig:         BatchSpanProcessorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BatchSpanProcessorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    batchSpanProcessorConfig\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commonConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        commonConfig:         CommonCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CommonCollectorConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    commonConfig\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreUrls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreUrls:         IgnoreUrlsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IgnoreUrlsConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ignoreUrls\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jaegerPropagatorConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jaegerPropagatorConfig:         JaegerPropagatorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JaegerPropagatorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    jaegerPropagatorConfig\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otelcolConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        otelcolConfig:         OtelCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OtelCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    otelcolConfig\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zipkinConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zipkinConfig:         ZipkinCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ZipkinCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    zipkinConfig\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interceptors/OpenTelemetryHttpInterceptor.html": {
      url: "interceptors/OpenTelemetryHttpInterceptor.html",
      title: "interceptor - OpenTelemetryHttpInterceptor",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n  Interceptors\n  OpenTelemetryHttpInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                OpenTelemetryInterceptor class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contextManager\n                            \n                            \n                                logBody\n                            \n                            \n                                tracer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                convertStringToNumber\n                            \n                            \n                                    Private\n                                defineProbabilitySampler\n                            \n                            \n                                    Private\n                                getURL\n                            \n                            \n                                    Private\n                                initSpan\n                            \n                            \n                                    Private\n                                injectContextAndHeader\n                            \n                            \n                                    Private\n                                insertConsoleSpanExporter\n                            \n                            \n                                    Private\n                                insertOrNotSpanExporter\n                            \n                            \n                                    Private\n                                insertSpanProcessorProductionMode\n                            \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                loadResourceAttributes\n                            \n                            \n                                    Private\n                                setCustomSpan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig, exporterService: IExporter, propagatorService: IPropagator, logger: DiagLogger, customSpan: CustomSpan, platformLocation: PlatformLocation)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:72\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration\n\n                                                        \n                                                \n                                                \n                                                        exporterService\n                                                  \n                                                        \n                                                                        IExporter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                service exporter injected\n\n                                                        \n                                                \n                                                \n                                                        propagatorService\n                                                  \n                                                        \n                                                                        IPropagator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                propagator injected\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    DiagLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                define logger\n\n                                                        \n                                                \n                                                \n                                                        customSpan\n                                                  \n                                                        \n                                                                        CustomSpan\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                a customSpan interface to add attributes\n\n                                                        \n                                                \n                                                \n                                                        platformLocation\n                                                  \n                                                        \n                                                                    PlatformLocation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                encapsulates all calls to DOM APIs\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        convertStringToNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    convertStringToNumber(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:309\n                        \n                    \n\n\n            \n                \n                        convert String to Number (or undefined)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                number or undefined\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defineProbabilitySampler\n                        \n                    \n                \n            \n            \n                \n                        \n                    defineProbabilitySampler(sampleConfig: number)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:292\n                        \n                    \n\n\n            \n                \n                        define the Probability Sampler\nBy Default, it's always (or 1)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sampleConfig\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the sample configuration\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Sampler\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getURL\n                        \n                    \n                \n            \n            \n                \n                        \n                    getURL()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:172\n                        \n                    \n\n\n            \n                \n                        Get current scheme, hostname and port\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initSpan\n                        \n                    \n                \n            \n            \n                \n                        \n                    initSpan(request: HttpRequest<>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:196\n                        \n                    \n\n\n            \n                \n                        Initialise a span for a request intercepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Span\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        injectContextAndHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    injectContextAndHeader(request: HttpRequest<>)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:228\n                        \n                    \n\n\n            \n                \n                        Add header propagator in request and conserve original header\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    request\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        insertConsoleSpanExporter\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertConsoleSpanExporter()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:260\n                        \n                    \n\n\n            \n                \n                        Insert in tracer the console span if config is true\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        insertOrNotSpanExporter\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertOrNotSpanExporter()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:248\n                        \n                    \n\n\n            \n                \n                        Verify to insert or not a Span Exporter\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        insertSpanProcessorProductionMode\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertSpanProcessorProductionMode()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:272\n                        \n                    \n\n\n            \n                \n                        Insert BatchSpanProcessor in production mode\nSimpleSpanProcessor otherwise\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest<>, next: HttpHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:117\n                        \n                    \n\n\n            \n                \n                        Overide method\nInterceptor from HttpInterceptor Angular\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the current request\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    next\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadResourceAttributes\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadResourceAttributes(commonConfig: CommonCollectorConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:179\n                        \n                    \n\n\n            \n                \n                        Generate Resource Attributes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                commonConfig\n                                            \n                                                            CommonCollectorConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Resource\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setCustomSpan\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCustomSpan(span: Span, request: HttpRequest<>, response: HttpResponse<> | HttpErrorResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:321\n                        \n                    \n\n\n            \n                \n                        Set custom attributes in span with a CustomSpan\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                span\n                                            \n                                                        Span\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        HttpRequest<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        HttpResponse<> | HttpErrorResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Span\n\n                        \n                            \n                                Span\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        contextManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StackContextManager\n\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:68\n                        \n                    \n\n            \n                \n                    context manager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logBody\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:72\n                        \n                    \n\n            \n                \n                    Log or not body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tracer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebTracerProvider\n\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:64\n                        \n                    \n\n            \n                \n                    tracer\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Optional } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { PlatformLocation } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport * as api from '@opentelemetry/api';\nimport { Span, SpanStatusCode, DiagLogger, SpanKind } from '@opentelemetry/api';\nimport { WebTracerProvider, StackContextManager } from '@opentelemetry/sdk-trace-web';\nimport {\n  SimpleSpanProcessor,\n  ConsoleSpanExporter,\n  BatchSpanProcessor,\n  NoopSpanProcessor,\n  AlwaysOnSampler,\n  AlwaysOffSampler,\n  TraceIdRatioBasedSampler,\n  ParentBasedSampler,\n  Sampler,\n  BufferConfig\n} from '@opentelemetry/sdk-trace-base';\nimport {\n  isUrlIgnored\n} from '@opentelemetry/core';\nimport {\n  SEMATTRS_HTTP_USER_AGENT,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_SCHEME,\n  SEMATTRS_HTTP_HOST,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_HTTP_METHOD,\n  ATTR_SERVICE_NAME,\n  SEMATTRS_HTTP_STATUS_CODE,\n  //SEMATTRS_ERROR_TYPE\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from '@opentelemetry/resources';\nimport { tap, finalize } from 'rxjs/operators';\nimport {\n  CommonCollectorConfig,\n  OpenTelemetryConfig,\n  OTEL_CONFIG,\n} from '../configuration/opentelemetry-config';\nimport infoLibrary from '../../version.json';\nimport { OTEL_EXPORTER, IExporter } from '../services/exporter/exporter.interface';\nimport { OTEL_PROPAGATOR, IPropagator } from '../services/propagator/propagator.interface';\nimport { OTEL_LOGGER, OTEL_CUSTOM_SPAN } from '../configuration/opentelemetry-config';\nimport { CustomSpan } from './custom-span.interface';\n\n/**\n * OpenTelemetryInterceptor class\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenTelemetryHttpInterceptor implements HttpInterceptor {\n  /**\n   * tracer\n   */\n  tracer: WebTracerProvider;\n  /**\n   * context manager\n   */\n  contextManager: StackContextManager;\n  /**\n   * Log or not body\n   */\n  logBody = false;\n\n  /**\n   * constructor\n   *\n   * @param config configuration\n   * @param exporterService service exporter injected\n   * @param propagatorService propagator injected\n   * @param logger define logger\n   * @param customSpan a customSpan interface to add attributes\n   * @param platformLocation encapsulates all calls to DOM APIs\n   */\n  constructor(\n    @Inject(OTEL_CONFIG) private config: OpenTelemetryConfig,\n    @Inject(OTEL_EXPORTER)\n    private exporterService: IExporter,\n    @Inject(OTEL_PROPAGATOR)\n    private propagatorService: IPropagator,\n    @Optional() @Inject(OTEL_LOGGER)\n    private logger: DiagLogger,\n    @Optional() @Inject(OTEL_CUSTOM_SPAN)\n    private customSpan: CustomSpan,\n    private platformLocation: PlatformLocation\n  ) {\n    this.tracer = new WebTracerProvider({\n      sampler: this.defineProbabilitySampler(this.convertStringToNumber(config.commonConfig.probabilitySampler)),\n      resource: this.loadResourceAttributes(this.config.commonConfig),\n    });\n    this.insertOrNotSpanExporter();\n    this.contextManager = new StackContextManager();\n    this.tracer.register({\n      propagator: this.propagatorService.getPropagator(),\n      contextManager: this.contextManager\n    });\n    this.logBody = config.commonConfig.logBody;\n    api.diag.setLogger(logger, config.commonConfig.logLevel);\n  }\n\n  /**\n   * Overide method\n   * Interceptor from HttpInterceptor Angular\n   *\n   * @param request the current request\n   * @param next next\n   */\n  intercept(\n    request: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    if (isUrlIgnored(request.url, this.config.ignoreUrls?.urls)) {\n      return next.handle(request);\n    }\n    this.contextManager.disable(); //FIX - reinit contextManager for each http call\n    this.contextManager.enable();\n    const span: Span = this.initSpan(request);\n    const tracedReq = this.injectContextAndHeader(request);\n    return next.handle(tracedReq).pipe(\n      tap(\n        (event: HttpResponse) => {\n          span.setAttributes(\n            {\n              [SEMATTRS_HTTP_STATUS_CODE]: event.status,\n            }\n          );\n          if (this.logBody && event.body != null) {\n            span.addEvent('response', { body: JSON.stringify(event.body) });\n          }\n          span.setStatus({\n            code: SpanStatusCode.UNSET\n          });\n          this.setCustomSpan(span, request, event);\n        },\n        (event: HttpErrorResponse) => {\n          span.setAttributes(\n            {\n              [SEMATTRS_HTTP_STATUS_CODE]: event.status,\n              //[SEMATTRS_ERROR_TYPE] : event.name,\n            }\n          );\n          span.recordException({\n            name: event.name,\n            message: event.message,\n            stack: event.error\n          });\n          span.setStatus({\n            code: SpanStatusCode.ERROR\n          });\n          this.setCustomSpan(span, request, event);\n        }\n      ),\n      finalize(() => {\n        span.end();\n        this.contextManager.disable();\n      })\n    );\n  }\n\n  /**\n   * Get current scheme, hostname and port\n   */\n  private getURL() {\n    return this.platformLocation.href;\n  }\n\n  /**\n   * Generate Resource Attributes\n   */\n  private loadResourceAttributes(commonConfig: CommonCollectorConfig): Resource {\n    let resourceAttributes = Resource.default().merge(\n      new Resource({\n        [ATTR_SERVICE_NAME]: commonConfig.serviceName\n      })\n    );\n    if (commonConfig.resourceAttributes !== undefined) {\n      resourceAttributes = resourceAttributes.merge(new Resource(commonConfig.resourceAttributes));\n    }\n    return resourceAttributes;\n  }\n\n  /**\n   * Initialise a span for a request intercepted\n   *\n   * @param request request\n   */\n  private initSpan(request: HttpRequest): Span {\n    const urlRequest = (request.urlWithParams.startsWith('http')) ? new URL(request.urlWithParams) : new URL(this.getURL());\n    const span = this.tracer\n      .getTracer(infoLibrary.name, infoLibrary.version)\n      .startSpan(\n        `${request.method.toUpperCase()}`,\n        {\n          attributes: {\n            [SEMATTRS_HTTP_METHOD]: request.method,\n            [SEMATTRS_HTTP_URL]: request.urlWithParams,\n            [SEMATTRS_HTTP_HOST]: urlRequest.host,\n            [SEMATTRS_HTTP_SCHEME]: urlRequest.protocol.replace(':', ''),\n            [SEMATTRS_HTTP_TARGET]: urlRequest.pathname + urlRequest.search,\n            [SEMATTRS_HTTP_USER_AGENT]: window.navigator.userAgent\n          },\n          kind: SpanKind.CLIENT,\n        },\n        this.contextManager.active()\n      );\n    /*eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_currentContext\"] }]*/\n    this.contextManager._currentContext = api.trace.setSpan(\n      this.contextManager.active(),\n      span\n    );\n    return span;\n  }\n\n  /**\n   * Add header propagator in request and conserve original header\n   *\n   * @param request request\n   */\n  private injectContextAndHeader(\n    request: HttpRequest\n  ) {\n    const carrier = {};\n    api.propagation.inject(\n      this.contextManager.active(),\n      carrier,\n      api.defaultTextMapSetter\n    );\n    request.headers.keys().map(key => {\n      carrier[key] = request.headers.get(key);\n    });\n    return request.clone({\n      setHeaders: carrier,\n    });\n  }\n\n  /**\n   * Verify to insert or not a Span Exporter\n   */\n  private insertOrNotSpanExporter() {\n    if (this.exporterService.getExporter() !== undefined) {\n      this.insertSpanProcessorProductionMode();\n      this.insertConsoleSpanExporter();\n    } else {\n      this.tracer.addSpanProcessor(new NoopSpanProcessor());\n    }\n  }\n\n  /**\n   * Insert in tracer the console span if config is true\n   */\n  private insertConsoleSpanExporter() {\n    if (this.config.commonConfig.console) {\n      this.tracer.addSpanProcessor(\n        new SimpleSpanProcessor(new ConsoleSpanExporter())\n      );\n    }\n  }\n\n  /**\n   * Insert BatchSpanProcessor in production mode\n   * SimpleSpanProcessor otherwise\n   */\n  private insertSpanProcessorProductionMode() {\n    const bufferConfig: BufferConfig = {\n      maxExportBatchSize: this.convertStringToNumber(this.config.batchSpanProcessorConfig?.maxExportBatchSize),\n      scheduledDelayMillis: this.convertStringToNumber(this.config.batchSpanProcessorConfig?.scheduledDelayMillis),\n      exportTimeoutMillis: this.convertStringToNumber(this.config.batchSpanProcessorConfig?.exportTimeoutMillis),\n      maxQueueSize: this.convertStringToNumber(this.config.batchSpanProcessorConfig?.maxQueueSize)\n    };\n    this.tracer.addSpanProcessor(\n      this.config.commonConfig.production\n        ? new BatchSpanProcessor(this.exporterService.getExporter(), bufferConfig)\n        : new SimpleSpanProcessor(this.exporterService.getExporter())\n    );\n  }\n\n  /**\n   * define the Probability Sampler\n   * By Default, it's always (or 1)\n   *\n   * @param sampleConfig the sample configuration\n   */\n  private defineProbabilitySampler(sampleConfig: number): Sampler {\n    if (sampleConfig >= 1) {\n      return new ParentBasedSampler({ root: new AlwaysOnSampler() });\n    }\n    else if (sampleConfig , response: HttpResponse | HttpErrorResponse): Span {\n    return this.customSpan != null ? this.customSpan.add(span, request, response) : span;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/OpenTelemetryInterceptorModule.html": {
      url: "modules/OpenTelemetryInterceptorModule.html",
      title: "module - OpenTelemetryInterceptorModule",
      body: "\n                   \n\n\n\n\n    Modules\n    OpenTelemetryInterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/opentelemetry-interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(config: OpenTelemetryConfig | null | undefined, configProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/opentelemetry-interceptor.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            OpenTelemetryConfig | null | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                configProvider\n                                            \n                                                        ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  NgModule,\n  ModuleWithProviders,\n  Optional,\n  SkipSelf,\n  ValueProvider,\n  ClassProvider,\n  ConstructorProvider,\n  ExistingProvider,\n  FactoryProvider,\n} from '@angular/core';\nimport {\n  defineConfigProvider,\n  OpenTelemetryConfig,\n} from './configuration/opentelemetry-config';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { OpenTelemetryHttpInterceptor } from './interceptor/opentelemetry-http.interceptor';\n\n\n@NgModule({\n  declarations: [],\n  imports: [HttpClientModule],\n  exports: [],\n})\nexport class OpenTelemetryInterceptorModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule?: OpenTelemetryInterceptorModule\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'OpentelemetryInterceptorModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n\n  public static forRoot(\n    config: OpenTelemetryConfig | null | undefined,\n    configProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n    ): ModuleWithProviders {\n\n      //Interceptor\n      const interceptorProvider = {\n        provide: HTTP_INTERCEPTORS,\n        useClass: OpenTelemetryHttpInterceptor,\n        multi: true,\n      };\n\n      configProvider = defineConfigProvider(config,configProvider);\n\n    return {\n      ngModule: OpenTelemetryInterceptorModule,\n      providers: [\n        configProvider,\n        interceptorProvider,\n      ],\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/OtelColExporterModule.html": {
      url: "modules/OtelColExporterModule.html",
      title: "module - OtelColExporterModule",
      body: "\n                   \n\n\n\n\n    Modules\n    OtelColExporterModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol/otelcol-exporter.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { OtelcolExporterService } from './otelcol-exporter.service';\nimport { OTEL_EXPORTER } from '../exporter.interface';\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_EXPORTER, useClass: OtelcolExporterService },\n  ]\n})\nexport class OtelColExporterModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/OtelCollectorConfig.html": {
      url: "interfaces/OtelCollectorConfig.html",
      title: "interface - OtelCollectorConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OtelCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                OpenTelemetry Collector configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            concurrencyLimit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeoutMillis\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        concurrencyLimit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        concurrencyLimit:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional limit on pending requests\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     Partial>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Partial>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    custom headers\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeoutMillis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeoutMillis:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum time the OTLP exporter will wait for each batch export.\nThe default value is 10000ms.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An url (Default value: http://localhost:4318/v1/trace)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/OtelWebTracerModule.html": {
      url: "modules/OtelWebTracerModule.html",
      title: "module - OtelWebTracerModule",
      body: "\n                   \n\n\n\n\n    Modules\n    OtelWebTracerModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/otel-webtracer.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(config: OpenTelemetryConfig | null | undefined, configProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/otel-webtracer.module.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            OpenTelemetryConfig | null | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                configProvider\n                                            \n                                                        ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  APP_INITIALIZER,\n  ClassProvider,\n  ConstructorProvider,\n  ExistingProvider,\n  FactoryProvider,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n  ValueProvider,\n} from '@angular/core';\nimport {\n  defineConfigProvider,\n  OpenTelemetryConfig,\n} from './configuration/opentelemetry-config';\nimport { InstrumentationService } from './services/instrumentation/instrumentation.service';\n\nexport const instruServiceLoader = (instrumentationService: InstrumentationService) => {\n  const loader = () => instrumentationService.initInstrumentation();\n  return loader;\n};\n\n\n@NgModule()\nexport class OtelWebTracerModule {\n\n  constructor(\n    @Optional() @SkipSelf() parentModule?: OtelWebTracerModule\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'OtelWebTracerModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n\n  public static forRoot(\n    config: OpenTelemetryConfig | null | undefined,\n    configProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n  ): ModuleWithProviders {\n\n    configProvider = defineConfigProvider(config, configProvider);\n\n    return {\n      ngModule: OtelWebTracerModule,\n      providers: [\n        configProvider,\n        InstrumentationService,\n        {\n          provide: APP_INITIALIZER,\n          useFactory: instruServiceLoader,\n          deps: [InstrumentationService],\n          multi: true\n        }\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/OtelcolExporterService.html": {
      url: "injectables/OtelcolExporterService.html",
      title: "injectable - OtelcolExporterService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OtelcolExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol/otelcol-exporter.service.ts\n        \n\n\n            \n                Description\n            \n            \n                OtelcolExporterService class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                otelcolConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol/otelcol-exporter.service.ts:21\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getExporter\n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol/otelcol-exporter.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Return a CollectorExporter with the configuration\n\n\n                        \n                            Returns :     SpanExporter\n\n                        \n                            \n                                a CollectorExporter\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        otelcolConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OTLPExporterConfigBase\n\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol/otelcol-exporter.service.ts:21\n                        \n                    \n\n            \n                \n                    CollectorExporterConfigBase\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Optional } from '@angular/core';\nimport { IExporter } from '../exporter.interface';\nimport { SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport {\n  OpenTelemetryConfig,\n  OTEL_CONFIG\n} from '../../../configuration/opentelemetry-config';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { OTLPExporterConfigBase } from '@opentelemetry/otlp-exporter-base';\n\n/**\n * OtelcolExporterService class\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OtelcolExporterService implements IExporter {\n  /**\n   * CollectorExporterConfigBase\n   */\n  private otelcolConfig: OTLPExporterConfigBase;\n\n  /**\n   * constructor\n   *\n   * @param config OpenTelemetryConfig\n   */\n  constructor(\n    @Inject(OTEL_CONFIG) config: OpenTelemetryConfig\n  ) {\n    this.otelcolConfig = {\n      url: config.otelcolConfig?.url,\n      headers: config.otelcolConfig?.headers,\n      concurrencyLimit: Number(config.otelcolConfig?.concurrencyLimit),\n      timeoutMillis: Number(config.otelcolConfig?.timeoutMillis)\n    };\n  }\n\n  /**\n   * Return a CollectorExporter with the configuration\n   *\n   * @return a CollectorExporter\n   */\n  getExporter(): SpanExporter {\n    return new OTLPTraceExporter(this.otelcolConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/W3CTraceContextPropagatorModule.html": {
      url: "modules/W3CTraceContextPropagatorModule.html",
      title: "module - W3CTraceContextPropagatorModule",
      body: "\n                   \n\n\n\n\n    Modules\n    W3CTraceContextPropagatorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/w3c-trace-context-propagator/w3c-trace-context-propagator.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { W3CTraceContextPropagatorService } from './w3c-trace-context-propagator.service';\nimport { OTEL_PROPAGATOR } from '../propagator.interface';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_PROPAGATOR, useClass: W3CTraceContextPropagatorService }\n  ]\n})\nexport class W3CTraceContextPropagatorModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/W3CTraceContextPropagatorService.html": {
      url: "injectables/W3CTraceContextPropagatorService.html",
      title: "injectable - W3CTraceContextPropagatorService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  W3CTraceContextPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/w3c-trace-context-propagator/w3c-trace-context-propagator.service.ts\n        \n\n\n            \n                Description\n            \n            \n                W3CTraceContextPropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPropagator\n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/w3c-trace-context-propagator/w3c-trace-context-propagator.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Return an W3CTraceContextPropagatorService\n\n\n                        \n                            Returns :     TextMapPropagator\n\n                        \n                            \n                                TextMapPropagator as W3CTraceContextPropagatorService\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from '../propagator.interface';\nimport { TextMapPropagator } from '@opentelemetry/api';\nimport { W3CTraceContextPropagator } from '@opentelemetry/core';\n\n/**\n * W3CTraceContextPropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class W3CTraceContextPropagatorService implements IPropagator {\n  /**\n   * Return an W3CTraceContextPropagatorService\n   *\n   * @return TextMapPropagator as W3CTraceContextPropagatorService\n   */\n  getPropagator(): TextMapPropagator {\n    return new W3CTraceContextPropagator();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "interfaces/ZipkinCollectorConfig.html": {
      url: "interfaces/ZipkinCollectorConfig.html",
      title: "interface - ZipkinCollectorConfig",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ZipkinCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for Zipkin\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    custom headers\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An url (Default value: http://localhost:9411/api/v2/spans)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, InjectionToken, ValueProvider } from '@angular/core';\nimport { AttributeValue, DiagLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { CustomSpan } from '../interceptor/custom-span.interface';\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** resourceAttributes: Extra resource attribute like service.namespace ...*/\n  resourceAttributes?: Partial>;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** probabilitySampler */\n  probabilitySampler?: string;\n  /** log or not body response in span */\n  logBody?: boolean;\n  /** log level for opentelemetry */\n  logLevel?: DiagLogLevel;\n}\n\n/**\n * BatchSpanExporter Configuration\n */\nexport interface BatchSpanProcessorConfig {\n  /** The maximum queue size. After the size is reached spans are dropped. */\n  maxQueueSize?: string;\n  /** The maximum batch size of every export. It must be smaller or equal to maxQueueSize. */\n  maxExportBatchSize?: string;\n  /** The interval between two consecutive exports */\n  scheduledDelayMillis?: string;\n  /** How long the export can run before it is cancelled */\n  exportTimeoutMillis?: string;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:4318/v1/trace)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: Partial>;\n  /**\n   * An optional limit on pending requests\n   */\n  concurrencyLimit?: string;\n  /**\n   * Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms.\n   * */\n  timeoutMillis?: string;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n  /**\n   * custom headers\n   */\n  headers?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Configuration for JaegerPropagatorConfig\n */\nexport interface JaegerPropagatorConfig {\n  /**\n   * A custom Header for the propagator\n   */\n  customHeader?: string;\n}\n\n/**\n * Configuration for B3PropagatorConfig\n */\nexport interface B3PropagatorConfig {\n  /**\n   * Single or Multi Header for b3propagator (default: multi)\n   * Value : 'O' (single), '1' (multi)\n   */\n  multiHeader?: string;\n}\n\n/**\n * Configuration for IgnoreUrlsConfig\n */\nexport interface IgnoreUrlsConfig {\n  /**\n   * URLs that partially match any regex in ignoreUrls will not be traced.\n   * In addition, URLs that are _exact matches_ of strings in ignoreUrls will\n   * also not be traced.\n   */\n  urls?: Array;\n}\n\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** batchSpanProcessorConfig */\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** jaegerPropagatorConfig */\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  /** b3PropagatorConfig */\n  b3PropagatorConfig?: B3PropagatorConfig;\n  /** ignoreUrls */\n  ignoreUrls?: IgnoreUrlsConfig;\n}\n\n/** OTEL_CONFIG : Config injection */\nexport const OTEL_CONFIG = new InjectionToken('opentelemetry.config');\n\n/** Logger : injection for a logger compatible */\nexport const OTEL_LOGGER = new InjectionToken('otelcol.logger');\n\n/** custom span */\nexport const OTEL_CUSTOM_SPAN = new InjectionToken('otelcol.custom-span');\n\nexport const OTEL_INSTRUMENTATION_PLUGINS = new InjectionToken('otelcol.instrumentation.plugins');\n\nexport const defineConfigProvider = (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "modules/ZipkinExporterModule.html": {
      url: "modules/ZipkinExporterModule.html",
      title: "module - ZipkinExporterModule",
      body: "\n                   \n\n\n\n\n    Modules\n    ZipkinExporterModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin/zipkin-exporter.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { OTEL_EXPORTER } from '../exporter.interface';\nimport { ZipkinExporterService } from './zipkin-exporter.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    { provide: OTEL_EXPORTER, useClass: ZipkinExporterService }\n  ]\n})\nexport class ZipkinExporterModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "injectables/ZipkinExporterService.html": {
      url: "injectables/ZipkinExporterService.html",
      title: "injectable - ZipkinExporterService",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ZipkinExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin/zipkin-exporter.service.ts\n        \n\n\n            \n                Description\n            \n            \n                ZipkinExporterService class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                zipkinConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin/zipkin-exporter.service.ts:17\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getExporter\n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n                    \n                        \n                            Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin/zipkin-exporter.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Return a ZipkinExporter configured with zipkinConfig field\n\n\n                        \n                            Returns :     SpanExporter\n\n                        \n                            \n                                SpanExporter\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        zipkinConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ExporterConfig\n\n                    \n                \n                    \n                        \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin/zipkin-exporter.service.ts:17\n                        \n                    \n\n            \n                \n                    zipkinConfig\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IExporter } from '../exporter.interface';\nimport { SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { OpenTelemetryConfig, OTEL_CONFIG } from '../../../configuration/opentelemetry-config';\nimport { ZipkinExporter, ExporterConfig } from '@opentelemetry/exporter-zipkin';\n\n/**\n * ZipkinExporterService class\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ZipkinExporterService implements IExporter {\n  /**\n   * zipkinConfig\n   */\n  private zipkinConfig: ExporterConfig;\n\n  /**\n   * constructor\n   *\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OTEL_CONFIG) config: OpenTelemetryConfig) {\n    this.zipkinConfig = {\n      url: config.zipkinConfig?.url,\n      headers: config.zipkinConfig?.headers\n    };\n  }\n\n  /**\n   * Return a ZipkinExporter configured with zipkinConfig field\n   *\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return new ZipkinExporter(this.zipkinConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "changelog.html": {
      url: "changelog.html",
      title: "getting-started - changelog",
      body: '\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n1.9.0 (2024-09-18)\n1.8.0-3 (2024-05-07)\n1.8.0-2 (2024-04-07)\nBug Fixes\n\ndependencies lib (9783c0d)\n\n1.8.0-1 (2024-04-07)\n1.8.0 (2024-03-12)\n1.7.0-1 (2024-01-20)\n1.7.0 (2023-11-08)\n1.6.0-2 (2023-10-17)\n1.6.0-1 (2023-09-17)\nBug Fixes\n\npeerdependecies (#179) (6d94094)\n\n1.6.0 (2023-09-17)\n1.4.1-5 (2023-08-15)\nBug Fixes\n\nci publish action (ac3d9ab)\nci publish action (510be78)\n\n1.4.1-5 (2023-08-15)\nBug Fixes\n\nci publish action (ac3d9ab)\nci publish action (510be78)\n\n1.4.1-5 (2023-08-15)\nBug Fixes\n\nci publish action (ac3d9ab)\nci publish action (510be78)\n\n1.4.1-4 (2023-07-20)\n1.4.1-3 (2023-06-12)\n1.4.1-2 (2023-05-23)\n1.4.1-1 (2023-05-05)\nBug Fixes\n\nhttp span name semantic (#154) (de50104)\n\n1.4.1 (2023-03-28)\n1.4.0-1 (2023-03-18)\nFeatures\n\n#156: add resource attributes configuration (#157) (64ab01a), closes #156\n\nBug Fixes\n\n#151: add ignoreUrls configuration (26a2e27), closes #151\n\n1.4.0 (2023-02-10)\n1.3.0-1 (2022-12-31)\nBug Fixes\n\nbad url in readme (640d901)\ndeprecated package (8442349)\nreadme (24f4d6f)\nremove NoopTextMapPropagator (7f3aba9)\n\n1.3.0 (2022-12-18)\n1.2.0-1 (2022-09-25)\nBug Fixes\n\npeerDependencies (5a29d29)\n\n1.2.0 (2022-09-02)\nBug Fixes\n\nupdate api (7023a31)\n\n1.1.0-2 (2022-07-19)\nFeatures\n\nadd config to ignore urls in interceptor (6763f97)\n\nBug Fixes\n\nimport isUrlIgnored (c36e295)\n\n1.1.0-1 (2022-06-22)\nBug Fixes\n\nremove useless os dependence (97579f0)\n\n1.1.0 (2022-05-27)\nFeatures\n\nremove instrumentation plugin and rename token (#106) (59ac6ca)\n\nBug Fixes\n\npackage-lock.json (e9dc64b)\n\n1.0.1 (2021-12-03)\nFeatures\n\nadd config provider for external config (7bbaf2e)\nadd example in instrumentation (e29c839)\n\n1.0.0 (2021-11-09)\n0.25.0-2 (2021-10-24)\nBug Fixes\n\nreview aws propagator integration (4fcec62)\ntest (3ae307e)\n\n0.25.0-1 (2021-10-01)\nBug Fixes\n\nissue#80: old reference package (ee08e85), closes issue#80\n\n0.25.0 (2021-09-17)\nFeatures\n\nupdate collector and add new default http port collector (4318) (5a7c375)\n\nBug Fixes\n\nadd test for instrumentation (23e35d1)\npeer dependencies version number (41c8947)\nreturn to 0.24.0 in document-load to release (1f22380)\n\n0.24.0-1 (2021-08-04)\nBug Fixes\n\nbad version on peerDependencies (c2b4209)\n\n0.24.0 (2021-08-01)\n0.23.0 (2021-07-08)\n0.22.0 (2021-06-17)\nBug Fixes\n\nreadme (a6307f2)\n\n0.21.0 (2021-06-11)\n0.20.0 (2021-06-07)\nFeatures\n\nadd concurencyLimit (40f33cc)\n\nBug Fixes\n\nspan.kind to client value and status.code to unset (#51) (b3e15af)\nissue#41: add custom dynamic span attributes (1c7c0c0), closes issue#41\n\n0.19.0 (2021-05-03)\nFeatures\n\ncomponent with instrumentation (#34) (caab7a9)\nissue#38: add batchSpanProcessorConfig (a73e382), closes issue#38\nissue#38: add batchSpanProcessorConfig (dbaec60), closes issue#38\n\nBug Fixes\n\nissue#4: link error on documentation (2965c35), closes issue#4\nissue#42: restart context for each http call (c9f8667), closes issue#42\napi breaking change (don\'t forget in changelog...) (18d04fd)\ncypress test error on span name (68d7aee)\ngithub action rename branch main (66ca86c)\nuse protocol and method for span name (1a56037)\n\n0.18.2 (2021-03-30)\nFeatures\n\nupdate to 0.18.2 (d8b9f3c)\n\n0.18.0-1 (2021-03-26)\n0.18.0 (2021-03-10)\nFeatures\n\nupdate to version 0.18.0 (ead3251)\n\nBug Fixes\n\nerror package-lock (c53447a)\n\n0.17.0 (2021-02-21)\nBug Fixes\n\nreadme error opentelemtery (0615f02)\n\n0.16.0 (2021-02-02)\nFeatures\n\nupdate to 0.16.0 opentelemetry-js (f0a18ea)\n\n0.15.0 (2021-01-28)\n0.14.0 (2020-12-18)\nFeatures\n\nadd log body configurable (332baf7)\nupdate angular 10.2 (efa9083)\nupdate opentelemetry-js 0.14.0 (dcde5bb)\n\n0.13.0-1 (2020-12-10)\nBug Fixes\n\nerror peerDependencies, umdModuleIds and doc (e6073bf)\n\n0.13.0 (2020-12-10)\nFeatures\n\nadd B3Propagator single or multi (c71ba73)\nadd B3Propagator single or multi (de1f141)\nupdate to 0.13.0. Add Zipkin Exporter (f206c5e)\n\nBug Fixes\n\nuseless parameter (bca88a0)\n\n0.11.0-3 (2020-09-16)\nFeatures\n\nreview injection for exporter and propagator (8faa4c9)\n\nBug Fixes\n\ndependence (b112065)\nredo update angular (#21) (6e5c19a)\n\n0.11.0-2 (2020-09-15)\nFeatures\n\nAdd otelcol configuration and Logging (#19) (042898e)\n\n0.11.0-1 (2020-09-15)\nFeatures\n\nadd user-agent to otelcol (06cb6de)\n\nBug Fixes\n\nreset to previous version (0a2ccc5)\nreview code (8b1b7b5)\nreview code again (7bab017)\nuse partial and record (4bddf3a)\nversion to use in interceptor (b6dcaf7)\n\n0.11.0 (2020-09-11)\nFeatures\n\nupdate propagator-jaeger version to 0.10.0 (1a1299b)\nupgrate to 0.11.0 otelcol (09dd1bb)\n\nBug Fixes\n\nts-jest configuration (4d9a061)\n\n0.10.2-3 (2020-09-02)\nFeatures\n\nadd error in interceptor (#16) (de09c4d)\n\nBug Fixes\n\ndoc (7f7c66a)\nmerge (ff373c0)\n\n0.10.2-2 (2020-08-20)\nBug Fixes\n\nprobability (62e0d77)\n\n0.10.2-1 (2020-08-16)\n0.10.2 (2020-08-09)\nFeatures\n\nupgrade to 0.10.2 otelcol (351ce3e)\n\nBug Fixes\n\nangular 10 ngcc trouble (4d886fb)\n\n0.10.1 (2020-07-28)\nFeatures\n\nupdate angular (bfc26ae)\nupdate opentelemtry 0.10.1 (94e0b44)\n\nBug Fixes\n\notlp collector version 0.4.0 (#9) (80d2ada)\nrelease (d2ecbb8)\n\n0.9.0 (2020-06-28)\nFeatures\n\nadd cypress test e2e (7b4c031)\nadd new release 0.9.0 (#6) (0319eee)\n\n0.8.3 (2020-06-28)\nFeatures\n\nadd cypress test e2e (7b4c031)\nadd new release 0.9.0 (#6) (0319eee)\n\n0.8.3-2 (2020-06-08)\nBug Fixes\n\nchangelog (8d45a2c)\nproblem with context and trace parent id (#4) (f195a50)\n\n0.8.3-1 (2020-06-05)\nFeatures\n\nadd jaeger propagator (fad044a)\nadd JaegerPropagator to composite (8e268a9)\n\nBug Fixes\n\ncontext traceId problem (#3) (c6368c9)\n\n0.8.3 (2020-05-30)\nFeatures\n\nadd docs (bd69598)\nreview before new release version (1229a9d)\n\n0.8.2 (2020-05-30)\nFeatures\n\nadd composite (7a5b07e)\nadd composite header (83fc1f3)\nadd example ok (e5eb09e)\nadd sampling configuration (ad03334)\nangular downgrade in progress (92330f9)\nen cours (0885b40)\nok (dd7a0e5)\nok (3516488)\nok (b63afc1)\nok (b679883)\nOK it works (ec28651)\ntest (0f35b5c)\n\nBug Fixes\n\ncan be use in angular 9/node 12/Typescript 3.6.0 (563071d)\ndel doc dir (96da55f)\ndelete unused file (dda5d54)\ndelete unused file (a1746bf)\ndoc and code (4a000b9)\nno subject with JSONP and XSRF (95167b9)\nno subject with JSONP and XSRF (47aba25)\nok (371886a)\npublish (613c16d)\npublish (47c249b)\npublish (a517094)\npublish and readme (412d2fd)\nsome typo (80f7bf8)\nsome typo (735b05d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "coverage.html": {
      url: "coverage.html",
      title: "coverage - coverage",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            B3PropagatorConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            BatchSpanProcessorConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            CommonCollectorConfig\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            IgnoreUrlsConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            JaegerPropagatorConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            OpenTelemetryConfig\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            OtelCollectorConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            ZipkinCollectorConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            variable\n            defineConfigProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            variable\n            OTEL_CONFIG\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            variable\n            OTEL_CUSTOM_SPAN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            variable\n            OTEL_INSTRUMENTATION_PLUGINS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            variable\n            OTEL_LOGGER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/interceptor/custom-span.interface.ts\n            \n            interface\n            CustomSpan\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts\n            \n            interceptor\n            OpenTelemetryHttpInterceptor\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/otel-webtracer.module.ts\n            \n            variable\n            instruServiceLoader\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/console/console-span-exporter.service.ts\n            \n            injectable\n            ConsoleSpanExporterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n            \n            interface\n            IExporter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n            \n            variable\n            OTEL_EXPORTER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/noop-exporter/noop-span-exporter.service.ts\n            \n            injectable\n            NoopSpanExporterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol/otelcol-exporter.service.ts\n            \n            injectable\n            OtelcolExporterService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin/zipkin-exporter.service.ts\n            \n            injectable\n            ZipkinExporterService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/instrumentation/instrumentation.service.ts\n            \n            injectable\n            InstrumentationService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/aws-xray-propagator/aws-xray-propagator.service.ts\n            \n            injectable\n            AwsXrayPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator/b3-propagator.service.ts\n            \n            injectable\n            B3PropagatorService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator/composite-propagator.service.ts\n            \n            injectable\n            CompositePropagatorService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/jaeger-http-trace-propagator/jaeger-http-trace-propagator.service.ts\n            \n            injectable\n            JaegerHttpTracePropagatorService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/noop-http-text-propagator/noop-text-map-propagator.service.ts\n            \n            injectable\n            NoopTextMapPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n            \n            interface\n            IPropagator\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n            \n            variable\n            OTEL_PROPAGATOR\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/w3c-trace-context-propagator/w3c-trace-context-propagator.service.ts\n            \n            injectable\n            W3CTraceContextPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "dependencies.html": {
      url: "dependencies.html",
      title: "package-dependencies - dependencies",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular-devkit/core : ^14.2.12\n        \n            @angular/animations : ^14.3.0\n        \n            @angular/cdk : ^14.2.7\n        \n            @angular/common : ^14.3.0\n        \n            @angular/compiler : ^14.3.0\n        \n            @angular/core : ^14.3.0\n        \n            @angular/forms : ^14.3.0\n        \n            @angular/material : ^14.2.7\n        \n            @angular/platform-browser : ^14.3.0\n        \n            @angular/platform-browser-dynamic : ^14.3.0\n        \n            @angular/router : ^14.3.0\n        \n            ngx-highlight-js : ^13.0.0\n        \n            ngx-logger : 5.0.12\n        \n            rxjs : ^6.6.3\n        \n            tslib : ^2.6.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "index.html": {
      url: "index.html",
      title: "getting-started - index",
      body: "\n                   \n\nOpenTelemetry Angular Interceptor\n@jufab/opentelemetry-angular-interceptor is an Angular Library to deploy OpenTelemetry in your Angular application\nThis library uses opentelemetry-js package\nUse Angular >= 13.0.0\nMore info : https://jufab.github.io/opentelemetry-angular-interceptor/\n\n\nTable of contents\n\nOpenTelemetry Angular Interceptor\nTable of contents\nGetting started\nContent\nInstallation\nConfiguration\nExample global Configuration\nCommon Configuration\nBatchSpanProcessor Configuration\nOpenTelemetry-collector Configuration\nJaeger Propagator Configuration\nZipkin Exporter Configuration\nB3 Propagator Configuration\nIgnore URL Configuration\nExternal Configuration\n\n\nAngular module\nCommons Module\nExporter module\nPropagator module\n\n\nInterceptor Module\nInstrumentation Module\nInterceptor Module And Instrumentation Module\nInjection token\n\n\n(Optional) Logging in OtelColExporterModule\nNGXLogger\n\n\n(Optional) Add span attributes during interception\n\n\nHow it works\nExample\nRun\nInterceptor\nInstrumentation\n\n\n[Optional] Result in OpenTelemetry-collector\n\n\nTroubleshoot\nAngular 10 Warning\nOther\n\n\n\n\n\nGetting started\nContent\nThis library offers two possibilities to use it in Angular App : \n\nInterceptor : catch every external call with the HttpClient from angular\nInstrumentation : use instrumentation from opentelemetry-js with web plugins (You need to install and configure it) like : \n@opentelemetry/instrumentation-document-load\n@opentelemetry/instrumentation-fetch\n@opentelemetry/instrumentation-xml-http-request\n...\n\n\n\nInstallation\nWith npm :\nExample :npm i @jufab/opentelemetry-angular-interceptorConfiguration\nUse the \"OpentelemetryConfig\" interface to configure the Tracer\nExample :export interface OpenTelemetryConfig {\n  commonConfig: CommonCollectorConfig;\n  batchSpanProcessorConfig?: BatchSpanProcessorConfig;\n  otelcolConfig?: OtelCollectorConfig;\n  jaegerPropagatorConfig?: JaegerPropagatorConfig;\n  zipkinConfig?: ZipkinCollectorConfig;\n  b3PropagatorConfig?: B3PropagatorConfig;\n  ignoreUrls?: IgnoreUrlsConfig;\n}Example global Configuration\nFrom the interceptor-example\nExample :opentelemetryConfig: {\n    commonConfig: {\n      console: true, //(boolean) Display trace on console\n      production: false, //(boolean) Send trace with BatchSpanProcessor (true) or SimpleSpanProcessor (false)\n      logBody: true, //(boolean) true add body in a log, nothing otherwise\n      serviceName: 'interceptor-example', //Service name send in trace\n      resourceAttributes: { // extra resource attributes like service.namespace\n        [ATTR_SERVICE_NAMESPACE]: 'namespace'\n      },\n      probabilitySampler: '0.7', //Samples a configurable percentage of traces, string value between '0' to '1'\n      logLevel:DiagLogLevel.ALL //(Enum) DiagLogLevel is an Enum from @opentelemetry/api\n    },\n    batchSpanProcessorConfig: { //Only if production = true in commonConfig\n      maxQueueSize: '2048', // The maximum queue size. After the size is reached spans are dropped.\n      maxExportBatchSize: '512', // The maximum batch size of every export. It must be smaller or equal to maxQueueSize.\n      scheduledDelayMillis: '5000', // The interval between two consecutive exports\n      exportTimeoutMillis: '30000', // How long the export can run before it is cancelled\n    },\n    otelcolConfig: {\n      url: 'http://localhost:4318/v1/traces', //URL of opentelemetry collector\n    },\n    jaegerPropagatorConfig: {\n      customHeader: 'custom-header',\n    }\n  }From the instrumentation-example\nExample :backendApp.get('/api/config', (req,res) => {\n  return res.status(200).send({\n    commonConfig: {\n      console: true, // Display trace on console\n      production: true, // Send Trace with BatchSpanProcessor (true) or SimpleSpanProcessor (false)\n      serviceName: 'instrumentation-example', // Service name send in trace\n      resourceAttributes: { // extra resource attributes like service.namespace\n        'service.namespace': 'namespace'\n      },\n      probabilitySampler: '0.75', // 75% sampling\n      logLevel: 99 //ALL Log, DiagLogLevel is an Enum from @opentelemetry/api\n    },\n    otelcolConfig: {\n      url: 'http://localhost:4318/v1/traces', // URL of opentelemetry collector\n    }\n  });\n})\nCommon Configuration\n\nconsole: (boolean) Display trace on console if true\nproduction: (boolean)Send trace via BatchSpanProcessor (Async) or SimpleSpanProcessor (Sync) : It's recommend to use BatchSpanProcessor on Production.\nserviceName: (string) Service name in your trace\nresourceAttributes: list of extra resource attributes\nprobabilitySampler: (string) Samples a configurable percentage of traces, value between 0 to 1\nlogBody: (boolean) true add body in a log, nothing otherwise\nlogLevel: (DiagLogLevel) log level\n\nBatchSpanProcessor Configuration\nThis configuration applies if production is true in commonConfig.\n\nmaxQueueSize: (string) The maximum queue size. After the size is reached spans are dropped.\nmaxExportBatchSize: (string) The maximum batch size of every export. It must be smaller or equal to maxQueueSize.\nscheduledDelayMillis: (string) The interval between two consecutive exports\nexportTimeoutMillis: (string) How long the export can run before it is cancelled\n\nOpenTelemetry-collector Configuration\n\nurl: (string) url of opentelemetry collector (default : http://localhost:4318/v1/traces)\nheaders: list of custom header (more info: https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/exporter-trace-otlp-http)\nconcurrencyLimit (string) : An optional limit on pending requests (more info : https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/exporter-trace-otlp-http)\ntimeoutMillis (string): Maximum time the OTLP exporter will wait for each batch export. The default value is 10000ms (more info : https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/exporter-trace-otlp-http)\n\nJaeger Propagator Configuration\n\ncustomHeader: (string) custom header (more info : https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-propagator-jaeger)\n\nZipkin Exporter Configuration\n\nurl: (string) url of zipkin collector (default : http://localhost:9411/api/v2/spans)\nheaders: list of custom header (more info : https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-exporter-zipkin)\n\nB3 Propagator Configuration\n\nmultiHeader : (string) Single or Multi Header for b3propagator (default: multi). Value : 'O' (single), '1' (multi) (more info: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-propagator-b3)\n\nIgnore URL Configuration\n\nurls : (Array) URLs that partially match any regex in ignoreUrls will not be traced. In addition, URLs that are exact matches of strings in ignoreUrls will also not be traced\n\nExternal Configuration\nInstrumentation example project have an external configuration to show how you can do it.\nAngular module\nYou need 3 modules to add to your application.\n\nExporter Module : to define type and export of traces.\nPropagator Module : to define propagation in your HTTP header.\nLast Module, 2 choices :  \nOpenTelemetryInterceptorModule : to activate interceptor in all your http call.\nOtelWebTracerModule : to activate instrumentation (you need a component to activate it, see Component otel-instrumentation).\n\n\n\nCommons Module\nYou add this modules in your application module (generally app.module.ts)\nExporter module\nThere is 4 exporters:\n\nNoopSpanExporterModule : This a fake exporter\nOtelColExporterModule : OpenTelemetry exporter (more info : https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-exporter-trace-otlp-http)\nConsoleSpanExporterModule : Console Exporter\nZipkinExporterModule : Zipkin Exporter (more info : https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-exporter-zipkin)\n\nPropagator module\nthere is 6 propagators (more info about propagator: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-core)\n\nNoopHttpTextPropagatorModule : This is a fake propagator\nB3PropagatorModule : Use B3 propagator\nW3CTraceContextPropagatorModule : Use W3CTraceContext propagator\nJaegerHttpTracePropagatorModule : Use JaegerHttpPropagator (more info about this one: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-propagator-jaeger)\nAwsXrayPropagatorModule : Use AWS X-Ray propagator\nCompositePropagatorModule : use all of the propagator\n\nInterceptor Module\nJust add OpenTelemetryInterceptorModule to insert Interceptor\nExample :import { NgModule } from '@angular/core';\n...\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { OpenTelemetryInterceptorModule, OtelColExporterModule, CompositePropagatorModule } from '@jufab/opentelemetry-angular-interceptor';\nimport { environment } from '../environments/environment';\n...\n\n@NgModule({\n  declarations: [AppComponent, ...],\n  imports: [\n    ...\n    HttpClientModule,\n    //Insert module OpenTelemetryInterceptorModule with configuration, HttpClientModule is used for interceptor\n    OpenTelemetryInterceptorModule.forRoot(environment.opentelemetryConfig),\n    //Insert OtelCol exporter module\n    OtelColExporterModule,\n    //Insert propagator module\n    CompositePropagatorModule,\n    ...\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}Instrumentation Module\nDeclare this OtelWebTracerModule to configure instrumentation.\nYou need to provide Web instrumentation on the OTEL_INSTRUMENTATION_PLUGINS token in providers section of NgModule\nExample in instrumentation-example project\nExample :...\nimport { OtelColExporterModule, CompositePropagatorModule, OtelWebTracerModule } from 'projects/opentelemetry-interceptor/src/public-api';\n...\n\n@NgModule({\n  declarations: [AppComponent, ...],\n  imports: [\n    ...\n    // OtelCol Exporter Module\n    OtelColExporterModule,\n    // Composite Propagator Module\n    CompositePropagatorModule,\n    // OtelWebTracerModule to configure instrumentation component.\n    OtelWebTracerModule.forRoot(environment.openTelemetryConfig),\n    ...\n  ],\n  providers: [\n    {provide: OTEL_INSTRUMENTATION_PLUGINS, useValue: [new XMLHttpRequestInstrumentation()]}\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\nThis module uses APP_INITIALIZER token to load instrumentation (multi:true). No component needs now\nInterceptor Module And Instrumentation Module\nDon't use them at the same time : you're going to have the same trace twice.\nInjection token\nThis library exposes injection token.\nYou can use them to override or customize. \n\nOTEL_EXPORTER : token to inject an implementation of IExporter\nOTEL_PROPAGATOR : token to inject an implementation of IPropagator\nOTEL_CONFIG : token to inject an OpenTelemetryConfig\nOTEL_INSTRUMENTATION_PLUGINS : token to inject an InstrumentationOption array\nOTEL_LOGGER : more info in (Optional) Logging in OtelColExporterModule\nOTEL_CUSTOM_SPAN : more infor in (Optional) Add span attributes during interception\n\n(Optional) Logging in OtelColExporterModule\nYou can add a logger to the OtelColExporterModule with the OTEL_LOGGER token.\nYou can use a custom logger which implements the DiagLogger in @opentelemetry/api.\nOr, you can use an existing logger which implements the same functions (error, warn, info, debug) like ngx-logger.\nNGXLogger\nYou can use ngx-logger.\nIn your appModule, insert LoggerModule and configure it\nExample :@NgModule({\n  ...\n  imports: [\n    LoggerModule.forRoot(environment.loggerConfig),\n  ]\n  ...And use OTEL_LOGGER token to inject NGXLogger\nExample :@NgModule({\n  ...\n  providers: [\n    ...\n    { provide: OTEL_LOGGER, useExisting: NGXLogger }\n    ...\n  ]Don't forget to set \"logLevel\" in Common Configuration (Level must be the same between NGXLogger and common configuration)\n\nYou can see an example in the interceptor-example.\n\n(Optional) Add span attributes during interception\nThis option is only available for Interceptor Module\nImplement a CustomSpan and the method add(span: Span, request: HttpRequest, response: HttpResponse | HttpErrorResponse): Span\n\nspan : Current span, you can set or get attributes\nrequest : Current request in interceptor\nresponse : Current response in interceptor\n\nImplement CustomSpan class like : \nExample :class CustomSpanImpl implements CustomSpan {\n  add(span: Span, request: HttpRequest, response: HttpResponse | HttpErrorResponse): Span {\n    span.setAttribute('mycustom.key', request.params + \";\" + response.status);\n    return span;\n  }\n}Inject it in you App module with OTEL_CUSTOM_SPAN :\nExample :@NgModule({\n  ...\n  providers: [\n    ...\n    { provide: OTEL_CUSTOM_SPAN, useClass: CustomSpanImpl }\n    ...\n  ]\nYou can see an example in the interceptor-example.\n\nHow it works\nThis library is based on HttpClientModule and the HTTP_INTERCEPTORS\nOpenTelemetryInterceptor implement an HttpInterceptor and the intercept method.\nThis implementation initialise a WebTracerProvider, create a Span and add header propagation in the current call.\n\nThe response body is adding by an event in span.\n\nExample\nThis project has two example Angular Application:\n\nprojects/interceptor-example\nprojects/instrumentation-example\n\nYou can see how configure and insert all modules.\nYou can althought test opentelemetry-angular-interceptor with this two applications.\nRun\nInterceptor\nTo start this Interceptor example application, run command :\nExample :npm run start:complete-interceptor-exampleand open the application at http://localhost:4200\nInstrumentation\nTo start this Instrumentation example application, run command :\nExample :npm run start:complete-instrumentation-exampleand open the application at http://localhost:4200\n[Optional] Result in OpenTelemetry-collector\nIf you want to see the result in a collector *, there's a docker-compose available in this project.\nYou can start it with this command :\nExample :docker-compose -f collector/docker-compose.yaml up -dGo to the jaeger application (http://localhost:16686) to see result.\nMore info about the collector here : https://github.com/open-telemetry/opentelemetry-collector\n\n* without an Agent or a Collector you can see an error in your browser about sending a \"trace\".\n\nTroubleshoot\nAngular 10 Warning\nExample :WARNING in xxx/fesm2015/jufab-opentelemetry-angular-interceptor.js depends on '@opentelemetry/web'. CommonJS or AMD dependencies can cause optimization bailouts.\nFor more info see: https://angular.io/guide/build#configuring-commonjs-dependencies\n\nWARNING in xxx/fesm2015/jufab-opentelemetry-angular-interceptor.js depends on '@opentelemetry/core'. CommonJS or AMD dependencies can cause optimization bailouts.\nFor more info see: https://angular.io/guide/build#configuring-commonjs-dependencies\n\nWARNING in xxx/fesm2015/jufab-opentelemetry-angular-interceptor.js depends on '@opentelemetry/tracing'. CommonJS or AMD dependencies can cause optimization bailouts.\nFor more info see: https://angular.io/guide/build#configuring-commonjs-dependencies\n\nWARNING in xxx/fesm2015/jufab-opentelemetry-angular-interceptor.js depends on '@opentelemetry/api'. CommonJS or AMD dependencies can cause optimization bailouts.\nFor more info see: https://angular.io/guide/build#configuring-commonjs-dependencies\n\nWARNING in xxx/fesm2015/jufab-opentelemetry-angular-interceptor.js depends on '@opentelemetry/exporter-collector/build/src/platform/browser'. CommonJS or AMD dependencies can cause optimization bailouts.\nFor more info see: https://angular.io/guide/build#configuring-commonjs-dependenciesAdd to your angular.json\nExample :\"options\": {\n  \"allowedCommonJsDependencies\": [\n    \"@opentelemetry/api\",\n    \"@opentelemetry/exporter-collector\",\n    \"@opentelemetry/exporter-zipkin\",\n    \"@opentelemetry/tracing\",\n    \"@opentelemetry/web\",\n    \"@opentelemetry/core\",\n    \"@opentelemetry/propagator-jaeger\",\n    \"@opentelemetry/propagator-b3\",\n    \"@opentelemetry/instrumentation\",\n    \"@opentelemetry/instrumentation-xml-http-request\",\n    \"@opentelemetry/instrumentation-document-load\",\n    \"@opentelemetry/instrumentation-fetch\",\n    \"@opentelemetry/context-zone-peer-dep\"\n  ],Other\n\n\n\nError\nFix\n\n\n\n\nerror TS2694: Namespace 'NodeJS' has no exported member 'Timeout'.\nNeed dependence @type/node >= 12.0.2\n\n\nerror TS1086: An accessor cannot be declared in an ambient context.\nNeed dependence typescript >= 3.6.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    "license.html": {
      url: "license.html",
      title: "getting-started - license",
      body: '\n                   \n\nExample :                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n"License" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n"Licensor" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n"Legal Entity" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n"control" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n"You" (or "Your") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n"Source" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n"Object" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n"Work" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n"Derivative Works" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n"Contribution" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, "submitted"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as "Not a Contribution."\n"Contributor" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a "NOTICE" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\n\n   END OF TERMS AND CONDITIONS\n   APPENDIX: How to apply the Apache License to your work.\nExample :  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets "[]"\n  replaced with your own identifying information. (Don\'t include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same "printed page" as the copyright notice for easier\n  identification within third-party archives.   Copyright [yyyy] [name of copyright owner]\n   Licensed under the Apache License, Version 2.0 (the "License");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\nExample :   http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an "AS IS" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules.html": {
      url: "modules.html",
      title: "modules - modules",
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AwsXrayPropagatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        B3PropagatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompositePropagatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConsoleSpanExporterModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JaegerHttpTracePropagatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NoopSpanExporterModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NoopTextMapPropagatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenTelemetryInterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OtelColExporterModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OtelWebTracerModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        W3CTraceContextPropagatorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ZipkinExporterModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "overview.html": {
      url: "overview.html",
      title: "overview - overview",
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "properties.html": {
      url: "properties.html",
      title: "package-properties - properties",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.9.0\n        \n            Homepage : https://github.com/jufab/opentelemetry-angular-interceptor\n        \n            Author : Julien Fabre\n    \n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "todo.html": {
      url: "todo.html",
      title: "getting-started - todo",
      body: '\n                   \n\nTask for opentelemetry-angular-interceptor\nTodo in project...\nTodo\n\n Add more configuration for OpenTelemetry-collector : See here  \n Jaeger  \n Add Jaeger exporter (when it\'s available)  \n Add more configuration for Jaeger : here\n\n\n Prepare baggage here\n\nIn Progress\nDone ✓\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/variables.html": {
      url: "miscellaneous/variables.html",
      title: "miscellaneous-variables - variables",
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defineConfigProvider   (projects/.../opentelemetry-config.ts)\n                        \n                        \n                            instruServiceLoader   (projects/.../otel-webtracer.module.ts)\n                        \n                        \n                            OTEL_CONFIG   (projects/.../opentelemetry-config.ts)\n                        \n                        \n                            OTEL_CUSTOM_SPAN   (projects/.../opentelemetry-config.ts)\n                        \n                        \n                            OTEL_EXPORTER   (projects/.../exporter.interface.ts)\n                        \n                        \n                            OTEL_INSTRUMENTATION_PLUGINS   (projects/.../opentelemetry-config.ts)\n                        \n                        \n                            OTEL_LOGGER   (projects/.../opentelemetry-config.ts)\n                        \n                        \n                            OTEL_PROPAGATOR   (projects/.../propagator.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defineConfigProvider\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  config: OpenTelemetryConfig | null | undefined,\n  configProvider: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider\n): ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider => {\n  if (config) {\n    configProvider = { provide: OTEL_CONFIG, useValue: config };\n  } else {\n    if (configProvider) {\n      if (configProvider.provide !== OTEL_CONFIG) {\n        throw new Error(`Configuration error. token must be : ${OTEL_CONFIG} ,  your token value is : ${configProvider.provide}`);\n      }\n    } else {\n      throw new Error(`Configuration error. you must specify a configuration in config or configProvider`);\n    }\n  }\n  return configProvider;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OTEL_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('opentelemetry.config')\n                    \n                \n\n            \n                \n                    OTEL_CONFIG : Config injection\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OTEL_CUSTOM_SPAN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('otelcol.custom-span')\n                    \n                \n\n            \n                \n                    custom span\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OTEL_INSTRUMENTATION_PLUGINS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('otelcol.instrumentation.plugins')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OTEL_LOGGER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('otelcol.logger')\n                    \n                \n\n            \n                \n                    Logger : injection for a logger compatible\n\n                \n            \n\n        \n    \n\n    projects/opentelemetry-interceptor/src/lib/otel-webtracer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        instruServiceLoader\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (instrumentationService: InstrumentationService) => {\n  const loader = () => instrumentationService.initInstrumentation();\n  return loader;\n}\n                    \n                \n\n\n        \n    \n\n    projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OTEL_EXPORTER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('otelcol.exporter')\n                    \n                \n\n            \n                \n                    injection for a Exporter\n\n                \n            \n\n        \n    \n\n    projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OTEL_PROPAGATOR\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('otelcol.propagator')\n                    \n                \n\n            \n                \n                    injection for a propagator\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
  },
};
